
R version 2.4.1 (2006-12-18)
Copyright (C) 2006 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library( systemfit )
> data( "Kmenta" )
> 
> demand <- consump ~ price + income
> supply <- consump ~ price + farmPrice + trend
> labels <- list( "demand", "supply" )
> system <- list( demand, supply )
> restrm <- matrix(0,1,7)  # restriction matrix "R"
> restrm[1,3] <-  1
> restrm[1,7] <- -1
> restr2m <- matrix(0,2,7)  # restriction matrix "R" 2
> restr2q <- matrix(0,2,1)  # restriction vector "q" 2
> restr2m[1,3] <-  1
> restr2m[1,7] <- -1
> restr2m[2,2] <- -1
> restr2m[2,5] <-  1
> restr2q[2,1] <-  0.5
> tc <- matrix(0,7,6)
> tc[1,1] <- 1
> tc[2,2] <- 1
> tc[3,3] <- 1
> tc[4,4] <- 1
> tc[5,5] <- 1
> tc[6,6] <- 1
> tc[7,3] <- 1
> restr3m <- matrix(0,1,6)  # restriction matrix "R" 2
> restr3q <- matrix(0,1,1)  # restriction vector "q" 2
> restr3m[1,2] <- -1
> restr3m[1,5] <-  1
> restr3q[1,1] <-  0.5
> 
> # the standard equations do not converge and lead to a singular weighting matrix
> # both in R and in EViews, since both equations have the same endogenous variable
> supply2 <- price ~ income + farmPrice + trend
> system2 <- list( demand, supply2 )
> 
> 
> ## *************** SUR estimation ************************
> fitsur1 <- systemfit( "SUR", system, labels, data = Kmenta )
> print( summary( fitsur1 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  65.6829 3.86370 1.96563 0.755019 0.726198
supply 20 16 104.0584 6.50365 2.55023 0.611888 0.539117

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.72539 4.13696
supply 4.13696 5.78444

The covariance matrix of the residuals
        demand  supply
demand 3.86370 4.92431
supply 4.92431 6.50365

The correlations of the residuals
         demand   supply
demand 1.000000 0.982348
supply 0.982348 1.000000

The determinant of the residual covariance matrix: 0.879285
OLS R-squared value of the system: 0.683453
McElroy's R-squared value for the system: 0.788722

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.332894   7.514452 13.218913        0 ***
price       -0.275486   0.088509 -3.112513 0.006332  **
income        0.29855   0.041945  7.117605    2e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.96563 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 65.682902 MSE: 3.8637 Root MSE: 1.96563 
Multiple R-Squared: 0.755019 Adjusted R-Squared: 0.726198 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 61.966166   11.08079 5.592215    4e-05 ***
price        0.146884   0.094435 1.555397 0.139408    
farmPrice    0.214004   0.039868 5.367761  6.3e-05 ***
trend        0.339304   0.067911 4.996283 0.000132 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.550226 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 104.05843 MSE: 6.503652 Root MSE: 2.550226 
Multiple R-Squared: 0.611888 Adjusted R-Squared: 0.539117 

> 
> ## ********************* SUR (EViews-like) *****************
> fitsur1e <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 0,
+    probdfsys = TRUE )
> print( summary( fitsur1e ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.1857 3.89328 1.97314 0.753144 0.724102
supply 20 16 103.5499 6.47187 2.54399 0.613785 0.541369

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.16658 3.41143
supply 3.41143 4.62755

The covariance matrix of the residuals
        demand  supply
demand 3.30928 4.06638
supply 4.06638 5.17749

The correlations of the residuals
         demand   supply
demand 1.000000 0.982384
supply 0.982384 1.000000

The determinant of the residual covariance matrix: 0.59835
OLS R-squared value of the system: 0.683464
McElroy's R-squared value for the system: 0.747844

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.275662   6.927983 14.329663        0 ***
price       -0.271333   0.081601 -3.325108 0.002175  **
income       0.294879   0.038672   7.62519        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.973138 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.185679 MSE: 3.893275 Root MSE: 1.973138 
Multiple R-Squared: 0.753144 Adjusted R-Squared: 0.724102 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 62.294214    9.91096 6.285387        0 ***
price        0.146147   0.084465 1.730257 0.092928   .
farmPrice    0.212143   0.035659 5.949148    1e-06 ***
trend        0.332212   0.060742 5.469253    5e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.543987 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 103.549894 MSE: 6.471868 Root MSE: 2.543987 
Multiple R-Squared: 0.613785 Adjusted R-Squared: 0.541369 

> 
> ## ********************* SUR (rcovformula=2) *****************
> fitsur1r2 <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 2 )
> print( summary( fitsur1r2 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.8022 3.92954 1.98231 0.750844 0.721532
supply 20 16 105.3221 6.58263 2.56566 0.607175 0.533520

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.72539 4.27624
supply 4.27624 5.78444

warning: this covariance matrix is NOT positive semidefinit!

The covariance matrix of the residuals
        demand  supply
demand 3.92954 5.17327
supply 5.17327 6.58263

The correlations of the residuals
         demand   supply
demand 1.000000 0.984044
supply 0.984044 1.000000

The determinant of the residual covariance matrix: -0.896033
OLS R-squared value of the system: 0.67901
McElroy's R-squared value for the system: 1.00928

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.211993   7.512677 13.205945        0 ***
price       -0.266714   0.087712 -3.040792 0.007383  **
income       0.290795   0.040615  7.159724    2e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.982307 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.802201 MSE: 3.929541 Root MSE: 1.982307 
Multiple R-Squared: 0.750844 Adjusted R-Squared: 0.721532 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 63.076817   10.97351 5.748099    3e-05 ***
price        0.143864   0.094341 1.524947 0.146794    
farmPrice    0.206372   0.038413 5.372498  6.2e-05 ***
trend         0.33252   0.064028 5.193358  8.9e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.565663 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 105.322063 MSE: 6.582629 Root MSE: 2.565663 
Multiple R-Squared: 0.607175 Adjusted R-Squared: 0.53352 

> 
> ## *************** SUR (rcovformula=2, probdfsys = TRUE ) ***************
> fitsur1e2 <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 2,
+    probdfsys = TRUE )
> print( summary( fitsur1e2 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.8022 3.92954 1.98231 0.750844 0.721532
supply 20 16 105.3221 6.58263 2.56566 0.607175 0.533520

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.72539 4.27624
supply 4.27624 5.78444

warning: this covariance matrix is NOT positive semidefinit!

The covariance matrix of the residuals
        demand  supply
demand 3.92954 5.17327
supply 5.17327 6.58263

The correlations of the residuals
         demand   supply
demand 1.000000 0.984044
supply 0.984044 1.000000

The determinant of the residual covariance matrix: -0.896033
OLS R-squared value of the system: 0.67901
McElroy's R-squared value for the system: 1.00928

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.211993   7.512677 13.205945        0 ***
price       -0.266714   0.087712 -3.040792 0.004597  **
income       0.290795   0.040615  7.159724        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.982307 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.802201 MSE: 3.929541 Root MSE: 1.982307 
Multiple R-Squared: 0.750844 Adjusted R-Squared: 0.721532 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 63.076817   10.97351 5.748099    2e-06 ***
price        0.143864   0.094341 1.524947   0.1368    
farmPrice    0.206372   0.038413 5.372498    6e-06 ***
trend         0.33252   0.064028 5.193358    1e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.565663 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 105.322063 MSE: 6.582629 Root MSE: 2.565663 
Multiple R-Squared: 0.607175 Adjusted R-Squared: 0.53352 

> 
> ## ********************* SUR (rcovformula=3) *****************
> fitsur1r3 <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 3 )
> print( summary( fitsur1r3 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.6713 3.92184 1.98036 0.751332 0.722077
supply 20 16 105.1868 6.57417 2.56401 0.607679 0.534119

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.72539 4.26428
supply 4.26428 5.78444

warning: this covariance matrix is NOT positive semidefinit!

The covariance matrix of the residuals
        demand  supply
demand 3.92184 5.14958
supply 5.14958 6.57417

The correlations of the residuals
         demand   supply
demand 1.000000 0.983879
supply 0.983879 1.000000

The determinant of the residual covariance matrix: -0.735302
OLS R-squared value of the system: 0.679506
McElroy's R-squared value for the system: 0.957309

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.225003   7.512869 13.207338        0 ***
price       -0.267658   0.087799 -3.048537 0.007262  **
income       0.291629   0.040762  7.154496    2e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.980364 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.67132 MSE: 3.921842 Root MSE: 1.980364 
Multiple R-Squared: 0.751332 Adjusted R-Squared: 0.722077 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 62.957541  10.985025 5.731215  3.1e-05 ***
price        0.144186   0.094351 1.528194 0.145991    
farmPrice    0.207185   0.038568 5.371945  6.2e-05 ***
trend        0.333341   0.064412  5.17516  9.2e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.564015 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 105.186783 MSE: 6.574174 Root MSE: 2.564015 
Multiple R-Squared: 0.607679 Adjusted R-Squared: 0.534119 

> 
> ## *************** SUR with cross-equation restriction **************
> fitsur2 <- systemfit( "SUR", system, labels, data = Kmenta, R.restr = restrm )
> print( summary( fitsur2 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  71.5965 4.21156 2.05221 0.732963 0.701547
supply 20 16 107.8064 6.73790 2.59575 0.597909 0.522517

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.77566 4.46578
supply 4.46578 5.94299

The covariance matrix of the residuals
        demand  supply
demand 4.21156 5.23869
supply 5.23869 6.73790

The correlations of the residuals
        demand  supply
demand 1.00000 0.98342
supply 0.98342 1.00000

The determinant of the residual covariance matrix: 0.93322
OLS R-squared value of the system: 0.665436
McElroy's R-squared value for the system: 0.753405

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.840761   7.558137 13.077398        0 ***
price        -0.23978   0.085993  -2.78835 0.008613  **
income       0.266981   0.036842   7.24657        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.052209 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 71.596524 MSE: 4.21156 Root MSE: 2.052209 
Multiple R-Squared: 0.732963 Adjusted R-Squared: 0.701547 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 67.428338  10.664717 6.322562        0 ***
price        0.133217    0.09531 1.397721  0.17125    
farmPrice    0.179481   0.033654 5.333128    6e-06 ***
trend        0.266981   0.036842  7.24657        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.595747 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 107.806415 MSE: 6.737901 Root MSE: 2.595747 
Multiple R-Squared: 0.597909 Adjusted R-Squared: 0.522517 

> 
> ## *************** SUR with cross-equation restriction (EViews-like) **
> fitsur2e <- systemfit( "SUR", system, labels, data = Kmenta, R.restr = restrm,
+    rcovformula = 0 )
> print( summary( fitsur2e ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  72.5773 4.26926 2.06622 0.729305 0.697458
supply 20 16 107.9169 6.74480 2.59708 0.597497 0.522027

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.20931 3.68257
supply 3.68257 4.75439

The covariance matrix of the residuals
        demand  supply
demand 3.62887 4.35444
supply 4.35444 5.39584

The correlations of the residuals
        demand  supply
demand 1.00000 0.98405
supply 0.98405 1.00000

The determinant of the residual covariance matrix: 0.619673
OLS R-squared value of the system: 0.663401
McElroy's R-squared value for the system: 0.707287

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.779936   6.968721 14.174758        0 ***
price       -0.235367   0.079496 -2.960727 0.005561  **
income       0.263079   0.034356  7.657404        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.066217 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 72.577327 MSE: 4.269255 Root MSE: 2.066217 
Multiple R-Squared: 0.729305 Adjusted R-Squared: 0.697458 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 67.603913   9.571168 7.063288        0 ***
price        0.132825    0.08527 1.557696 0.128566    
farmPrice    0.178493   0.030506  5.85111    1e-06 ***
trend        0.263079   0.034356 7.657404        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.597076 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 107.916871 MSE: 6.744804 Root MSE: 2.597076 
Multiple R-Squared: 0.597497 Adjusted R-Squared: 0.522027 

> 
> ## *************** SUR with restriction via TX *******************
> fitsur3 <- systemfit( "SUR", system, labels, data = Kmenta, TX = tc )
> print( summary( fitsur3 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  71.5965 4.21156 2.05221 0.732963 0.701547
supply 20 16 107.8064 6.73790 2.59575 0.597909 0.522517

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.77566 4.46578
supply 4.46578 5.94299

The covariance matrix of the residuals
        demand  supply
demand 4.21156 5.23869
supply 5.23869 6.73790

The correlations of the residuals
        demand  supply
demand 1.00000 0.98342
supply 0.98342 1.00000

The determinant of the residual covariance matrix: 0.93322
OLS R-squared value of the system: 0.665436
McElroy's R-squared value for the system: 0.753405

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.840761   7.558137 13.077398        0 ***
price        -0.23978   0.085993  -2.78835 0.008613  **
income       0.266981   0.036842   7.24657        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.052209 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 71.596524 MSE: 4.21156 Root MSE: 2.052209 
Multiple R-Squared: 0.732963 Adjusted R-Squared: 0.701547 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 67.428338  10.664717 6.322562        0 ***
price        0.133217    0.09531 1.397721  0.17125    
farmPrice    0.179481   0.033654 5.333128    6e-06 ***
trend        0.266981   0.036842  7.24657        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.595747 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 107.806415 MSE: 6.737901 Root MSE: 2.595747 
Multiple R-Squared: 0.597909 Adjusted R-Squared: 0.522517 

> 
> ## *************** SUR with restriction via TX (EViews-like) **************
> fitsur3e <- systemfit( "SUR", system, labels, data = Kmenta, TX = tc,
+    rcovformula = 0 )
> print( summary( fitsur3e ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  72.5773 4.26926 2.06622 0.729305 0.697458
supply 20 16 107.9169 6.74480 2.59708 0.597497 0.522027

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.20931 3.68257
supply 3.68257 4.75439

The covariance matrix of the residuals
        demand  supply
demand 3.62887 4.35444
supply 4.35444 5.39584

The correlations of the residuals
        demand  supply
demand 1.00000 0.98405
supply 0.98405 1.00000

The determinant of the residual covariance matrix: 0.619673
OLS R-squared value of the system: 0.663401
McElroy's R-squared value for the system: 0.707287

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.779936   6.968721 14.174758        0 ***
price       -0.235367   0.079496 -2.960727 0.005561  **
income       0.263079   0.034356  7.657404        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.066217 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 72.577327 MSE: 4.269255 Root MSE: 2.066217 
Multiple R-Squared: 0.729305 Adjusted R-Squared: 0.697458 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 67.603913   9.571168 7.063288        0 ***
price        0.132825    0.08527 1.557696 0.128566    
farmPrice    0.178493   0.030506  5.85111    1e-06 ***
trend        0.263079   0.034356 7.657404        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.597076 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 107.916871 MSE: 6.744804 Root MSE: 2.597076 
Multiple R-Squared: 0.597497 Adjusted R-Squared: 0.522027 

> 
> ## *************** SUR with 2 restrictions ***************************
> fitsur4 <- systemfit( "SUR", system, labels, data = Kmenta, R.restr = restr2m,
+    q.restr = restr2q )
> print( summary( fitsur4 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  63.9868 3.76393 1.94009 0.761345 0.733268
supply 20 16 101.4731 6.34207 2.51835 0.621530 0.550567

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.76491 4.45579
supply 4.45579 5.98832

The covariance matrix of the residuals
        demand  supply
demand 3.76393 4.70247
supply 4.70247 6.34207

The correlations of the residuals
         demand   supply
demand 1.000000 0.962476
supply 0.962476 1.000000

The determinant of the residual covariance matrix: 1.75786
OLS R-squared value of the system: 0.691438
McElroy's R-squared value for the system: 0.689596

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 96.827525   7.466548 12.968179        0 ***
price       -0.279771   0.083971 -3.331764 0.002046  **
income       0.328631   0.020632 15.928109        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.940085 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 63.986801 MSE: 3.763929 Root MSE: 1.940085 
Multiple R-Squared: 0.761345 Adjusted R-Squared: 0.733268 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 52.938648   7.665482  6.906108        0 ***
price        0.220229   0.083971  2.622692 0.012832   *
farmPrice    0.232671   0.021215 10.967325        0 ***
trend        0.328631   0.020632 15.928109        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.518346 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 101.473089 MSE: 6.342068 Root MSE: 2.518346 
Multiple R-Squared: 0.62153 Adjusted R-Squared: 0.550567 

> 
> ## *************** SUR with 2 restrictions (EViews-like) **************
> fitsur4e <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 0,
+    R.restr = restr2m, q.restr = restr2q )
> print( summary( fitsur4e ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE      R2   Adj R2
demand 20 17  63.8111 3.75360 1.93742 0.76200 0.734000
supply 20 16 100.8351 6.30219 2.51042 0.62391 0.553393

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.20017 3.67434
supply 3.67434 4.79065

The covariance matrix of the residuals
        demand  supply
demand 3.19056 3.85826
supply 3.85826 5.04176

The correlations of the residuals
         demand   supply
demand 1.000000 0.961984
supply 0.961984 1.000000

The determinant of the residual covariance matrix: 1.19981
OLS R-squared value of the system: 0.692955
McElroy's R-squared value for the system: 0.652956

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  97.26781   6.920022 14.055997        0 ***
price       -0.285096   0.076719  -3.71611 0.000704 ***
income       0.329579    0.01845 17.863736        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.93742 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 63.811125 MSE: 3.753596 Root MSE: 1.93742 
Multiple R-Squared: 0.762 Adjusted R-Squared: 0.734 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 53.303998   7.104496  7.502855        0 ***
price        0.214904   0.076719  2.801176 0.008238  **
farmPrice    0.234299   0.018653 12.561069        0 ***
trend        0.329579    0.01845 17.863736        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.510417 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 100.835103 MSE: 6.302194 Root MSE: 2.510417 
Multiple R-Squared: 0.62391 Adjusted R-Squared: 0.553393 

> 
> ## *************** SUR with 2 restrictions (rcovformula = 2) **************
> fitsur4r2 <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 2,
+    R.restr = restr2m, q.restr = restr2q )
> print( summary( fitsur4r2 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  67.0475 3.94397 1.98594 0.749929 0.720509
supply 20 16 108.2171 6.76357 2.60069 0.596377 0.520698

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.76491 4.60580
supply 4.60580 5.98832

The covariance matrix of the residuals
        demand  supply
demand 3.94397 5.16157
supply 5.16157 6.76357

The correlations of the residuals
         demand   supply
demand 1.000000 0.966822
supply 0.966822 1.000000

The determinant of the residual covariance matrix: 0.0335271
OLS R-squared value of the system: 0.673153
McElroy's R-squared value for the system: 0.707639

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 92.526596   7.289606 12.692949        0 ***
price       -0.230404   0.082692 -2.786302 0.008552  **
income       0.322103   0.016626 19.373258        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.985944 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.047517 MSE: 3.943972 Root MSE: 1.985944 
Multiple R-Squared: 0.749929 Adjusted R-Squared: 0.720509 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 48.701089   7.403429   6.57818        0 ***
price        0.269596   0.082692  3.260266 0.002483  **
farmPrice    0.226135   0.016607 13.616644        0 ***
trend        0.322103   0.016626 19.373258        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.600686 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 108.217072 MSE: 6.763567 Root MSE: 2.600686 
Multiple R-Squared: 0.596377 Adjusted R-Squared: 0.520698 

> 
> ## *************** SUR with 2 restrictions (rcovformula = 3) **************
> fitsur4r3 <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 3,
+    R.restr = restr2m, q.restr = restr2q )
> print( summary( fitsur4r3 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.4048 3.90616 1.97640 0.752327 0.723189
supply 20 16 106.9240 6.68275 2.58510 0.601200 0.526425

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.76491 4.59292
supply 4.59292 5.98832

The covariance matrix of the residuals
        demand  supply
demand 3.90616 5.08791
supply 5.08791 6.68275

The correlations of the residuals
       demand supply
demand 1.0000 0.9661
supply 0.9661 1.0000

The determinant of the residual covariance matrix: 0.217064
OLS R-squared value of the system: 0.676763
McElroy's R-squared value for the system: 0.701594

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.197751   7.316811 12.737482        0 ***
price       -0.238111   0.082935 -2.871059   0.0069  **
income       0.323126   0.017039 18.963348        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.976402 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.404772 MSE: 3.906163 Root MSE: 1.976402 
Multiple R-Squared: 0.752327 Adjusted R-Squared: 0.723189 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 49.367559   7.438141  6.637083        0 ***
price        0.261889   0.082935  3.157772 0.003267  **
farmPrice    0.227104   0.017083  13.29439        0 ***
trend        0.323126   0.017039 18.963348        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.585101 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 106.923958 MSE: 6.682747 Root MSE: 2.585101 
Multiple R-Squared: 0.6012 Adjusted R-Squared: 0.526425 

> 
> ## *************** SUR with 2 restrictions via R and TX ****************
> fitsur5 <- systemfit( "SUR", system, labels, data = Kmenta, R.restr = restr3m,
+    q.restr = restr3q, TX = tc )
> print( summary( fitsur5 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  63.9868 3.76393 1.94009 0.761345 0.733268
supply 20 16 101.4731 6.34207 2.51835 0.621530 0.550567

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.76491 4.45579
supply 4.45579 5.98832

The covariance matrix of the residuals
        demand  supply
demand 3.76393 4.70247
supply 4.70247 6.34207

The correlations of the residuals
         demand   supply
demand 1.000000 0.962476
supply 0.962476 1.000000

The determinant of the residual covariance matrix: 1.75786
OLS R-squared value of the system: 0.691438
McElroy's R-squared value for the system: 0.689596

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 96.827525   7.466548 12.968179        0 ***
price       -0.279771   0.083971 -3.331764 0.002046  **
income       0.328631   0.020632 15.928109        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.940085 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 63.986801 MSE: 3.763929 Root MSE: 1.940085 
Multiple R-Squared: 0.761345 Adjusted R-Squared: 0.733268 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 52.938648   7.665482  6.906108        0 ***
price        0.220229   0.083971  2.622692 0.012832   *
farmPrice    0.232671   0.021215 10.967325        0 ***
trend        0.328631   0.020632 15.928109        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.518346 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 101.473089 MSE: 6.342068 Root MSE: 2.518346 
Multiple R-Squared: 0.62153 Adjusted R-Squared: 0.550567 

> 
> ## *************** SUR with 2 restrictions via R and TX (EViews-like) **************
> fitsur5e <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 0,
+    R.restr = restr3m, q.restr = restr3q, TX = tc )
> print( summary( fitsur5e ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE      R2   Adj R2
demand 20 17  63.8111 3.75360 1.93742 0.76200 0.734000
supply 20 16 100.8351 6.30219 2.51042 0.62391 0.553393

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.20017 3.67434
supply 3.67434 4.79065

The covariance matrix of the residuals
        demand  supply
demand 3.19056 3.85826
supply 3.85826 5.04176

The correlations of the residuals
         demand   supply
demand 1.000000 0.961984
supply 0.961984 1.000000

The determinant of the residual covariance matrix: 1.19981
OLS R-squared value of the system: 0.692955
McElroy's R-squared value for the system: 0.652956

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  97.26781   6.920022 14.055997        0 ***
price       -0.285096   0.076719  -3.71611 0.000704 ***
income       0.329579    0.01845 17.863736        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.93742 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 63.811125 MSE: 3.753596 Root MSE: 1.93742 
Multiple R-Squared: 0.762 Adjusted R-Squared: 0.734 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 53.303998   7.104496  7.502855        0 ***
price        0.214904   0.076719  2.801176 0.008238  **
farmPrice    0.234299   0.018653 12.561069        0 ***
trend        0.329579    0.01845 17.863736        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.510417 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 100.835103 MSE: 6.302194 Root MSE: 2.510417 
Multiple R-Squared: 0.62391 Adjusted R-Squared: 0.553393 

> 
> ## ************** iterated SUR ****************************
> fitsuri1 <- systemfit( "SUR", system2, labels, data = Kmenta, maxit = 100 )
> print( summary( fitsuri1 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 6 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.2863 3.89919 1.97464 0.752769 0.723683
supply 20 16 41.4111 2.58819 1.60879 0.937938 0.926301

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.89916 -2.38058
supply -2.38058  2.58815

The covariance matrix of the residuals
         demand   supply
demand  3.89919 -2.38063
supply -2.38063  2.58819

The correlations of the residuals
          demand    supply
demand  1.000000 -0.749386
supply -0.749386  1.000000

The determinant of the residual covariance matrix: 4.42447
OLS R-squared value of the system: 0.884861
McElroy's R-squared value for the system: 0.958178

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 94.053729   7.405122 12.701172        0 ***
price       -0.235545   0.088182 -2.671109 0.016117   *
income       0.311718   0.045744   6.81435    3e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.974637 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.286284 MSE: 3.899193 Root MSE: 1.974637 
Multiple R-Squared: 0.752769 Adjusted R-Squared: 0.723683 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept) 89.298175   3.382237  26.402106        0 ***
income       0.665484   0.042298  15.733148        0 ***
farmPrice   -0.474229    0.03724 -12.734343        0 ***
trend       -0.796644    0.06557 -12.149612        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.608786 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.411056 MSE: 2.588191 Root MSE: 1.608786 
Multiple R-Squared: 0.937938 Adjusted R-Squared: 0.926301 

> 
> ## ************** iterated SUR (EViews-like) *****************
> fitsuri1e <- systemfit( "SUR", system2, labels, data = Kmenta, rcovformula = 0,
+    probdfsys = TRUE, maxit = 100 )
> print( summary( fitsuri1e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 7 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.7421 3.92601 1.98141 0.751068 0.721782
supply 20 16 41.1759 2.57349 1.60421 0.938290 0.926720

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.33709 -1.96546
supply -1.96546  2.05879

The covariance matrix of the residuals
         demand   supply
demand  3.33711 -1.96547
supply -1.96547  2.05879

The correlations of the residuals
          demand    supply
demand  1.000000 -0.749851
supply -0.749851  1.000000

The determinant of the residual covariance matrix: 3.00734
OLS R-squared value of the system: 0.884625
McElroy's R-squared value for the system: 0.959109

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.619279   6.849931 13.667186        0 ***
price       -0.229539   0.081568 -2.814078 0.008182  **
income       0.310014   0.042317  7.325931        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.981415 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.742101 MSE: 3.926006 Root MSE: 1.981415 
Multiple R-Squared: 0.751068 Adjusted R-Squared: 0.721782 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept)    89.269   3.016465  29.593913        0 ***
income       0.664062   0.037723  17.603683        0 ***
farmPrice   -0.473003   0.033209 -14.243301        0 ***
trend       -0.791932   0.058461 -13.546225        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.604211 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.175862 MSE: 2.573491 Root MSE: 1.604211 
Multiple R-Squared: 0.93829 Adjusted R-Squared: 0.92672 

> 
> ## ************** iterated SUR (rcovformula = 2) ****************************
> fitsuri1r2 <- systemfit( "SUR", system2, labels, data = Kmenta, maxit = 100,
+    rcovformula = 2 )
> print( summary( fitsuri1r2 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 7 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.9392 3.93760 1.98434 0.750333 0.720961
supply 20 16 41.7645 2.61028 1.61564 0.937408 0.925672

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.93758 -2.50632
supply -2.50632  2.61027

The covariance matrix of the residuals
         demand   supply
demand  3.93760 -2.50634
supply -2.50634  2.61028

The correlations of the residuals
          demand    supply
demand  1.000000 -0.754481
supply -0.754481  1.000000

The determinant of the residual covariance matrix: 3.99651
OLS R-squared value of the system: 0.883785
McElroy's R-squared value for the system: 0.960621

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.440458   7.382104 12.657699        0 ***
price       -0.227067   0.087661 -2.590284 0.019059   *
income       0.309312   0.045821  6.750372    3e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.984339 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.939212 MSE: 3.937601 Root MSE: 1.984339 
Multiple R-Squared: 0.750333 Adjusted R-Squared: 0.720961 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept) 89.160176   3.386831  26.325546        0 ***
income       0.663534   0.042265  15.699458        0 ***
farmPrice   -0.470988   0.036942 -12.749498        0 ***
trend       -0.795203   0.064253 -12.376104        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.615636 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.764463 MSE: 2.610279 Root MSE: 1.615636 
Multiple R-Squared: 0.937408 Adjusted R-Squared: 0.925672 

> 
> ## ************** iterated SUR (rcovformula=2, probdfsys=TRUE) *****************
> fitsuri1e2 <- systemfit( "SUR", system2, labels, data = Kmenta, rcovformula = 2,
+    probdfsys = TRUE, maxit = 100 )
> print( summary( fitsuri1e2 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 7 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.9392 3.93760 1.98434 0.750333 0.720961
supply 20 16 41.7645 2.61028 1.61564 0.937408 0.925672

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.93758 -2.50632
supply -2.50632  2.61027

The covariance matrix of the residuals
         demand   supply
demand  3.93760 -2.50634
supply -2.50634  2.61028

The correlations of the residuals
          demand    supply
demand  1.000000 -0.754481
supply -0.754481  1.000000

The determinant of the residual covariance matrix: 3.99651
OLS R-squared value of the system: 0.883785
McElroy's R-squared value for the system: 0.960621

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.440458   7.382104 12.657699        0 ***
price       -0.227067   0.087661 -2.590284 0.014166   *
income       0.309312   0.045821  6.750372        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.984339 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.939212 MSE: 3.937601 Root MSE: 1.984339 
Multiple R-Squared: 0.750333 Adjusted R-Squared: 0.720961 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept) 89.160176   3.386831  26.325546        0 ***
income       0.663534   0.042265  15.699458        0 ***
farmPrice   -0.470988   0.036942 -12.749498        0 ***
trend       -0.795203   0.064253 -12.376104        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.615636 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.764463 MSE: 2.610279 Root MSE: 1.615636 
Multiple R-Squared: 0.937408 Adjusted R-Squared: 0.925672 

> 
> ## ************** iterated SUR (rcovformula = 3) ****************************
> fitsuri1r3 <- systemfit( "SUR", system2, labels, data = Kmenta, maxit = 100,
+    rcovformula = 3 )
> print( summary( fitsuri1r3 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 7 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.8258 3.93093 1.98266 0.750756 0.721433
supply 20 16 41.7081 2.60676 1.61455 0.937493 0.925773

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.93091 -2.48679
supply -2.48679  2.60675

The covariance matrix of the residuals
         demand   supply
demand  3.93093 -2.48681
supply -2.48681  2.60676

The correlations of the residuals
          demand    supply
demand  1.000000 -0.753668
supply -0.753668  1.000000

The determinant of the residual covariance matrix: 4.06276
OLS R-squared value of the system: 0.883966
McElroy's R-squared value for the system: 0.960247

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.542723   7.385832 12.665157        0 ***
price       -0.228481   0.087747 -2.603847 0.018532   *
income       0.309713   0.045807  6.761201    3e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.982657 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.825809 MSE: 3.93093 Root MSE: 1.982657 
Multiple R-Squared: 0.750756 Adjusted R-Squared: 0.721433 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept) 89.182975    3.38614  26.337655        0 ***
income       0.663871   0.042272  15.704739        0 ***
farmPrice   -0.471532   0.036993 -12.746565        0 ***
trend       -0.795507   0.064465 -12.340106        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.614546 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.708116 MSE: 2.606757 Root MSE: 1.614546 
Multiple R-Squared: 0.937493 Adjusted R-Squared: 0.925773 

> 
> ## *********** iterated SUR with restriction *******************
> fitsuri2 <- systemfit( "SUR", system2, labels, data = Kmenta, R.restr = restrm,
+    maxit = 100 )
> print( summary( fitsuri2 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 21 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  67.0238  3.94258 1.98559 0.750018 0.720608
supply 20 16 520.3287 32.52054 5.70268 0.220191 0.073977

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.94252  4.24117
supply 4.24117 32.52034

The covariance matrix of the residuals
        demand   supply
demand 3.94258  4.24148
supply 4.24148 32.52054

The correlations of the residuals
         demand   supply
demand 1.000000 0.374583
supply 0.374583 1.000000

The determinant of the residual covariance matrix: 110.225
OLS R-squared value of the system: 0.372061
McElroy's R-squared value for the system: 0.66924

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

              Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 107.367833   7.498581 14.318419        0 ***
price        -0.394459   0.091188 -4.325773 0.000126 ***
income        0.338174   0.046617  7.254284        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.985592 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.023783 MSE: 3.942575 Root MSE: 1.985592 
Multiple R-Squared: 0.750018 Adjusted R-Squared: 0.720608 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 85.044826  12.106893  7.024496        0 ***
income       0.312488   0.123346  2.533433 0.016074   *
farmPrice   -0.197207   0.115708 -1.704352 0.097439   .
trend        0.338174   0.046617  7.254284        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.702679 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 520.328675 MSE: 32.520542 Root MSE: 5.702679 
Multiple R-Squared: 0.220191 Adjusted R-Squared: 0.073977 

> 
> ## *********** iterated SUR with restriction (EViews-like) ***************
> fitsuri2e <- systemfit( "SUR", system2, labels, data = Kmenta, R.restr = restrm,
+    rcovformula = 0, maxit = 100 )
> print( summary( fitsuri2e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 22 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  67.4702  3.96884 1.99219 0.748353 0.718747
supply 20 16 520.2049 32.51281 5.70200 0.220377 0.074197

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.37345  3.57767
supply 3.57767 26.01003

The covariance matrix of the residuals
        demand   supply
demand 3.37351  3.57801
supply 3.57801 26.01025

The correlations of the residuals
         demand   supply
demand 1.000000 0.381969
supply 0.381969 1.000000

The determinant of the residual covariance matrix: 74.9437
OLS R-squared value of the system: 0.371716
McElroy's R-squared value for the system: 0.664223

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

              Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 107.805111   6.927003 15.563024        0 ***
price         -0.39858   0.084288 -4.728796  3.8e-05 ***
income        0.337917   0.043115  7.837628        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.992194 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.470241 MSE: 3.968838 Root MSE: 1.992194 
Multiple R-Squared: 0.748353 Adjusted R-Squared: 0.718747 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 85.107081  10.828732  7.859377        0 ***
income        0.31064   0.110145  2.820283  0.00795  **
farmPrice   -0.195958   0.103427 -1.894652 0.066669   .
trend        0.337917   0.043115  7.837628        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.702 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 520.204913 MSE: 32.512807 Root MSE: 5.702 
Multiple R-Squared: 0.220377 Adjusted R-Squared: 0.074197 

> 
> ## *********** iterated SUR with restriction via TX ********************
> fitsuri3 <- systemfit( "SUR", system2, labels, data = Kmenta, TX = tc,
+    maxit = 100 )
> print( summary( fitsuri3 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 21 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  67.0238  3.94258 1.98559 0.750018 0.720608
supply 20 16 520.3287 32.52054 5.70268 0.220191 0.073977

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.94252  4.24117
supply 4.24117 32.52034

The covariance matrix of the residuals
        demand   supply
demand 3.94258  4.24148
supply 4.24148 32.52054

The correlations of the residuals
         demand   supply
demand 1.000000 0.374583
supply 0.374583 1.000000

The determinant of the residual covariance matrix: 110.225
OLS R-squared value of the system: 0.372061
McElroy's R-squared value for the system: 0.66924

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

              Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 107.367833   7.498581 14.318419        0 ***
price        -0.394459   0.091188 -4.325773 0.000126 ***
income        0.338174   0.046617  7.254284        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.985592 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.023783 MSE: 3.942575 Root MSE: 1.985592 
Multiple R-Squared: 0.750018 Adjusted R-Squared: 0.720608 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 85.044826  12.106893  7.024496        0 ***
income       0.312488   0.123346  2.533433 0.016074   *
farmPrice   -0.197207   0.115708 -1.704352 0.097439   .
trend        0.338174   0.046617  7.254284        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.702679 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 520.328675 MSE: 32.520542 Root MSE: 5.702679 
Multiple R-Squared: 0.220191 Adjusted R-Squared: 0.073977 

> 
> ## *********** iterated SUR with restriction via TX (EViews-like) ***************
> fitsuri3e <- systemfit( "SUR", system2, labels, data = Kmenta, TX = tc,
+    rcovformula = 0, maxit = 100 )
> print( summary( fitsuri3e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 22 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  67.4702  3.96884 1.99219 0.748353 0.718747
supply 20 16 520.2049 32.51281 5.70200 0.220377 0.074197

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.37345  3.57767
supply 3.57767 26.01003

The covariance matrix of the residuals
        demand   supply
demand 3.37351  3.57801
supply 3.57801 26.01025

The correlations of the residuals
         demand   supply
demand 1.000000 0.381969
supply 0.381969 1.000000

The determinant of the residual covariance matrix: 74.9437
OLS R-squared value of the system: 0.371716
McElroy's R-squared value for the system: 0.664223

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

              Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 107.805111   6.927003 15.563024        0 ***
price         -0.39858   0.084288 -4.728796  3.8e-05 ***
income        0.337917   0.043115  7.837628        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.992194 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.470241 MSE: 3.968838 Root MSE: 1.992194 
Multiple R-Squared: 0.748353 Adjusted R-Squared: 0.718747 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 85.107081  10.828732  7.859377        0 ***
income        0.31064   0.110145  2.820283  0.00795  **
farmPrice   -0.195958   0.103427 -1.894652 0.066669   .
trend        0.337917   0.043115  7.837628        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.702 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 520.204913 MSE: 32.512807 Root MSE: 5.702 
Multiple R-Squared: 0.220377 Adjusted R-Squared: 0.074197 

> 
> ## *************** iterated SUR with 2 restrictions ***************************
> fitsuri4 <- systemfit( "SUR", system, labels, data = Kmenta, R.restr = restr2m,
+    q.restr = restr2q, maxit = 100 )
> print( summary( fitsuri4 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 10 iterations

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  67.2057 3.95327 1.98828 0.749340 0.719850
supply 20 16 109.2337 6.82710 2.61287 0.592585 0.516195

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.95325 5.02451
supply 5.02451 6.82706

The covariance matrix of the residuals
        demand  supply
demand 3.95327 5.02454
supply 5.02454 6.82710

The correlations of the residuals
         demand   supply
demand 1.000000 0.967163
supply 0.967163 1.000000

The determinant of the residual covariance matrix: 1.7434
OLS R-squared value of the system: 0.670962
McElroy's R-squared value for the system: 0.704623

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 92.426174   7.354296 12.567644        0 ***
price       -0.227612   0.085013 -2.677361  0.01122   *
income        0.32027   0.018494 17.317867        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.988284 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.205652 MSE: 3.953274 Root MSE: 1.988284 
Multiple R-Squared: 0.74934 Adjusted R-Squared: 0.71985 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 48.729451    7.45869  6.533246        0 ***
price        0.272388   0.085013  3.204058 0.002887  **
farmPrice     0.22315   0.018976 11.759398        0 ***
trend         0.32027   0.018494 17.317867        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.612873 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 109.233669 MSE: 6.827104 Root MSE: 2.612873 
Multiple R-Squared: 0.592585 Adjusted R-Squared: 0.516195 

> 
> ## *************** iterated SUR with 2 restrictions (EViews-like) **************
> fitsuri4e <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 0,
+    R.restr = restr2m, q.restr = restr2q, maxit = 100 )
> print( summary( fitsuri4e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 9 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.265 3.89794 1.97432 0.752848 0.723771
supply 20 16 106.722 6.67014 2.58266 0.601952 0.527318

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.31323 4.06161
supply 4.06161 5.33608

The covariance matrix of the residuals
        demand  supply
demand 3.31325 4.06163
supply 4.06163 5.33612

The correlations of the residuals
         demand   supply
demand 1.000000 0.965964
supply 0.965964 1.000000

The determinant of the residual covariance matrix: 1.18302
OLS R-squared value of the system: 0.6774
McElroy's R-squared value for the system: 0.664522

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  93.35957    6.85761  13.61401        0 ***
price       -0.239757   0.077937 -3.076298 0.004053  **
income       0.323155   0.016311 19.811891        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.97432 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.264982 MSE: 3.89794 Root MSE: 1.97432 
Multiple R-Squared: 0.752848 Adjusted R-Squared: 0.723771 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 49.545591   6.972681  7.105673        0 ***
price        0.260243   0.077937  3.339147 0.002005  **
farmPrice    0.226962   0.016434 13.810256        0 ***
trend        0.323155   0.016311 19.811891        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.582662 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 106.722321 MSE: 6.670145 Root MSE: 2.582662 
Multiple R-Squared: 0.601952 Adjusted R-Squared: 0.527318 

> 
> ## *************** iterated SUR with 2 restrictions via R and TX ****************
> fitsuri5 <- systemfit( "SUR", system, labels, data = Kmenta, R.restr = restr3m,
+    q.restr = restr3q, TX = tc, maxit = 100 )
> print( summary( fitsuri5 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 10 iterations

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  67.2057 3.95327 1.98828 0.749340 0.719850
supply 20 16 109.2337 6.82710 2.61287 0.592585 0.516195

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.95325 5.02451
supply 5.02451 6.82706

The covariance matrix of the residuals
        demand  supply
demand 3.95327 5.02454
supply 5.02454 6.82710

The correlations of the residuals
         demand   supply
demand 1.000000 0.967163
supply 0.967163 1.000000

The determinant of the residual covariance matrix: 1.7434
OLS R-squared value of the system: 0.670962
McElroy's R-squared value for the system: 0.704623

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 92.426174   7.354296 12.567644        0 ***
price       -0.227612   0.085013 -2.677361  0.01122   *
income        0.32027   0.018494 17.317867        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.988284 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.205652 MSE: 3.953274 Root MSE: 1.988284 
Multiple R-Squared: 0.74934 Adjusted R-Squared: 0.71985 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 48.729451    7.45869  6.533246        0 ***
price        0.272388   0.085013  3.204058 0.002887  **
farmPrice     0.22315   0.018976 11.759398        0 ***
trend         0.32027   0.018494 17.317867        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.612873 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 109.233669 MSE: 6.827104 Root MSE: 2.612873 
Multiple R-Squared: 0.592585 Adjusted R-Squared: 0.516195 

> 
> ## ********* iterated SUR with 2 restrictions via R and TX (EViews-like) **********
> fitsuri5e <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 0,
+    R.restr = restr3m, q.restr = restr3q, TX = tc, maxit = 100 )
> print( summary( fitsuri5e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 9 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.265 3.89794 1.97432 0.752848 0.723771
supply 20 16 106.722 6.67014 2.58266 0.601952 0.527318

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.31323 4.06161
supply 4.06161 5.33608

The covariance matrix of the residuals
        demand  supply
demand 3.31325 4.06163
supply 4.06163 5.33612

The correlations of the residuals
         demand   supply
demand 1.000000 0.965964
supply 0.965964 1.000000

The determinant of the residual covariance matrix: 1.18302
OLS R-squared value of the system: 0.6774
McElroy's R-squared value for the system: 0.664522

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  93.35957    6.85761  13.61401        0 ***
price       -0.239757   0.077937 -3.076298 0.004053  **
income       0.323155   0.016311 19.811891        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.97432 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.264982 MSE: 3.89794 Root MSE: 1.97432 
Multiple R-Squared: 0.752848 Adjusted R-Squared: 0.723771 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 49.545591   6.972681  7.105673        0 ***
price        0.260243   0.077937  3.339147 0.002005  **
farmPrice    0.226962   0.016434 13.810256        0 ***
trend        0.323155   0.016311 19.811891        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.582662 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 106.722321 MSE: 6.670145 Root MSE: 2.582662 
Multiple R-Squared: 0.601952 Adjusted R-Squared: 0.527318 

> 
> ## ********* iterated SUR with 2 restrictions via R and TX (rcovformula=2) **********
> fitsuri5r2 <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 2,
+    R.restr = restr3m, q.restr = restr3q, TX = tc, maxit = 100 )
> print( summary( fitsuri5r2 ) )

systemfit results 
method: iterated SUR 

warning: convergence not achieved after 100 iterations

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  95.7602 5.63295 2.37338 0.642838 0.600819
supply 20 16 157.7373 9.85858 3.13984 0.411679 0.301369

The covariance matrix of the residuals used for estimation
        demand  supply
demand 4.25504 5.28586
supply 5.28586 6.69323

warning: this covariance matrix is NOT positive semidefinit!

The covariance matrix of the residuals
        demand  supply
demand 5.63295 7.56339
supply 7.56339 9.85858

The correlations of the residuals
         demand   supply
demand 1.000000 0.981886
supply 0.981886 1.000000

The determinant of the residual covariance matrix: -1.67203
OLS R-squared value of the system: 0.527259
McElroy's R-squared value for the system: 0.926927

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  78.03416    7.16377 10.892891        0 ***
price       -0.064681   0.081525 -0.793381 0.432902    
income       0.300747   0.013068 23.013486        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.373384 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 95.760152 MSE: 5.63295 Root MSE: 2.373384 
Multiple R-Squared: 0.642838 Adjusted R-Squared: 0.600819 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 34.195763   7.225714   4.73251  3.6e-05 ***
price        0.435319   0.081525  5.339674    6e-06 ***
farmPrice    0.207031   0.012415 16.675571        0 ***
trend        0.300747   0.013068 23.013486        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 3.139838 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 157.737286 MSE: 9.85858 Root MSE: 3.139838 
Multiple R-Squared: 0.411679 Adjusted R-Squared: 0.301369 

> 
> ## ********* iterated SUR with 2 restrictions via R and TX (rcovformula=3) **********
> # fitsuri5e <- systemfit( "SUR", system, labels, data = Kmenta, rcovformula = 3,
> #    R.restr = restr3m, q.restr = restr3q, TX = tc, maxit = 100 )
> # print( summary( fitsuri5e ) )
> # print( round( vcov( fitsuri5e ), digits = 6 ) )
> # disabled, because the estimation does not converge
> 
> 
> ## ****************** residuals **************************
> print( residuals( fitsur1e2 ) )
       demand       supply
1   0.6150735  0.418250365
2  -0.5979146 -0.006249244
3   2.4186950  2.756494415
4   1.6091532  1.817267947
5   2.1449077  2.535656907
6   1.3324200  1.533382323
7   1.7266833  2.255808743
8  -2.7179319 -3.568342388
9  -1.2292888 -2.027331772
10  2.0881185  2.532449625
11 -0.7886248 -1.407327588
12 -2.7985190 -3.014159193
13 -1.8312455 -2.301187196
14 -0.4614107  0.018707909
15  1.9736153  2.936239781
16 -3.2912838 -4.004842202
17 -0.6523995 -0.455798174
18 -1.8994646 -3.186833033
19  2.0300772  2.182844209
20  0.3293395  0.984968567
> print( residuals( fitsur1e2$eq[[ 2 ]] ) )
 [1]  0.418250365 -0.006249244  2.756494415  1.817267947  2.535656907
 [6]  1.533382323  2.255808743 -3.568342388 -2.027331772  2.532449625
[11] -1.407327588 -3.014159193 -2.301187196  0.018707909  2.936239781
[16] -4.004842202 -0.455798174 -3.186833033  2.182844209  0.984968567
> 
> print( residuals( fitsur2e ) )
       demand     supply
1   0.3246481 -0.1997471
2  -0.7291795 -0.4806336
3   2.2884727  2.3423994
4   1.4869317  1.4565571
5   2.2709433  2.5266466
6   1.4322467  1.5373880
7   1.8508733  2.2745415
8  -2.5821399 -3.3222638
9  -1.1431985 -1.8342918
10  2.1243674  2.5115050
11 -1.1930624 -1.8847690
12 -3.3322480 -3.7047656
13 -2.2803065 -2.8128927
14 -0.6140254 -0.1766569
15  2.2814544  3.3528469
16 -3.0324617 -3.4067376
17 -0.2600125  0.2331341
18 -1.8344895 -2.7369076
19  2.2147093  2.6323477
20  0.7264771  1.6922994
> print( residuals( fitsur2e$eq[[ 1 ]] ) )
 [1]  0.3246481 -0.7291795  2.2884727  1.4869317  2.2709433  1.4322467
 [7]  1.8508733 -2.5821399 -1.1431985  2.1243674 -1.1930624 -3.3322480
[13] -2.2803065 -0.6140254  2.2814544 -3.0324617 -0.2600125 -1.8344895
[19]  2.2147093  0.7264771
> 
> print( residuals( fitsur3 ) )
       demand     supply
1   0.3655343 -0.1641572
2  -0.7107000 -0.4515749
3   2.3068054  2.3678808
4   1.5041381  1.4787054
5   2.2532000  2.5348928
6   1.4181930  1.5437315
7   1.8333898  2.2789216
8  -2.6012568 -3.3273818
9  -1.1553184 -1.8389694
10  2.1192643  2.5129700
11 -1.1361256 -1.8685697
12 -3.2571095 -3.6824555
13 -2.2170876 -2.7983641
14 -0.5925403 -0.1747780
15  2.2381167  3.3316004
16 -3.0688987 -3.4358575
17 -0.3152528  0.1993576
18 -1.8436367 -2.7636605
19  2.1887167  2.6041680
20  0.6705679  1.6535405
> print( residuals( fitsur3$eq[[ 2 ]] ) )
 [1] -0.1641572 -0.4515749  2.3678808  1.4787054  2.5348928  1.5437315
 [7]  2.2789216 -3.3273818 -1.8389694  2.5129700 -1.8685697 -3.6824555
[13] -2.7983641 -0.1747780  3.3316004 -3.4358575  0.1993576 -2.7636605
[19]  2.6041680  1.6535405
> 
> print( residuals( fitsur4r3 ) )
       demand     supply
1   0.9340521  0.2646246
2  -0.7214350 -0.6384208
3   2.3479843  2.2315597
4   1.4593124  1.1960545
5   2.1294011  2.4283001
6   1.2526642  1.3175955
7   1.5135833  1.9132980
8  -3.1854992 -4.4248682
9  -1.0968591 -1.8700467
10  2.6187465  3.4829068
11  0.1350519 -0.2603125
12 -2.0965332 -2.2753099
13 -1.4956799 -2.0853535
14 -0.2010695  0.5162951
15  1.9338513  3.4391910
16 -3.4910150 -3.9417300
17 -0.2289596  0.9134358
18 -2.2357408 -3.5025973
19  1.4399758  1.7359173
20 -1.0118317 -0.4405394
> print( residuals( fitsur4r3$eq[[ 1 ]] ) )
 [1]  0.9340521 -0.7214350  2.3479843  1.4593124  2.1294011  1.2526642
 [7]  1.5135833 -3.1854992 -1.0968591  2.6187465  0.1350519 -2.0965332
[13] -1.4956799 -0.2010695  1.9338513 -3.4910150 -0.2289596 -2.2357408
[19]  1.4399758 -1.0118317
> 
> print( residuals( fitsur5 ) )
        demand      supply
1   1.00251625  0.32193826
2  -0.54494860 -0.42855466
3   2.49488985  2.40138400
4   1.64257702  1.41055745
5   2.03285855  2.29560191
6   1.21288282  1.25448017
7   1.52600861  1.92622288
8  -3.04438404 -4.28681278
9  -1.24056412 -2.07785919
10  2.30005492  3.09729748
11 -0.03029668 -0.46495716
12 -2.03366425 -2.17830477
13 -1.30410849 -1.83556042
14 -0.21550508  0.52915960
15  1.69907566  3.17868782
16 -3.59799145 -4.08395830
17 -0.78599631  0.23712357
18 -2.10702572 -3.35441570
19  1.60703397  1.96943654
20 -0.61341291  0.08853328
> print( residuals( fitsur5$eq[[ 2 ]] ) )
 [1]  0.32193826 -0.42855466  2.40138400  1.41055745  2.29560191  1.25448017
 [7]  1.92622288 -4.28681278 -2.07785919  3.09729748 -0.46495716 -2.17830477
[13] -1.83556042  0.52915960  3.17868782 -4.08395830  0.23712357 -3.35441570
[19]  1.96943654  0.08853328
> 
> print( residuals( fitsuri1r3 ) )
       demand     supply
1   0.7951914  0.1233191
2  -0.7614426 -1.3929723
3   2.3038890 -0.8289812
4   1.4250217 -0.4298120
5   2.1792140 -1.2130458
6   1.2978539 -0.6532306
7   1.5794817 -1.2661573
8  -3.0935068  2.1529768
9  -1.0749907  1.5481536
10  2.5875902 -1.5819397
11 -0.0990772  0.9899652
12 -2.3615660  0.4595118
13 -1.6969889  1.3347358
14 -0.2819204 -1.0538997
15  2.0556788 -2.3387668
16 -3.3744504  1.7341342
17 -0.1139731 -1.0542572
18 -2.1821565  3.4607122
19  1.5611760  0.3179312
20 -0.7450240 -0.3083775
> print( residuals( fitsuri1r3$eq[[ 1 ]] ) )
 [1]  0.7951914 -0.7614426  2.3038890  1.4250217  2.1792140  1.2978539
 [7]  1.5794817 -3.0935068 -1.0749907  2.5875902 -0.0990772 -2.3615660
[13] -1.6969889 -0.2819204  2.0556788 -3.3744504 -0.1139731 -2.1821565
[19]  1.5611760 -0.7450240
> 
> print( residuals( fitsuri2 ) )
        demand      supply
1   1.13409197   6.9548352
2  -0.05872074   7.5872076
3   2.89462921   6.7012729
4   2.15083389   6.7681587
5   1.77979646   1.9295364
6   1.12001296   2.3148812
7   1.59202218   2.2302492
8  -2.59826283   4.9798992
9  -1.64143037  -0.3923332
10  1.37422202  -5.1397265
11 -0.61146216  -3.1738251
12 -1.97644567  -0.8038496
13 -0.84934249   1.0123925
14 -0.29418357  -3.2820349
15  1.08398934  -7.0416803
16 -3.85002032  -4.1403714
17 -2.32587799 -12.6282563
18 -1.71413158  -1.4980699
19  2.14085804  -2.6829845
20  0.64942165   0.3046989
> print( residuals( fitsuri2$eq[[ 2 ]] ) )
 [1]   6.9548352   7.5872076   6.7012729   6.7681587   1.9295364   2.3148812
 [7]   2.2302492   4.9798992  -0.3923332  -5.1397265  -3.1738251  -0.8038496
[13]   1.0123925  -3.2820349  -7.0416803  -4.1403714 -12.6282563  -1.4980699
[19]  -2.6829845   0.3046989
> 
> print( residuals( fitsuri3e ) )
        demand      supply
1   1.13273287   6.9319340
2  -0.04121196   7.5820445
3   2.90849004   6.6947038
4   2.16949448   6.7658698
5   1.77206439   1.9145920
6   1.11845684   2.3047376
7   1.59779607   2.2286035
8  -2.57606952   4.9817660
9  -1.65639465  -0.4095379
10  1.33577196  -5.1607850
11 -0.64581610  -3.1956424
12 -1.98678206  -0.8065859
13 -0.84077116   1.0212735
14 -0.30117518  -3.2749264
15  1.06523184  -7.0373254
16 -3.85453239  -4.1354359
17 -2.38188621 -12.6460187
18 -1.69589251  -1.4782922
19  2.16794401  -2.6473043
20  0.71254924   0.3663293
> print( residuals( fitsuri3e$eq[[ 1 ]] ) )
 [1]  1.13273287 -0.04121196  2.90849004  2.16949448  1.77206439  1.11845684
 [7]  1.59779607 -2.57606952 -1.65639465  1.33577196 -0.64581610 -1.98678206
[13] -0.84077116 -0.30117518  1.06523184 -3.85453239 -2.38188621 -1.69589251
[19]  2.16794401  0.71254924
> 
> print( residuals( fitsuri4 ) )
        demand     supply
1   0.90192011  0.2397418
2  -0.76581675 -0.6974755
3   2.30973614  2.1840642
4   1.41410325  1.1362167
5   2.15705618  2.4898217
6   1.26704231  1.3564179
7   1.51876806  1.9277938
8  -3.20599350 -4.4297270
9  -1.06201588 -1.7890792
10  2.68638542  3.5894903
11  0.14378800 -0.2478570
12 -2.14266900 -2.3690330
13 -1.56294704 -2.2102473
14 -0.20761195  0.4793592
15  2.00118756  3.5259218
16 -3.45295005 -3.8764518
17 -0.09024428  1.1288068
18 -2.25810118 -3.5394523
19  1.41720069  1.6708623
20 -1.06883811 -0.5691733
> print( residuals( fitsuri4$eq[[ 2 ]] ) )
 [1]  0.2397418 -0.6974755  2.1840642  1.1362167  2.4898217  1.3564179
 [7]  1.9277938 -4.4297270 -1.7890792  3.5894903 -0.2478570 -2.3690330
[13] -2.2102473  0.4793592  3.5259218 -3.8764518  1.1288068 -3.5394523
[19]  1.6708623 -0.5691733
> 
> print( residuals( fitsuri5r2 ) )
       demand      supply
1   0.6545291  0.02691215
2  -1.4561821 -1.51516211
3   1.7368698  1.52097071
4   0.6960225  0.30202796
5   2.5300794  2.93973872
6   1.4166671  1.54688304
7   1.4587865  1.83355287
8  -3.7785243 -5.03909973
9  -0.4981092 -1.04156204
10  3.9501376  5.07613853
11  0.8355563  0.63981224
12 -2.3470730 -2.59303465
13 -2.2861800 -3.04680916
14 -0.1372155  0.50806365
15  2.9082050  4.50362418
16 -3.0497726 -3.37859031
17  2.0905963  3.68236337
18 -2.7753015 -4.11074773
19  0.7373786  0.78189006
20 -2.6864700 -2.63697176
> print( residuals( fitsuri5r2$eq[[ 1 ]] ) )
 [1]  0.6545291 -1.4561821  1.7368698  0.6960225  2.5300794  1.4166671
 [7]  1.4587865 -3.7785243 -0.4981092  3.9501376  0.8355563 -2.3470730
[13] -2.2861800 -0.1372155  2.9082050 -3.0497726  2.0905963 -2.7753015
[19]  0.7373786 -2.6864700
> 
> 
> ## *********** variance covariance matrix of the coefficients *******
> print( round( vcov( fitsur1e2 ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        56.440312  -0.587510    0.025716        61.054961
eq 1 price              -0.587510   0.007693   -0.001866        -0.403701
eq 1 income              0.025716  -0.001866    0.001650        -0.209805
eq 2 (Intercept)        61.054961  -0.403701   -0.209805       120.417915
eq 2 price              -0.632489   0.005792    0.000546        -0.954714
eq 2 farmPrice           0.021495  -0.001559    0.001379        -0.221454
eq 2 trend               0.032652  -0.002369    0.002095        -0.308674
                 eq 2 price eq 2 farmPrice eq 2 trend
eq 1 (Intercept)  -0.632489       0.021495   0.032652
eq 1 price         0.005792      -0.001559  -0.002369
eq 1 income        0.000546       0.001379   0.002095
eq 2 (Intercept)  -0.954714      -0.221454  -0.308674
eq 2 price         0.008900       0.000584   0.000772
eq 2 farmPrice     0.000584       0.001476   0.001950
eq 2 trend         0.000772       0.001950   0.004100
> print( round( vcov( fitsur1e2$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   56.440312 -0.587510  0.025716
price         -0.587510  0.007693 -0.001866
income         0.025716 -0.001866  0.001650
> 
> print( round( vcov( fitsur1r3 ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        56.443206  -0.587720    0.025901        60.860716
eq 1 price              -0.587720   0.007709   -0.001879        -0.400864
eq 1 income              0.025901  -0.001879    0.001662        -0.210729
eq 2 (Intercept)        60.860716  -0.400864   -0.210729       120.670780
eq 2 price              -0.630659   0.005771    0.000548        -0.955395
eq 2 farmPrice           0.021589  -0.001566    0.001385        -0.223176
eq 2 trend               0.032796  -0.002379    0.002104        -0.310422
                 eq 2 price eq 2 farmPrice eq 2 trend
eq 1 (Intercept)  -0.630659       0.021589   0.032796
eq 1 price         0.005771      -0.001566  -0.002379
eq 1 income        0.000548       0.001385   0.002104
eq 2 (Intercept)  -0.955395      -0.223176  -0.310422
eq 2 price         0.008902       0.000589   0.000776
eq 2 farmPrice     0.000589       0.001487   0.001959
eq 2 trend         0.000776       0.001959   0.004149
> print( round( vcov( fitsur1r3$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)     price farmPrice     trend
(Intercept)  120.670780 -0.955395 -0.223176 -0.310422
price         -0.955395  0.008902  0.000589  0.000776
farmPrice     -0.223176  0.000589  0.001487  0.001959
trend         -0.310422  0.000776  0.001959  0.004149
> 
> print( round( vcov( fitsur2e ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        48.563078  -0.501877    0.018400        53.201367
eq 1 price              -0.501877   0.006320   -0.001335        -0.392828
eq 1 income              0.018400  -0.001335    0.001180        -0.140738
eq 2 (Intercept)        53.201367  -0.392828   -0.140738        91.607253
eq 2 price              -0.546194   0.005097    0.000373        -0.766739
eq 2 farmPrice           0.014689  -0.001066    0.000942        -0.136644
eq 2 trend               0.018400  -0.001335    0.001180        -0.140738
                 eq 2 price eq 2 farmPrice eq 2 trend
eq 1 (Intercept)  -0.546194       0.014689   0.018400
eq 1 price         0.005097      -0.001066  -0.001335
eq 1 income        0.000373       0.000942   0.001180
eq 2 (Intercept)  -0.766739      -0.136644  -0.140738
eq 2 price         0.007271       0.000368   0.000373
eq 2 farmPrice     0.000368       0.000931   0.000942
eq 2 trend         0.000373       0.000942   0.001180
> print( round( vcov( fitsur2e$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   48.563078 -0.501877  0.018400
price         -0.501877  0.006320 -0.001335
income         0.018400 -0.001335  0.001180
> 
> print( round( vcov( fitsur3 ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        57.125431  -0.589892    0.021160        64.595187
eq 1 price              -0.589892   0.007395   -0.001535        -0.482110
eq 1 income              0.021160  -0.001535    0.001357        -0.165599
eq 2 (Intercept)        64.595187  -0.482110   -0.165599       113.736182
eq 2 price              -0.662552   0.006195    0.000440        -0.956493
eq 2 farmPrice           0.017322  -0.001257    0.001111        -0.165927
eq 2 trend               0.021160  -0.001535    0.001357        -0.165599
                 eq 2 price eq 2 farmPrice eq 2 trend
eq 1 (Intercept)  -0.662552       0.017322   0.021160
eq 1 price         0.006195      -0.001257  -0.001535
eq 1 income        0.000440       0.001111   0.001357
eq 2 (Intercept)  -0.956493      -0.165927  -0.165599
eq 2 price         0.009084       0.000448   0.000440
eq 2 farmPrice     0.000448       0.001133   0.001111
eq 2 trend         0.000440       0.001111   0.001357
> print( round( vcov( fitsur3$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)     price farmPrice     trend
(Intercept)  113.736182 -0.956493 -0.165927 -0.165599
price         -0.956493  0.009084  0.000448  0.000440
farmPrice     -0.165927  0.000448  0.001133  0.001111
trend         -0.165599  0.000440  0.001111  0.001357
> 
> print( round( vcov( fitsur4r2 ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        53.138353  -0.593514    0.065746        53.390331
eq 1 price              -0.593514   0.006838   -0.000927        -0.599312
eq 1 income              0.065746  -0.000927    0.000276         0.069540
eq 2 (Intercept)        53.390331  -0.599312    0.069540        54.810757
eq 2 price              -0.593514   0.006838   -0.000927        -0.599312
eq 2 farmPrice           0.057048  -0.000775    0.000210         0.048653
eq 2 trend               0.065746  -0.000927    0.000276         0.069540
                 eq 2 price eq 2 farmPrice eq 2 trend
eq 1 (Intercept)  -0.593514       0.057048   0.065746
eq 1 price         0.006838      -0.000775  -0.000927
eq 1 income       -0.000927       0.000210   0.000276
eq 2 (Intercept)  -0.599312       0.048653   0.069540
eq 2 price         0.006838      -0.000775  -0.000927
eq 2 farmPrice    -0.000775       0.000276   0.000210
eq 2 trend        -0.000927       0.000210   0.000276
> print( round( vcov( fitsur4r2$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   53.138353 -0.593514  0.065746
price         -0.593514  0.006838 -0.000927
income         0.065746 -0.000927  0.000276
> 
> print( round( vcov( fitsur5e ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        47.886704  -0.516747    0.040579        48.218725
eq 1 price              -0.516747   0.005886   -0.000738        -0.526670
eq 1 income              0.040579  -0.000738    0.000340         0.047594
eq 2 (Intercept)        48.218725  -0.526670    0.047594        50.473858
eq 2 price              -0.516747   0.005886   -0.000738        -0.526670
eq 2 farmPrice           0.033361  -0.000562    0.000234         0.020109
eq 2 trend               0.040579  -0.000738    0.000340         0.047594
                 eq 2 price eq 2 farmPrice eq 2 trend
eq 1 (Intercept)  -0.516747       0.033361   0.040579
eq 1 price         0.005886      -0.000562  -0.000738
eq 1 income       -0.000738       0.000234   0.000340
eq 2 (Intercept)  -0.526670       0.020109   0.047594
eq 2 price         0.005886      -0.000562  -0.000738
eq 2 farmPrice    -0.000562       0.000348   0.000234
eq 2 trend        -0.000738       0.000234   0.000340
> print( round( vcov( fitsur5e$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)     price farmPrice     trend
(Intercept)   50.473858 -0.526670  0.020109  0.047594
price         -0.526670  0.005886 -0.000562 -0.000738
farmPrice      0.020109 -0.000562  0.000348  0.000234
trend          0.047594 -0.000738  0.000234  0.000340
> 
> print( round( vcov( fitsuri1r3 ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        54.550512  -0.556983    0.013891        -2.703167
eq 1 price              -0.556983   0.007700   -0.002185        -0.087329
eq 1 income              0.013891  -0.002185    0.002098         0.115993
eq 2 (Intercept)        -2.703167  -0.087329    0.115993        11.465941
eq 2 income              0.224902  -0.001848   -0.000411        -0.058750
eq 2 farmPrice          -0.172110   0.002379   -0.000675        -0.051728
eq 2 trend              -0.259704   0.003590   -0.001019        -0.057836
                 eq 2 income eq 2 farmPrice eq 2 trend
eq 1 (Intercept)    0.224902      -0.172110  -0.259704
eq 1 price         -0.001848       0.002379   0.003590
eq 1 income        -0.000411      -0.000675  -0.001019
eq 2 (Intercept)   -0.058750      -0.051728  -0.057836
eq 2 income         0.001787      -0.001018  -0.001631
eq 2 farmPrice     -0.001018       0.001368   0.001794
eq 2 trend         -0.001631       0.001794   0.004156
> print( round( vcov( fitsuri1r3$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   54.550512 -0.556983  0.013891
price         -0.556983  0.007700 -0.002185
income         0.013891 -0.002185  0.002098
> 
> print( round( vcov( fitsuri2 ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        56.228722  -0.592601    0.033216         5.954773
eq 1 price              -0.592601   0.008315   -0.002451         0.141405
eq 1 income              0.033216  -0.002451    0.002173        -0.203885
eq 2 (Intercept)         5.954773   0.141405   -0.203885       146.576864
eq 2 income             -0.251647   0.002011    0.000518        -0.828954
eq 2 farmPrice           0.190974  -0.003227    0.001351        -0.641222
eq 2 trend               0.033216  -0.002451    0.002173        -0.203885
                 eq 2 income eq 2 farmPrice eq 2 trend
eq 1 (Intercept)   -0.251647       0.190974   0.033216
eq 1 price          0.002011      -0.003227  -0.002451
eq 1 income         0.000518       0.001351   0.002173
eq 2 (Intercept)   -0.828954      -0.641222  -0.203885
eq 2 income         0.015214      -0.006835   0.000518
eq 2 farmPrice     -0.006835       0.013388   0.001351
eq 2 trend          0.000518       0.001351   0.002173
> print( round( vcov( fitsuri2$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)    income farmPrice     trend
(Intercept)  146.576864 -0.828954 -0.641222 -0.203885
income        -0.828954  0.015214 -0.006835  0.000518
farmPrice     -0.641222 -0.006835  0.013388  0.001351
trend         -0.203885  0.000518  0.001351  0.002173
> 
> print( round( vcov( fitsuri3e ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        47.983367  -0.505917    0.028570         4.986011
eq 1 price              -0.505917   0.007104   -0.002098         0.119753
eq 1 income              0.028570  -0.002098    0.001859        -0.172089
eq 2 (Intercept)         4.986011   0.119753   -0.172089       117.261427
eq 2 income             -0.211763   0.001700    0.000428        -0.661134
eq 2 farmPrice           0.160903  -0.002728    0.001147        -0.514052
eq 2 trend               0.028570  -0.002098    0.001859        -0.172089
                 eq 2 income eq 2 farmPrice eq 2 trend
eq 1 (Intercept)   -0.211763       0.160903   0.028570
eq 1 price          0.001700      -0.002728  -0.002098
eq 1 income         0.000428       0.001147   0.001859
eq 2 (Intercept)   -0.661134      -0.514052  -0.172089
eq 2 income         0.012132      -0.005450   0.000428
eq 2 farmPrice     -0.005450       0.010697   0.001147
eq 2 trend          0.000428       0.001147   0.001859
> print( round( vcov( fitsuri3e$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   47.983367 -0.505917  0.028570
price         -0.505917  0.007104 -0.002098
income         0.028570 -0.002098  0.001859
> 
> print( round( vcov( fitsuri4e ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        47.026816  -0.525375    0.058300        47.234560
eq 1 price              -0.525375   0.006074   -0.000842        -0.530682
eq 1 income              0.058300  -0.000842    0.000266         0.061997
eq 2 (Intercept)        47.234560  -0.530682    0.061997        48.618283
eq 2 price              -0.525375   0.006074   -0.000842        -0.530682
eq 2 farmPrice           0.050751  -0.000704    0.000201         0.042182
eq 2 trend               0.058300  -0.000842    0.000266         0.061997
                 eq 2 price eq 2 farmPrice eq 2 trend
eq 1 (Intercept)  -0.525375       0.050751   0.058300
eq 1 price         0.006074      -0.000704  -0.000842
eq 1 income       -0.000842       0.000201   0.000266
eq 2 (Intercept)  -0.530682       0.042182   0.061997
eq 2 price         0.006074      -0.000704  -0.000842
eq 2 farmPrice    -0.000704       0.000270   0.000201
eq 2 trend        -0.000842       0.000201   0.000266
> print( round( vcov( fitsuri4e$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)     price farmPrice     trend
(Intercept)   48.618283 -0.530682  0.042182  0.061997
price         -0.530682  0.006074 -0.000704 -0.000842
farmPrice      0.042182 -0.000704  0.000270  0.000201
trend          0.061997 -0.000842  0.000201  0.000266
> 
> print( round( vcov( fitsuri5r2 ), digits = 6 ) )
                 eq 1 (Intercept) eq 1 price eq 1 income eq 2 (Intercept)
eq 1 (Intercept)        51.319595  -0.579747    0.070528        51.551829
eq 1 price              -0.579747   0.006646   -0.000872        -0.583025
eq 1 income              0.070528  -0.000872    0.000171         0.072036
eq 2 (Intercept)        51.551829  -0.583025    0.072036        52.210946
eq 2 price              -0.579747   0.006646   -0.000872        -0.583025
eq 2 farmPrice           0.061658  -0.000751    0.000138         0.058794
eq 2 trend               0.070528  -0.000872    0.000171         0.072036
                 eq 2 price eq 2 farmPrice eq 2 trend
eq 1 (Intercept)  -0.579747       0.061658   0.070528
eq 1 price         0.006646      -0.000751  -0.000872
eq 1 income       -0.000872       0.000138   0.000171
eq 2 (Intercept)  -0.583025       0.058794   0.072036
eq 2 price         0.006646      -0.000751  -0.000872
eq 2 farmPrice    -0.000751       0.000154   0.000138
eq 2 trend        -0.000872       0.000138   0.000171
> print( round( vcov( fitsuri5r2$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   51.319595 -0.579747  0.070528
price         -0.579747  0.006646 -0.000872
income         0.070528 -0.000872  0.000171
> 
> 
> ## *********** confidence intervals of coefficients *************
> print( confint( fitsur1e2 ) )
                  2.5 %  97.5 %
eq 1 (Intercept) 83.927 114.497
eq 1 price       -0.445  -0.088
eq 1 income       0.208   0.373
eq 2 (Intercept) 40.751  85.403
eq 2 price       -0.048   0.336
eq 2 farmPrice    0.128   0.285
eq 2 trend        0.202   0.463
> print( confint( fitsur1e2$eq[[ 2 ]], level = 0.9 ) )
               5 %   95 %
(Intercept) 44.506 81.648
price       -0.016  0.304
farmPrice    0.141  0.271
trend        0.224  0.441
> 
> print( confint( fitsur2e, level = 0.9 ) )
                    5 %    95 %
eq 1 (Intercept) 84.618 112.942
eq 1 price       -0.397  -0.074
eq 1 income       0.193   0.333
eq 2 (Intercept) 48.153  87.055
eq 2 price       -0.040   0.306
eq 2 farmPrice    0.116   0.240
eq 2 trend        0.193   0.333
> print( confint( fitsur2e$eq[[ 1 ]], level = 0.99 ) )
             0.5 %  99.5 %
(Intercept) 79.767 117.793
price       -0.452  -0.018
income       0.169   0.357
> 
> print( confint( fitsur3, level = 0.99 ) )
                  0.5 %  99.5 %
eq 1 (Intercept) 83.481 114.201
eq 1 price       -0.415  -0.065
eq 1 income       0.192   0.342
eq 2 (Intercept) 45.755  89.102
eq 2 price       -0.060   0.327
eq 2 farmPrice    0.111   0.248
eq 2 trend        0.192   0.342
> print( confint( fitsur3$eq[[ 2 ]], level = 0.5 ) )
              25 %   75 %
(Intercept) 60.157 74.699
price        0.068  0.198
farmPrice    0.157  0.202
trend        0.242  0.292
> 
> print( confint( fitsur4r3, level = 0.5 ) )
                   25 %    75 %
eq 1 (Intercept) 78.344 108.052
eq 1 price       -0.406  -0.070
eq 1 income       0.289   0.358
eq 2 (Intercept) 34.267  64.468
eq 2 price        0.094   0.430
eq 2 farmPrice    0.192   0.262
eq 2 trend        0.289   0.358
> print( confint( fitsur4r3$eq[[ 1 ]], level = 0.25 ) )
            37.5 % 62.5 %
(Intercept) 90.848 95.548
price       -0.265 -0.211
income       0.318  0.329
> 
> print( confint( fitsur5, level = 0.25 ) )
                 37.5 %  62.5 %
eq 1 (Intercept) 81.670 111.985
eq 1 price       -0.450  -0.109
eq 1 income       0.287   0.371
eq 2 (Intercept) 37.377  68.500
eq 2 price        0.050   0.391
eq 2 farmPrice    0.190   0.276
eq 2 trend        0.287   0.371
> print( confint( fitsur5$eq[[ 2 ]], level = 0.975 ) )
             1.3 % 98.8 %
(Intercept) 34.986 70.891
price        0.024  0.417
farmPrice    0.183  0.282
trend        0.280  0.377
> 
> print( confint( fitsuri1r3, level = 0.975 ) )
                  1.3 %  98.8 %
eq 1 (Intercept) 77.960 109.125
eq 1 price       -0.414  -0.043
eq 1 income       0.213   0.406
eq 2 (Intercept) 82.005  96.361
eq 2 income       0.574   0.753
eq 2 farmPrice   -0.550  -0.393
eq 2 trend       -0.932  -0.659
> print( confint( fitsuri1r3$eq[[ 1 ]], level = 0.999 ) )
             0.1 %   100 %
(Intercept) 64.257 122.828
price       -0.576   0.119
income       0.128   0.491
> 
> print( confint( fitsuri2, level = 0.999 ) )
                  0.1 %   100 %
eq 1 (Intercept) 92.129 122.607
eq 1 price       -0.580  -0.209
eq 1 income       0.243   0.433
eq 2 (Intercept) 60.441 109.649
eq 2 income       0.062   0.563
eq 2 farmPrice   -0.432   0.038
eq 2 trend        0.243   0.433
> print( confint( fitsuri2$eq[[ 2 ]], level = 0.1 ) )
              45 %   55 %
(Intercept) 83.512 86.578
income       0.297  0.328
farmPrice   -0.212 -0.183
trend        0.332  0.344
> 
> print( confint( fitsuri3e, level = 0.1 ) )
                   45 %    55 %
eq 1 (Intercept) 93.728 121.882
eq 1 price       -0.570  -0.227
eq 1 income       0.250   0.426
eq 2 (Intercept) 63.100 107.114
eq 2 income       0.087   0.534
eq 2 farmPrice   -0.406   0.014
eq 2 trend        0.250   0.426
> print( confint( fitsuri3e$eq[[ 1 ]], level = 0.01 ) )
             49.5 %  50.5 %
(Intercept) 107.718 107.893
price        -0.400  -0.398
income        0.337   0.338
> 
> print( confint( fitsuri4, level = 0.01 ) )
                 49.5 %  50.5 %
eq 1 (Intercept) 77.496 107.356
eq 1 price       -0.400  -0.055
eq 1 income       0.283   0.358
eq 2 (Intercept) 33.588  63.871
eq 2 price        0.100   0.445
eq 2 farmPrice    0.185   0.262
eq 2 trend        0.283   0.358
> print( confint( fitsuri4$eq[[ 2 ]], level = 0.33 ) )
            33.5 % 66.5 %
(Intercept) 45.524 51.935
price        0.236  0.309
farmPrice    0.215  0.231
trend        0.312  0.328
> 
> print( confint( fitsuri5r2, level = 0.33 ) )
                 33.5 % 66.5 %
eq 1 (Intercept) 63.491 92.577
eq 1 price       -0.230  0.101
eq 1 income       0.274  0.327
eq 2 (Intercept) 19.527 48.865
eq 2 price        0.270  0.601
eq 2 farmPrice    0.182  0.232
eq 2 trend        0.274  0.327
> print( confint( fitsuri5r2$eq[[ 1 ]] ) )
             2.5 % 97.5 %
(Intercept) 63.491 92.577
price       -0.230  0.101
income       0.274  0.327
> 
> 
> ## *********** fitted values *************
> print( fitted( fitsur1e2 ) )
            eq1       eq2
 [1,]  97.86993  98.06675
 [2,]  99.78491  99.19325
 [3,]  99.74431  99.40651
 [4,]  99.89485  99.68673
 [5,] 102.09509 101.70434
 [6,] 101.91058 101.70962
 [7,] 102.26632 101.73719
 [8,] 102.61793 103.46834
 [9,] 101.57929 102.37733
[10,] 100.73188 100.28755
[11,]  96.22362  96.84233
[12,]  95.22252  95.43816
[13,]  96.36625  96.83619
[14,]  99.21841  98.73829
[15,] 103.82338 102.86076
[16,] 103.51628 104.22984
[17,] 104.17440 103.97780
[18,] 101.82846 103.11583
[19,] 103.19292 103.04016
[20,] 105.90266 105.24703
> print( fitted( fitsur1e2$eq[[ 2 ]] ) )
 [1]  98.06675  99.19325  99.40651  99.68673 101.70434 101.70962 101.73719
 [8] 103.46834 102.37733 100.28755  96.84233  95.43816  96.83619  98.73829
[15] 102.86076 104.22984 103.97780 103.11583 103.04016 105.24703
> 
> print( fitted( fitsur2e ) )
            eq1       eq2
 [1,]  98.16035  98.68475
 [2,]  99.91618  99.66763
 [3,]  99.87453  99.82060
 [4,] 100.01707 100.04744
 [5,] 101.96906 101.71335
 [6,] 101.81075 101.70561
 [7,] 102.14213 101.71846
 [8,] 102.48214 103.22226
 [9,] 101.49320 102.18429
[10,] 100.69563 100.30849
[11,]  96.62806  97.31977
[12,]  95.75625  96.12877
[13,]  96.81531  97.34789
[14,]  99.37103  98.93366
[15,] 103.51555 102.44415
[16,] 103.25746 103.63174
[17,] 103.78201 103.28887
[18,] 101.76349 102.66591
[19,] 103.00829 102.59065
[20,] 105.50552 104.53970
> print( fitted( fitsur2e$eq[[ 1 ]] ) )
 [1]  98.16035  99.91618  99.87453 100.01707 101.96906 101.81075 102.14213
 [8] 102.48214 101.49320 100.69563  96.62806  95.75625  96.81531  99.37103
[15] 103.51555 103.25746 103.78201 101.76349 103.00829 105.50552
> 
> print( fitted( fitsur3 ) )
            eq1       eq2
 [1,]  98.11947  98.64916
 [2,]  99.89770  99.63857
 [3,]  99.85619  99.79512
 [4,]  99.99986 100.02529
 [5,] 101.98680 101.70511
 [6,] 101.82481 101.69927
 [7,] 102.15961 101.71408
 [8,] 102.50126 103.22738
 [9,] 101.50532 102.18897
[10,] 100.70074 100.30703
[11,]  96.57113  97.30357
[12,]  95.68111  96.10646
[13,]  96.75209  97.33336
[14,]  99.34954  98.93178
[15,] 103.55888 102.46540
[16,] 103.29390 103.66086
[17,] 103.83725 103.32264
[18,] 101.77264 102.69266
[19,] 103.03428 102.61883
[20,] 105.56143 104.57846
> print( fitted( fitsur3$eq[[ 2 ]] ) )
 [1]  98.64916  99.63857  99.79512 100.02529 101.70511 101.69927 101.71408
 [8] 103.22738 102.18897 100.30703  97.30357  96.10646  97.33336  98.93178
[15] 102.46540 103.66086 103.32264 102.69266 102.61883 104.57846
> 
> print( fitted( fitsur4r3 ) )
            eq1       eq2
 [1,]  97.55095  98.22038
 [2,]  99.90843  99.82542
 [3,]  99.81502  99.93144
 [4,] 100.04469 100.30795
 [5,] 102.11060 101.81170
 [6,] 101.99034 101.92540
 [7,] 102.47942 102.07970
 [8,] 103.08550 104.32487
 [9,] 101.44686 102.22005
[10,] 100.20125  99.33709
[11,]  95.29995  95.69531
[12,]  94.52053  94.69931
[13,]  96.03068  96.62035
[14,]  98.95807  98.24070
[15,] 103.86315 102.35781
[16,] 103.71601 104.16673
[17,] 103.75096 102.60856
[18,] 102.16474 103.43160
[19,] 103.78302 103.48708
[20,] 107.24383 106.67254
> print( fitted( fitsur4r3$eq[[ 1 ]] ) )
 [1]  97.55095  99.90843  99.81502 100.04469 102.11060 101.99034 102.47942
 [8] 103.08550 101.44686 100.20125  95.29995  94.52053  96.03068  98.95807
[15] 103.86315 103.71601 103.75096 102.16474 103.78302 107.24383
> 
> print( fitted( fitsur5 ) )
            eq1       eq2
 [1,]  97.48248  98.16306
 [2,]  99.73195  99.61555
 [3,]  99.66811  99.76162
 [4,]  99.86142 100.09344
 [5,] 102.20714 101.94440
 [6,] 102.03012 101.98852
 [7,] 102.46699 102.06678
 [8,] 102.94438 104.18681
 [9,] 101.59056 102.42786
[10,] 100.51995  99.72270
[11,]  95.46530  95.89996
[12,]  94.45766  94.60230
[13,]  95.83911  96.37056
[14,]  98.97251  98.22784
[15,] 104.09792 102.61831
[16,] 103.82299 104.30896
[17,] 104.30800 103.28488
[18,] 102.03603 103.28342
[19,] 103.61597 103.25356
[20,] 106.84541 106.14347
> print( fitted( fitsur5$eq[[ 2 ]] ) )
 [1]  98.16306  99.61555  99.76162 100.09344 101.94440 101.98852 102.06678
 [8] 104.18681 102.42786  99.72270  95.89996  94.60230  96.37056  98.22784
[15] 102.61831 104.30896 103.28488 103.28342 103.25356 106.14347
> 
> print( fitted( fitsuri1r3 ) )
            eq1       eq2
 [1,]  97.68981 100.19968
 [2,]  99.94844 105.65697
 [3,]  99.85911 104.26398
 [4,] 100.07898 104.93581
 [5,] 102.06079  99.21405
 [6,] 101.94515 100.10923
 [7,] 102.41352 102.33216
 [8,] 102.99351 102.61002
 [9,] 101.42499  94.89785
[10,] 100.23241  92.80994
[11,]  95.53408  92.09503
[12,]  94.78557  98.34149
[13,]  96.23199 101.57326
[14,]  99.03892  99.80990
[15,] 103.74132  97.45777
[16,] 103.59945  96.71687
[17,] 103.63597  87.55226
[18,] 102.11116 100.55529
[19,] 103.66182 105.45107
[20,] 106.97702 113.79838
> print( fitted( fitsuri1r3$eq[[ 1 ]] ) )
 [1]  97.68981  99.94844  99.85911 100.07898 102.06079 101.94515 102.41352
 [8] 102.99351 101.42499 100.23241  95.53408  94.78557  96.23199  99.03892
[15] 103.74132 103.59945 103.63597 102.11116 103.66182 106.97702
> 
> print( fitted( fitsuri2 ) )
            eq1       eq2
 [1,]  97.35091  93.36816
 [2,]  99.24572  96.67679
 [3,]  99.26837  96.73373
 [4,]  99.35317  97.73784
 [5,] 102.46020  96.07146
 [6,] 102.12299  97.14112
 [7,] 102.40098  98.83575
 [8,] 102.49826  99.78310
 [9,] 101.99143  96.83833
[10,] 101.44578  96.36773
[11,]  96.04646  96.25883
[12,]  94.40045  99.60485
[13,]  95.38434 101.89561
[14,]  99.05118 102.03803
[15,] 104.71301 102.16068
[16,] 104.07502 102.59137
[17,] 105.84788  99.12626
[18,] 101.64313 105.51407
[19,] 103.08214 108.45198
[20,] 105.58258 113.18530
> print( fitted( fitsuri2$eq[[ 2 ]] ) )
 [1]  93.36816  96.67679  96.73373  97.73784  96.07146  97.14112  98.83575
 [8]  99.78310  96.83833  96.36773  96.25883  99.60485 101.89561 102.03803
[15] 102.16068 102.59137  99.12626 105.51407 108.45198 113.18530
> 
> print( fitted( fitsuri3e ) )
            eq1       eq2
 [1,]  97.35227  93.39107
 [2,]  99.22821  96.68196
 [3,]  99.25451  96.74030
 [4,]  99.33451  97.74013
 [5,] 102.46794  96.08641
 [6,] 102.12454  97.15126
 [7,] 102.39520  98.83740
 [8,] 102.47607  99.78123
 [9,] 102.00639  96.85554
[10,] 101.48423  96.38878
[11,]  96.08082  96.28064
[12,]  94.41078  99.60759
[13,]  95.37577 101.88673
[14,]  99.05818 102.03093
[15,] 104.73177 102.15633
[16,] 104.07953 102.58644
[17,] 105.90389  99.14402
[18,] 101.62489 105.49429
[19,] 103.05506 108.41630
[20,] 105.51945 113.12367
> print( fitted( fitsuri3e$eq[[ 1 ]] ) )
 [1]  97.35227  99.22821  99.25451  99.33451 102.46794 102.12454 102.39520
 [8] 102.47607 102.00639 101.48423  96.08082  94.41078  95.37577  99.05818
[15] 104.73177 104.07953 105.90389 101.62489 103.05506 105.51945
> 
> print( fitted( fitsuri4 ) )
            eq1       eq2
 [1,]  97.58308  98.24526
 [2,]  99.95282  99.88448
 [3,]  99.85326  99.97894
 [4,] 100.08990 100.36778
 [5,] 102.08294 101.75018
 [6,] 101.97596 101.88658
 [7,] 102.47423 102.06521
 [8,] 103.10599 104.32973
 [9,] 101.41202 102.13908
[10,] 100.13361  99.23051
[11,]  95.29121  95.68286
[12,]  94.56667  94.79303
[13,]  96.09795  96.74525
[14,]  98.96461  98.27764
[15,] 103.79581 102.27108
[16,] 103.67795 104.10145
[17,] 103.61224 102.39319
[18,] 102.18710 103.46845
[19,] 103.80580 103.55214
[20,] 107.30084 106.80117
> print( fitted( fitsuri4$eq[[ 2 ]] ) )
 [1]  98.24526  99.88448  99.97894 100.36778 101.75018 101.88658 102.06521
 [8] 104.32973 102.13908  99.23051  95.68286  94.79303  96.74525  98.27764
[15] 102.27108 104.10145 102.39319 103.46845 103.55214 106.80117
> 
> print( fitted( fitsuri5r2 ) )
            eq1       eq2
 [1,]  97.83047  98.45809
 [2,] 100.64318 100.70216
 [3,] 100.42613 100.64203
 [4,] 100.80798 101.20197
 [5,] 101.70992 101.30026
 [6,] 101.82633 101.69612
 [7,] 102.53421 102.15945
 [8,] 103.67852 104.93910
 [9,] 100.84811 101.39156
[10,]  98.86986  97.74386
[11,]  94.59944  94.79519
[12,]  94.77107  95.01703
[13,]  96.82118  97.58181
[14,]  98.89422  98.24894
[15,] 102.88880 101.29338
[16,] 103.27477 103.60359
[17,] 101.43140  99.83964
[18,] 102.70430 104.03975
[19,] 104.48562 104.44111
[20,] 108.91847 108.86897
> print( fitted( fitsuri5r2$eq[[ 1 ]] ) )
 [1]  97.83047 100.64318 100.42613 100.80798 101.70992 101.82633 102.53421
 [8] 103.67852 100.84811  98.86986  94.59944  94.77107  96.82118  98.89422
[15] 102.88880 103.27477 101.43140 102.70430 104.48562 108.91847
> 
> 
> ## *********** predicted values *************
> predictData <- Kmenta
> predictData$price <- Kmenta$price * 0.9
> predictData$income <- Kmenta$income * 1.1
> 
> print( predict( fitsur1e2, se.fit = TRUE, interval = "prediction" ) )
    eq1.pred eq1.se.fit   eq1.lwr   eq1.upr  eq2.pred eq2.se.fit  eq2.lwr
1   97.86993  0.6065642  93.65231 102.08754  98.06675  0.7796843 92.61116
2   99.78491  0.5691035  95.58897 103.98086  99.19325  0.7933149 93.72953
3   99.74431  0.5365027  95.56617 103.92244  99.40651  0.7284511 93.98031
4   99.89485  0.5751120  95.69551 104.09418  99.68673  0.7550714 94.24549
5  102.09509  0.4930722  97.93917 106.25102 101.70434  0.6524107 96.31834
6  101.91058  0.4576463  97.77146 106.04970 101.70962  0.6049095 96.34662
7  102.26632  0.4748795  98.11917 106.41346 101.73719  0.5923362 96.38000
8  102.61793  0.5928897  98.40837 106.82749 103.46834  0.8351629 97.97887
9  101.57929  0.5229385  97.40828 105.75030 102.37733  0.7172604 96.95731
10 100.73188  0.7877655  96.39206 105.07171 100.28755  0.9795979 94.70013
11  96.22362  0.8977644  91.79626 100.65099  96.84233  1.0812621 91.17783
12  95.22252  0.8979440  90.79501  99.65003  95.43816  1.1591557 89.71026
13  96.36625  0.8160407  92.00485 100.72764  96.83619  1.0193827 91.21939
14  99.21841  0.4951710  95.06145 103.37537  98.73829  0.7095672 93.32246
15 103.82338  0.7237624  99.52994 108.11683 102.86076  0.8164131 97.38298
16 103.51628  0.5863922  99.31049 107.72207 104.22984  0.8304227 98.74335
17 104.17440  1.2400107  99.41730 108.93150 103.97780  1.5396564 97.89015
18 101.82846  0.5334141  97.65197 106.00496 103.11583  0.7703822 97.66572
19 103.19292  0.6663832  98.93811 107.44774 103.04016  0.8615643 97.53382
20 105.90266  1.2402140 101.14534 110.65998 105.24703  1.5165512 99.18344
    eq2.upr
1  103.5223
2  104.6570
3  104.8327
4  105.1280
5  107.0903
6  107.0726
7  107.0944
8  108.9578
9  107.7974
10 105.8750
11 102.5068
12 101.1661
13 102.4530
14 104.1541
15 108.3385
16 109.7163
17 110.0654
18 108.5659
19 108.5465
20 111.3106
> print( predict( fitsur1e2$eq[[ 2 ]] ) )
        1         2         3         4         5         6         7         8 
 98.06675  99.19325  99.40651  99.68673 101.70434 101.70962 101.73719 103.46834 
        9        10        11        12        13        14        15        16 
102.37733 100.28755  96.84233  95.43816  96.83619  98.73829 102.86076 104.22984 
       17        18        19        20 
103.97780 103.11583 103.04016 105.24703 
> 
> print( predict( fitsur2e, se.pred = TRUE, interval = "confidence",
+    level = 0.999, data = predictData ) )
   eq1.pred eq1.se.pred   eq1.lwr  eq1.upr  eq2.pred eq2.se.pred   eq2.lwr
1  102.8209    2.086502  99.75583 105.8860  97.35220    2.542527  93.63003
2  104.9379    2.075308 101.97292 107.9028  98.28274    2.447579  95.50575
3  104.8530    2.085227 101.79919 107.9069  98.44672    2.458809  95.54396
4  105.0602    2.076248 102.08677 108.0337  98.65934    2.438938  95.98274
5  106.9012    2.288090 102.33739 111.4650 100.41165    2.578753  96.37929
6  106.7956    2.247741 102.49957 111.0916 100.38458    2.536262  96.71825
7  107.2359    2.235241 103.02528 111.4464 100.37605    2.494862  97.09862
8  107.7839    2.200424 103.81822 111.7496 101.83074    2.436061  99.18832
9  106.3046    2.300258 101.66212 110.9470 100.90324    2.627796  96.47939
10 105.1816    2.414461  99.83997 110.5233  99.09676    2.816447  93.36208
11 100.7947    2.252167  96.46876 105.1206  96.08336    2.818765  90.33394
12 100.1048    2.093305  96.98011 103.2294  94.81644    2.720314  89.71883
13 101.4631    2.017614  99.06947 103.8567  95.98101    2.580772  91.93194
14 104.0789    2.154516 100.45474 107.7031  97.62193    2.600240  93.41447
15 108.4667    2.451589 102.91011 114.0233 101.18073    2.671552  96.42923
16 108.3396    2.355623 103.35022 113.3291 102.32406    2.579005  98.28962
17 108.3540    2.735797 101.28361 115.4243 102.13995    3.045091  95.05035
18 106.9582    2.167477 103.23521 110.6813 101.28431    2.437084  98.62969
19 108.4100    2.223101 104.28362 112.5364 101.18577    2.411698  98.85100
20 111.5204    2.384903 106.35382 116.6871 103.03226    2.393643 100.95230
     eq2.upr
1  101.07437
2  101.05973
3  101.34948
4  101.33594
5  104.44401
6  104.05092
7  103.65347
8  104.47317
9  105.32710
10 104.83143
11 101.83279
12  99.91404
13 100.03008
14 101.82938
15 105.93224
16 106.35850
17 109.22956
18 103.93893
19 103.52054
20 105.11223
> print( predict( fitsur2e$eq[[ 1 ]] ) )
        1         2         3         4         5         6         7         8 
 98.16035  99.91618  99.87453 100.01707 101.96906 101.81075 102.14213 102.48214 
        9        10        11        12        13        14        15        16 
101.49320 100.69563  96.62806  95.75625  96.81531  99.37103 103.51555 103.25746 
       17        18        19        20 
103.78201 101.76349 103.00829 105.50552 
> 
> print( predict( fitsur3, se.pred = TRUE, interval = "prediction",
+    level = 0.975 ) )
    eq1.pred eq1.se.pred  eq1.lwr  eq1.upr  eq2.pred eq2.se.pred  eq2.lwr
1   98.11947    2.133052 93.11734 103.1216  98.64916    2.670082 92.38766
2   99.89770    2.129027 94.90501 104.8904  99.63857    2.689736 93.33099
3   99.85619    2.120457 94.88360 104.8288  99.79512    2.677337 93.51661
4   99.99986    2.130883 95.00282 104.9969 100.02529    2.690116 93.71682
5  101.98680    2.109848 97.03909 106.9345 101.70511    2.674236 95.43387
6  101.82481    2.102319 96.89475 106.7549 101.69927    2.664168 95.45164
7  102.15961    2.105659 97.22172 107.0975 101.71408    2.662378 95.47065
8  102.50126    2.135479 97.49344 107.5091 103.22738    2.723409 96.84083
9  101.50532    2.117942 96.53862 106.4720 102.18897    2.691655 95.87689
10 100.70074    2.199993 95.54163 105.8598 100.30703    2.779109 93.78986
11  96.57113    2.227430 91.34768 101.7946  97.30357    2.797386 90.74354
12  95.68111    2.216328 90.48370 100.8785  96.10646    2.806543 89.52495
13  96.75209    2.191781 91.61224 101.8919  97.33336    2.768697 90.84061
14  99.34954    2.109627 94.40235 104.2967  98.93178    2.687681 92.62901
15 103.55888    2.168792 98.47294 108.6448 102.46540    2.707316 96.11659
16 103.29390    2.128997 98.30128 108.2865 103.66086    2.694605 97.34186
17 103.83725    2.388911 98.23512 109.4394 103.32264    2.987666 96.31640
18 101.77264    2.120896 96.79902 106.7463 102.69266    2.686750 96.39208
19 103.03428    2.155844 97.97871 108.0899 102.61883    2.713132 96.25638
20 105.56143    2.388696 99.95980 111.1631 104.57846    2.968690 97.61671
    eq2.upr
1  104.9106
2  105.9462
3  106.0736
4  106.3338
5  107.9763
6  107.9469
7  107.9575
8  109.6139
9  108.5011
10 106.8242
11 103.8636
12 102.6880
13 103.8261
14 105.2345
15 108.8142
16 109.9799
17 110.3289
18 108.9932
19 108.9813
20 111.5402
> print( predict( fitsur3$eq[[ 2 ]] ) )
        1         2         3         4         5         6         7         8 
 98.64916  99.63857  99.79512 100.02529 101.70511 101.69927 101.71408 103.22738 
        9        10        11        12        13        14        15        16 
102.18897 100.30703  97.30357  96.10646  97.33336  98.93178 102.46540 103.66086 
       17        18        19        20 
103.32264 102.69266 102.61883 104.57846 
> 
> print( predict( fitsur4r3, se.fit = TRUE, interval = "confidence",
+    level = 0.25 ) )
    eq1.pred eq1.se.fit   eq1.lwr   eq1.upr  eq2.pred eq2.se.fit   eq2.lwr
1   97.55095  0.4737708  97.39879  97.70310  98.22038  0.5708194  98.03705
2   99.90843  0.5582771  99.72914 100.08773  99.82542  0.6985615  99.60107
3   99.81502  0.5234839  99.64689  99.98314  99.93144  0.6514511  99.72222
4  100.04469  0.5668127  99.86265 100.22672 100.30795  0.7005657 100.08295
5  102.11060  0.4756939 101.95783 102.26337 101.81170  0.6200448 101.61257
6  101.99034  0.4428282 101.84812 102.13255 101.92540  0.5737393 101.74114
7  102.47942  0.4404810 102.33795 102.62088 102.07970  0.5590285 101.90016
8  103.08550  0.5316666 102.91475 103.25625 104.32487  0.6459714 104.11741
9  101.44686  0.5196829 101.27996 101.61376 102.22005  0.6924936 101.99765
10 100.20125  0.7743770  99.95256 100.44995  99.33709  0.9385592  99.03567
11  95.29995  0.6119672  95.10341  95.49649  95.69531  0.7321967  95.46016
12  94.52053  0.5245277  94.35208  94.68899  94.69931  0.6866087  94.47880
13  96.03068  0.6033512  95.83691  96.22445  96.62035  0.7909648  96.36633
14  98.95807  0.4436440  98.81559  99.10055  98.24070  0.5802077  98.05437
15 103.86315  0.6429018 103.65668 104.06962 102.35781  0.7585678 102.11419
16 103.71601  0.4938945 103.55740 103.87463 104.16673  0.6342366 103.96304
17 103.75096  1.1905521 103.36860 104.13332 102.60856  1.4562053 102.14089
18 102.16474  0.5104476 102.00081 102.32868 103.43160  0.6218415 103.23189
19 103.78302  0.5697120 103.60006 103.96599 103.48708  0.7144057 103.25764
20 107.24383  0.9727492 106.93142 107.55624 106.67254  1.1829576 106.29262
     eq2.upr
1   98.40370
2  100.04977
3  100.14066
4  100.53294
5  102.01083
6  102.10967
7  102.25924
8  104.53233
9  102.44245
10  99.63852
11  95.93046
12  94.91982
13  96.87438
14  98.42704
15 102.60143
16 104.37042
17 103.07624
18 103.63131
19 103.71652
20 107.05246
> print( predict( fitsur4r3$eq[[ 1 ]] ) )
        1         2         3         4         5         6         7         8 
 97.55095  99.90843  99.81502 100.04469 102.11060 101.99034 102.47942 103.08550 
        9        10        11        12        13        14        15        16 
101.44686 100.20125  95.29995  94.52053  96.03068  98.95807 103.86315 103.71601 
       17        18        19        20 
103.75096 102.16474 103.78302 107.24383 
> 
> print( predict( fitsur5, se.fit = TRUE, se.pred = TRUE,
+    interval = "prediction", level = 0.5, data = predictData ) )
   eq1.pred eq1.se.fit eq1.se.pred   eq1.lwr  eq1.upr  eq2.pred eq2.se.fit
1  103.1615  0.9110027    2.143328 101.70065 104.6223  95.95365  0.9156693
2  105.8564  0.7856275    2.093117 104.42980 107.2830  97.31936  0.7146319
3  105.7398  0.8241551    2.107881 104.30313 107.1764  97.48367  0.7604870
4  106.0124  0.7795949    2.090861 104.58730 107.4374  97.79191  0.7080207
5  108.2287  1.2325290    2.298490 106.66210 109.7952  99.78613  1.2131205
6  108.1154  1.1427001    2.251598 106.58074 109.6500  99.79821  1.1002909
7  108.6860  1.0761948    2.218586 107.17389 110.1981  99.84101  0.9818519
8  109.4180  0.9185636    2.146553 107.95498 110.8810 101.87962  0.8248414
9  107.4634  1.2951603    2.332674 105.87355 109.0533 100.30384  1.3394679
10 105.9938  1.5684125    2.494764 104.29343 107.6941  97.71359  1.6310828
11 100.5376  1.2924741    2.331184  98.94871 102.1264  93.84995  1.3746336
12  99.7490  0.9207918    2.147507  98.28534 101.2127  92.42642  1.0246954
13 101.4984  0.7200549    2.069398 100.08797 102.9088  94.10422  0.8305953
14 104.7128  1.0541139    2.207960 103.20794 106.2177  96.05294  1.0325512
15 110.1473  1.4853559    2.443402 108.48193 111.8126 100.52351  1.4335562
16 110.0313  1.2837966    2.326384 108.44570 111.6169 102.14078  1.2489979
17 109.8960  2.0131407    2.795830 107.99043 111.8015 101.37994  2.1632839
18 108.3770  0.9061542    2.141272 106.91759 109.8364 100.99268  0.8089887
19 110.2130  0.9114301    2.143510 108.75208 111.6740 100.92422  0.7116083
20 114.1974  0.8976719    2.137696 112.74046 115.6544 103.64408  0.5719738
   eq2.se.pred   eq2.lwr   eq2.upr
1     2.679649  94.12730  97.78001
2     2.617779  95.53517  99.10354
3     2.630667  95.69071  99.27664
4     2.615982  96.00895  99.57487
5     2.795305  97.88095 101.69131
6     2.748219  97.92512 101.67129
7     2.702980  97.99875 101.68326
8     2.649987 100.07349 103.68576
9     2.852410  98.35974 102.24794
10    3.000416  95.66862  99.75857
11    2.869091  91.89448  95.80542
12    2.718836  90.57336  94.27948
13    2.651784  92.29686  95.91158
14    2.721806  94.19786  97.90803
15    2.897784  98.54849 102.49854
16    2.811061 100.22486 104.05670
17    3.319919  99.11720 103.64267
18    2.645096  99.18988 102.79548
19    2.616955  99.14060 102.70784
20    2.582484 101.88396 105.40421
> print( predict( fitsur5$eq[[ 2 ]] ) )
        1         2         3         4         5         6         7         8 
 98.16306  99.61555  99.76162 100.09344 101.94440 101.98852 102.06678 104.18681 
        9        10        11        12        13        14        15        16 
102.42786  99.72270  95.89996  94.60230  96.37056  98.22784 102.61831 104.30896 
       17        18        19        20 
103.28488 103.28342 103.25356 106.14347 
> 
> print( predict( fitsuri1r3, se.fit = TRUE, se.pred = TRUE,
+    interval = "confidence", level = 0.99 ) )
    eq1.pred eq1.se.fit eq1.se.pred   eq1.lwr   eq1.upr  eq2.pred eq2.se.fit
1   97.68981  0.6528823    2.087387  95.79761  99.58201 100.19968  0.5990868
2   99.94844  0.5780071    2.065193  98.27324 101.62364 105.65697  0.6041400
3   99.85911  0.5480128    2.057000  98.27084 101.44738 104.26398  0.5393621
4  100.07898  0.5826211    2.066489  98.39041 101.76755 104.93581  0.5360938
5  102.06079  0.5085694    2.046845 100.58683 103.53474  99.21405  0.4855356
6  101.94515  0.4740560    2.038543 100.57122 103.31907 100.10923  0.4475653
7  102.41352  0.4963924    2.043853 100.97486 103.85218 102.33216  0.4441414
8  102.99351  0.6149083    2.075823 101.21136 104.77565 102.61002  0.5217608
9  101.42499  0.5311104    2.052561  99.88571 102.96427  94.89785  0.5424239
10 100.23241  0.7850496    2.132424  97.95715 102.50766  92.80994  0.5787364
11  95.53408  0.9711055    2.207708  92.71959  98.34856  92.09503  0.8120512
12  94.78557  0.9957906    2.218677  91.89954  97.67160  98.34149  0.8646445
13  96.23199  0.8804508    2.169360  93.68024  98.78374 101.57326  0.7469359
14  99.03892  0.5210242    2.049975  97.52887 100.54897  99.80990  0.5073065
15 103.74132  0.7520437    2.120495 101.56173 105.92092  97.45777  0.5093932
16 103.59945  0.6224171    2.078060 101.79554 105.40336  96.71687  0.5955981
17 103.63597  1.2408917    2.338962 100.03958 107.23236  87.55226  0.9753798
18 102.11116  0.5463766    2.056564 100.52763 103.69468 100.55529  0.5002994
19 103.66182  0.6956788    2.101166 101.64559 105.67806 105.45107  0.6493596
20 106.97702  1.2989894    2.370296 103.21225 110.74179 113.79838  1.1241221
   eq2.se.pred   eq2.lwr   eq2.upr
1     1.722110  98.44988 101.94948
2     1.723874 103.89241 107.42153
3     1.702254 102.68862 105.83934
4     1.701221 103.37000 106.50162
5     1.685972  97.79590 100.63219
6     1.675432  98.80199 101.41647
7     1.674520 101.03492 103.62940
8     1.696759 101.08607 104.13397
9     1.703227  93.31354  96.48215
10    1.715136  91.11958  94.50030
11    1.807259  89.72321  94.46686
12    1.831493  95.81605 100.86693
13    1.778952  99.39163 103.75490
14    1.692370  98.32817 101.29163
15    1.692997  95.96994  98.94559
16    1.720899  94.97725  98.45648
17    1.886299  84.70339  90.40113
18    1.690283  99.09402 102.01655
19    1.740237 103.55443 107.34771
20    1.967335 110.51506 117.08169
> print( predict( fitsuri1r3$eq[[ 1 ]] ) )
        1         2         3         4         5         6         7         8 
 97.68981  99.94844  99.85911 100.07898 102.06079 101.94515 102.41352 102.99351 
        9        10        11        12        13        14        15        16 
101.42499 100.23241  95.53408  94.78557  96.23199  99.03892 103.74132 103.59945 
       17        18        19        20 
103.63597 102.11116 103.66182 106.97702 
> 
> print( predict( fitsuri2, se.fit = TRUE, interval = "prediction",
+    level = 0.9, data = predictData ) )
   eq1.pred eq1.se.fit   eq1.lwr  eq1.upr  eq2.pred eq2.se.fit   eq2.lwr
1  104.2639  0.9600976 100.53450 107.9933  96.09931   1.371751  86.18146
2  106.6591  1.0111280 102.89135 110.4268  99.72668   1.690549  89.66909
3  106.6186  1.0324135 102.83439 110.4028  99.75549   1.612504  89.73461
4  106.7964  1.0189799 103.02258 110.5702 100.80648   1.763990  90.71289
5  109.7009  1.5471986 105.44450 113.9574  99.19010   2.002509  88.97006
6  109.4448  1.4676636 105.26966 113.6199 100.28163   1.944290  90.09378
7  109.8776  1.4645454 105.70560 114.0496 102.06063   2.124786  91.77024
8  110.2763  1.4227702 106.14581 114.4067 103.15173   2.601586  92.55288
9  109.0626  1.5429445 104.81059 113.3146  99.85697   1.799603  89.74543
10 108.0507  1.6994378 103.63140 112.4700  99.14575   1.348976  89.23683
11 102.2580  1.2986413  98.24616 106.2698  98.60561   2.251152  88.23869
12 100.8983  0.9386920  97.18453 104.6121 102.00789   3.098855  91.03335
13 102.3046  0.7306356  98.72702 105.8822 104.53926   3.007551  93.63760
14 106.0106  1.1638967 102.11878 109.9023 104.86918   2.265104  94.49357
15 111.9516  1.8956735 107.30971 116.5936 105.38244   2.201574  95.04600
16 111.5127  1.7325202 107.05683 115.9686 105.87562   2.399911  95.41372
17 112.5199  2.3164886 107.36084 117.6789 102.13864   2.020826  91.90830
18 109.2767  1.3161922 105.24854 113.3048 108.77645   2.749305  98.07152
19 110.9979  1.4969140 106.79319 115.2026 111.91123   3.729454 100.38943
20 114.3575  1.9179678 109.68945 119.0255 117.15703   5.621925 103.61626
    eq2.upr
1  106.0172
2  109.7843
3  109.7764
4  110.9001
5  109.4101
6  110.4695
7  112.3510
8  113.7506
9  109.9685
10 109.0547
11 108.9725
12 112.9824
13 115.4409
14 115.2448
15 115.7189
16 116.3375
17 112.3690
18 119.4814
19 123.4330
20 130.6978
> print( predict( fitsuri2$eq[[ 2 ]] ) )
        1         2         3         4         5         6         7         8 
 93.36816  96.67679  96.73373  97.73784  96.07146  97.14112  98.83575  99.78310 
        9        10        11        12        13        14        15        16 
 96.83833  96.36773  96.25883  99.60485 101.89561 102.03803 102.16068 102.59137 
       17        18        19        20 
 99.12626 105.51407 108.45198 113.18530 
> 
> print( predict( fitsuri3e, interval = "prediction", level = 0.925 ) )
    eq1.pred   eq1.lwr   eq1.upr  eq2.pred   eq2.lwr  eq2.upr
1   97.35227  93.79695 100.90758  93.39107  83.50846 103.2737
2   99.22821  95.70993 102.74649  96.68196  87.05687 106.3070
3   99.25451  95.75098 102.75804  96.74030  87.11268 106.3679
4   99.33451  95.81409 102.85492  97.74013  88.12883 107.3514
5  102.46794  98.98300 105.95287  96.08641  86.18847 105.9843
6  102.12454  98.65516 105.59393  97.15126  87.36574 106.9368
7  102.39520  98.91758 105.87282  98.83740  89.12836 108.5464
8  102.47607  98.94605 106.00609  99.78123  89.90946 109.6530
9  102.00639  98.51148 105.50131  96.85554  86.96973 106.7413
10 101.48423  97.85168 105.11678  96.38878  86.53884 106.2387
11  96.08082  92.33160  99.83004  96.28064  85.86109 106.7002
12  94.41078  90.62921  98.19236  99.60759  88.82601 110.3892
13  95.37577  91.67055  99.08099 101.88673  91.39483 112.3786
14  99.05818  95.57018 102.54617 102.03093  92.12217 111.9397
15 104.73177 101.11154 108.35200 102.15633  92.47110 111.8416
16 104.07953 100.53890 107.62016 102.58644  92.82179 112.3511
17 105.90389 101.88855 109.91922  99.14402  89.11109 109.1769
18 101.62489  98.12629 105.12350 105.49429  95.69712 115.2915
19 103.05506  99.48324 106.62687 108.41630  98.16892 118.6637
20 105.51945 101.50168 109.53723 113.12367 101.57205 124.6753
> print( predict( fitsuri3e$eq[[ 1 ]] ) )
        1         2         3         4         5         6         7         8 
 97.35227  99.22821  99.25451  99.33451 102.46794 102.12454 102.39520 102.47607 
        9        10        11        12        13        14        15        16 
102.00639 101.48423  96.08082  94.41078  95.37577  99.05818 104.73177 104.07953 
       17        18        19        20 
105.90389 101.62489 103.05506 105.51945 
> 
> print( predict( fitsuri4, interval = "confidence", data = predictData ) )
    eq1.pred   eq1.lwr  eq1.upr  eq2.pred   eq2.lwr   eq2.upr
1  102.66571 100.79164 104.5398  95.51258  93.61864  97.40651
2  105.45182 103.82556 107.0781  97.04445  95.54460  98.54429
3  105.30458 103.59743 107.0117  97.16149  95.56654  98.75644
4  105.61363 104.00078 107.2265  97.52116  96.03032  99.01201
5  107.50986 104.95824 110.0615  99.08075  96.53722 101.62428
6  107.45841 105.09311 109.8237  99.17752  96.86654 101.48850
7  108.07980 105.85604 110.3036  99.31229  97.24494 101.37963
8  108.94303 107.06636 110.8197 101.47611  99.73048 103.22174
9  106.70105 104.02125 109.3809  99.51200  96.70557 102.31844
10 105.05727 101.83003 108.2845  96.74557  93.35907 100.13207
11  99.81517  97.21365 102.4167  93.14733  90.37809  95.91657
12  99.27837  97.43323 101.1235  92.10181  90.14418  94.05944
13 101.14974  99.67611 102.6234  93.94216  92.34747  95.53684
14 104.11406 101.93847 106.2897  95.58764  93.50090  97.67439
15 109.26282 106.18861 112.3370  99.68015  96.68513 102.67517
16 109.28485 106.63092 111.9388 101.41976  98.79866 104.04086
17 108.66844 104.51106 112.8258 100.03709  95.52519 104.54899
18 107.89825 106.03464 109.7619 100.63518  98.93402 102.33634
19 109.75862 107.91274 111.6045 100.67112  99.17512 102.16711
20 113.95464 112.32775 115.5815 103.70984 102.49026 104.92942
> print( predict( fitsuri4$eq[[ 2 ]] ) )
        1         2         3         4         5         6         7         8 
 98.24526  99.88448  99.97894 100.36778 101.75018 101.88658 102.06521 104.32973 
        9        10        11        12        13        14        15        16 
102.13908  99.23051  95.68286  94.79303  96.74525  98.27764 102.27108 104.10145 
       17        18        19        20 
102.39319 103.46845 103.55214 106.80117 
> 
> print( predict( fitsuri5r2 ) )
    eq1.pred  eq2.pred
1   97.83047  98.45809
2  100.64318 100.70216
3  100.42613 100.64203
4  100.80798 101.20197
5  101.70992 101.30026
6  101.82633 101.69612
7  102.53421 102.15945
8  103.67852 104.93910
9  100.84811 101.39156
10  98.86986  97.74386
11  94.59944  94.79519
12  94.77107  95.01703
13  96.82118  97.58181
14  98.89422  98.24894
15 102.88880 101.29338
16 103.27477 103.60359
17 101.43140  99.83964
18 102.70430 104.03975
19 104.48562 104.44111
20 108.91847 108.86897
> print( predict( fitsuri5r2$eq[[ 1 ]] ) )
        1         2         3         4         5         6         7         8 
 97.83047 100.64318 100.42613 100.80798 101.70992 101.82633 102.53421 103.67852 
        9        10        11        12        13        14        15        16 
100.84811  98.86986  94.59944  94.77107  96.82118  98.89422 102.88880 103.27477 
       17        18        19        20 
101.43140 102.70430 104.48562 108.91847 
> 
> # predict just one observation
> smallData <- data.frame( price = 130, income = 150, farmPrice = 120,
+    trend = 25, consump = 1 ) ### consump should be removed later!!!!
> 
> print( predict( fitsur1e2, data = smallData ) )
  eq1.pred eq2.pred
1 108.1584 114.8569
> print( predict( fitsur1e2$eq[[ 1 ]], data = smallData ) )
[1] 108.1584
> 
> print( predict( fitsur2e, se.fit = TRUE, level = 0.9,
+    data = smallData ) )
  eq1.pred eq1.se.fit eq2.pred eq2.se.fit
1 107.6441   2.211370 112.8674   3.001513
> print( predict( fitsur2e$eq[[ 1 ]], se.pred = TRUE, level = 0.99,
+    data = smallData ) )
[1] 107.6441
> 
> print( predict( fitsur3, interval = "prediction", level = 0.975,
+    data = smallData ) )
  eq1.pred  eq1.lwr  eq1.upr eq2.pred  eq2.lwr  eq2.upr
1 107.7165 100.3179 115.1151 112.9588 103.0460 122.8715
> print( predict( fitsur3$eq[[ 1 ]], interval = "confidence", level = 0.8,
+    data = smallData ) )
[1] 107.7165
> 
> print( predict( fitsur4r3, se.fit = TRUE, interval = "confidence",
+    level = 0.999, data = smallData ) )
  eq1.pred eq1.se.fit  eq1.lwr  eq1.upr eq2.pred eq2.se.fit  eq2.lwr  eq2.upr
1 110.7122   2.057118 103.3248 118.0996 118.7438   2.224746 110.7544 126.7332
> print( predict( fitsur4r3$eq[[ 2 ]], se.pred = TRUE, interval = "prediction",
+    level = 0.75, data = smallData ) )
[1] 118.7438
> 
> print( predict( fitsur5, se.fit = TRUE, interval = "prediction",
+    data = smallData ) )
  eq1.pred eq1.se.fit  eq1.lwr  eq1.upr eq2.pred eq2.se.fit  eq2.lwr  eq2.upr
1 109.7521   2.151771 103.8703 115.6338 117.7047   2.291379 110.7927 124.6168
> print( predict( fitsur5$eq[[ 1 ]], se.pred = TRUE, interval = "confidence",
+    data = smallData ) )
[1] 109.7521
> 
> print( predict( fitsuri5r2, se.fit = TRUE, se.pred = TRUE,
+    interval = "prediction", level = 0.5, data = smallData ) )
  eq1.pred eq1.se.fit eq1.se.pred  eq1.lwr  eq1.upr eq2.pred eq2.se.fit
1 114.7377   1.978581    3.089940 112.6317 116.8437 123.1497   2.170672
  eq2.se.pred  eq2.lwr  eq2.upr
1    3.817119 120.5481 125.7513
> print( predict( fitsuri5r2$eq[[ 1 ]], se.fit = TRUE, se.pred = TRUE,
+    interval = "confidence", level = 0.25, data = smallData ) )
[1] 114.7377
> 
> 
> ## ************ correlation of predicted values ***************
> print( correlation.systemfit( fitsur1e2, 2, 1 ) )
           [,1]
 [1,] 0.8485660
 [2,] 0.8560380
 [3,] 0.8638628
 [4,] 0.8822314
 [5,] 0.8436685
 [6,] 0.8607040
 [7,] 0.8745412
 [8,] 0.8766342
 [9,] 0.8838862
[10,] 0.9182657
[11,] 0.9027022
[12,] 0.8836522
[13,] 0.8795027
[14,] 0.8625379
[15,] 0.8962599
[16,] 0.8974128
[17,] 0.9137858
[18,] 0.8390748
[19,] 0.8672603
[20,] 0.9015226
> 
> print( correlation.systemfit( fitsur2e, 1, 2 ) )
           [,1]
 [1,] 0.9422013
 [2,] 0.9437103
 [3,] 0.9417272
 [4,] 0.9412731
 [5,] 0.9019717
 [6,] 0.9091425
 [7,] 0.9173484
 [8,] 0.9027934
 [9,] 0.9097189
[10,] 0.9406887
[11,] 0.9232462
[12,] 0.9019529
[13,] 0.9006397
[14,] 0.8928504
[15,] 0.9245092
[16,] 0.9522689
[17,] 0.9437752
[18,] 0.9345497
[19,] 0.9303536
[20,] 0.9380609
> 
> print( correlation.systemfit( fitsur3, 2, 1 ) )
           [,1]
 [1,] 0.9387029
 [2,] 0.9429607
 [3,] 0.9406041
 [4,] 0.9403742
 [5,] 0.9021545
 [6,] 0.9091079
 [7,] 0.9177459
 [8,] 0.9026245
 [9,] 0.9097962
[10,] 0.9407663
[11,] 0.9224736
[12,] 0.9001578
[13,] 0.8993669
[14,] 0.8923510
[15,] 0.9228085
[16,] 0.9515569
[17,] 0.9430347
[18,] 0.9359979
[19,] 0.9285058
[20,] 0.9368339
> 
> print( correlation.systemfit( fitsur4r3, 1, 2 ) )
           [,1]
 [1,] 0.9630198
 [2,] 0.9711530
 [3,] 0.9714678
 [4,] 0.9730602
 [5,] 0.9398075
 [6,] 0.9435238
 [7,] 0.9467698
 [8,] 0.9422418
 [9,] 0.9469796
[10,] 0.9729023
[11,] 0.9095400
[12,] 0.8582610
[13,] 0.9143965
[14,] 0.9233580
[15,] 0.9773693
[16,] 0.9635882
[17,] 0.9777182
[18,] 0.9686581
[19,] 0.9455016
[20,] 0.9405856
> 
> print( correlation.systemfit( fitsur5, 2, 1 ) )
           [,1]
 [1,] 0.9377734
 [2,] 0.9476607
 [3,] 0.9479962
 [4,] 0.9511636
 [5,] 0.8919430
 [6,] 0.8974013
 [7,] 0.9026566
 [8,] 0.9003241
 [9,] 0.9065282
[10,] 0.9521993
[11,] 0.8534480
[12,] 0.7839904
[13,] 0.8579817
[14,] 0.8674667
[15,] 0.9609012
[16,] 0.9352173
[17,] 0.9614592
[18,] 0.9436563
[19,] 0.9069847
[20,] 0.9039867
> 
> print( correlation.systemfit( fitsuri1r3, 1, 2 ) )
            [,1]
 [1,] -0.6618928
 [2,] -0.6556130
 [3,] -0.6637900
 [4,] -0.6891646
 [5,] -0.6285091
 [6,] -0.6638664
 [7,] -0.6958262
 [8,] -0.6752759
 [9,] -0.7223071
[10,] -0.7567863
[11,] -0.7589234
[12,] -0.7316188
[13,] -0.7095153
[14,] -0.6694892
[15,] -0.7278317
[16,] -0.7372204
[17,] -0.7410747
[18,] -0.5829414
[19,] -0.6841408
[20,] -0.7463849
> 
> print( correlation.systemfit( fitsuri2, 2, 1 ) )
           [,1]
 [1,] 0.3599829
 [2,] 0.3369542
 [3,] 0.3365327
 [4,] 0.3361309
 [5,] 0.2862848
 [6,] 0.2987122
 [7,] 0.3168647
 [8,] 0.2745544
 [9,] 0.3221139
[10,] 0.3181788
[11,] 0.3336895
[12,] 0.3337616
[13,] 0.3177466
[14,] 0.2856785
[15,] 0.3582452
[16,] 0.4319029
[17,] 0.3668372
[18,] 0.3619560
[19,] 0.3333701
[20,] 0.3352304
> 
> print( correlation.systemfit( fitsuri3e, 1, 2 ) )
           [,1]
 [1,] 0.3680804
 [2,] 0.3445909
 [3,] 0.3441238
 [4,] 0.3435988
 [5,] 0.2919484
 [6,] 0.3046339
 [7,] 0.3229123
 [8,] 0.2799944
 [9,] 0.3288034
[10,] 0.3245890
[11,] 0.3398356
[12,] 0.3404840
[13,] 0.3243782
[14,] 0.2914308
[15,] 0.3661396
[16,] 0.4409386
[17,] 0.3750968
[18,] 0.3691181
[19,] 0.3401263
[20,] 0.3416518
> 
> print( correlation.systemfit( fitsuri4, 2, 1 ) )
           [,1]
 [1,] 0.9606962
 [2,] 0.9712586
 [3,] 0.9712802
 [4,] 0.9728105
 [5,] 0.9399326
 [6,] 0.9435725
 [7,] 0.9467190
 [8,] 0.9387979
 [9,] 0.9467639
[10,] 0.9718510
[11,] 0.9035596
[12,] 0.8613357
[13,] 0.9165833
[14,] 0.9224099
[15,] 0.9763197
[16,] 0.9641158
[17,] 0.9775185
[18,] 0.9671957
[19,] 0.9416307
[20,] 0.9344923
> 
> print( correlation.systemfit( fitsuri5r2, 1, 2 ) )
           [,1]
 [1,] 0.9861686
 [2,] 0.9907457
 [3,] 0.9908554
 [4,] 0.9912041
 [5,] 0.9813227
 [6,] 0.9828856
 [7,] 0.9840524
 [8,] 0.9798257
 [9,] 0.9824484
[10,] 0.9907896
[11,] 0.9681876
[12,] 0.9474029
[13,] 0.9700484
[14,] 0.9747722
[15,] 0.9911646
[16,] 0.9885089
[17,] 0.9920856
[18,] 0.9897372
[19,] 0.9816187
[20,] 0.9781961
> 
> 
> ## *********** likelihood ratio tests *************
> # testing first restriction
> # non-iterating, methodRCov = 1
> print( lrtest.systemfit( fitsur2, fitsur1 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 1.191 
degrees of freedom: 1 
p-value: 0.2752 

> print( lrtest.systemfit( fitsur3, fitsur1 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 1.191 
degrees of freedom: 1 
p-value: 0.2752 

> # non-iterating, methodRCov = 0
> print( lrtest.systemfit( fitsur2e, fitsur1e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 0.7003 
degrees of freedom: 1 
p-value: 0.4027 

> print( lrtest.systemfit( fitsur3e, fitsur1e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 0.7003 
degrees of freedom: 1 
p-value: 0.4027 

> # iterating, methodRCov = 1
> print( lrtest.systemfit( fitsuri2, fitsuri1 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 64.31 
degrees of freedom: 1 
p-value: 1.11e-15 

> print( lrtest.systemfit( fitsuri3, fitsuri1 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 64.31 
degrees of freedom: 1 
p-value: 1.11e-15 

> # iterating, methodRCov = 0
> print( lrtest.systemfit( fitsuri2e, fitsuri1e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 64.31 
degrees of freedom: 1 
p-value: 1.11e-15 

> print( lrtest.systemfit( fitsuri3e, fitsuri1e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 64.31 
degrees of freedom: 1 
p-value: 1.11e-15 

> 
> # testing second restriction
> # non-iterating, methodRCov = 1
> print( lrtest.systemfit( fitsur4, fitsur2 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 12.66 
degrees of freedom: 1 
p-value: 0.0003727 

> print( lrtest.systemfit( fitsur4, fitsur3 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 12.66 
degrees of freedom: 1 
p-value: 0.0003727 

> print( lrtest.systemfit( fitsur5, fitsur2 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 12.66 
degrees of freedom: 1 
p-value: 0.0003727 

> print( lrtest.systemfit( fitsur5, fitsur3 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 12.66 
degrees of freedom: 1 
p-value: 0.0003727 

> # non-iterating, methodRCov = 0
> print( lrtest.systemfit( fitsur4e, fitsur2e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 13.21 
degrees of freedom: 1 
p-value: 0.0002778 

> print( lrtest.systemfit( fitsur4e, fitsur3e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 13.21 
degrees of freedom: 1 
p-value: 0.0002778 

> print( lrtest.systemfit( fitsur5e, fitsur2e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 13.21 
degrees of freedom: 1 
p-value: 0.0002778 

> print( lrtest.systemfit( fitsur5e, fitsur3e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 13.21 
degrees of freedom: 1 
p-value: 0.0002778 

> # iterating, methodRCov = 1
> print( lrtest.systemfit( fitsuri4, fitsuri2 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -82.93 
degrees of freedom: 1 
p-value:     1 

> print( lrtest.systemfit( fitsuri4, fitsuri3 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -82.93 
degrees of freedom: 1 
p-value:     1 

> print( lrtest.systemfit( fitsuri5, fitsuri2 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -82.93 
degrees of freedom: 1 
p-value:     1 

> print( lrtest.systemfit( fitsuri5, fitsuri3 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -82.93 
degrees of freedom: 1 
p-value:     1 

> # iterating, methodRCov = 0
> print( lrtest.systemfit( fitsuri4e, fitsuri2e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -82.97 
degrees of freedom: 1 
p-value:     1 

> print( lrtest.systemfit( fitsuri4e, fitsuri3e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -82.97 
degrees of freedom: 1 
p-value:     1 

> print( lrtest.systemfit( fitsuri5e, fitsuri2e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -82.97 
degrees of freedom: 1 
p-value:     1 

> print( lrtest.systemfit( fitsuri5e, fitsuri3e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -82.97 
degrees of freedom: 1 
p-value:     1 

> 
> # testing both of the restrictions
> # non-iterating, methodRCov = 1
> print( lrtest.systemfit( fitsur4, fitsur1 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 13.85 
degrees of freedom: 2 
p-value: 0.0009805 

> print( lrtest.systemfit( fitsur5, fitsur1 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 13.85 
degrees of freedom: 2 
p-value: 0.0009805 

> # non-iterating, methodRCov = 0
> print( lrtest.systemfit( fitsur4e, fitsur1e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 13.91 
degrees of freedom: 2 
p-value: 0.0009515 

> print( lrtest.systemfit( fitsur5e, fitsur1e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: 13.91 
degrees of freedom: 2 
p-value: 0.0009515 

> # iterating, methodRCov = 1
> print( lrtest.systemfit( fitsuri4, fitsuri1 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -18.63 
degrees of freedom: 2 
p-value:     1 

> print( lrtest.systemfit( fitsuri5, fitsuri1 ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -18.63 
degrees of freedom: 2 
p-value:     1 

> # iterating, methodRCov = 0
> print( lrtest.systemfit( fitsuri4e, fitsuri1e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -18.66 
degrees of freedom: 2 
p-value:     1 

> print( lrtest.systemfit( fitsuri5e, fitsuri1e ) )

Likelihood-Ratio-test for parameter restrictions in equation systems
LR-statistic: -18.66 
degrees of freedom: 2 
p-value:     1 

> 
> 
> ## ************** F tests ****************
> # testing first restriction
> print( ftest.systemfit( fitsur1, restrm ) )

F-test for linear parameter restrictions in equation systems
F-statistic:  1.24 
degrees of freedom of the numerator: 1 
degrees of freedom of the denominator: 33 
p-value: 0.2734 

> print( ftest.systemfit( fitsur1r2, restrm ) )

F-test for linear parameter restrictions in equation systems
F-statistic:  1.65 
degrees of freedom of the numerator: 1 
degrees of freedom of the denominator: 33 
p-value: 0.208 

> print( ftest.systemfit( fitsuri1e2, restrm ) )

F-test for linear parameter restrictions in equation systems
F-statistic: 139.7 
degrees of freedom of the numerator: 1 
degrees of freedom of the denominator: 33 
p-value: 2.107e-13 

> print( ftest.systemfit( fitsuri1r3, restrm ) )

F-test for linear parameter restrictions in equation systems
F-statistic: 140.8 
degrees of freedom of the numerator: 1 
degrees of freedom of the denominator: 33 
p-value: 1.888e-13 

> 
> # testing second restriction
> restrOnly2m <- matrix(0,1,7)
> restrOnly2q <- 0.5
> restrOnly2m[1,2] <- -1
> restrOnly2m[1,5] <-  1
> # first restriction not imposed 
> print( ftest.systemfit( fitsur1e2, restrOnly2m, restrOnly2q ) )

F-test for linear parameter restrictions in equation systems
F-statistic: 2.359 
degrees of freedom of the numerator: 1 
degrees of freedom of the denominator: 33 
p-value: 0.1341 

> print( ftest.systemfit( fitsuri1, restrOnly2m, restrOnly2q ) )

F-test for linear parameter restrictions in equation systems
F-statistic: 12.21 
degrees of freedom of the numerator: 1 
degrees of freedom of the denominator: 33 
p-value: 0.001379 

> # first restriction imposed
> print( ftest.systemfit( fitsur2, restrOnly2m, restrOnly2q ) )

F-test for linear parameter restrictions in equation systems
F-statistic: 5.501 
degrees of freedom of the numerator: 1 
degrees of freedom of the denominator: 34 
p-value: 0.02498 

> print( ftest.systemfit( fitsur3, restrOnly2m, restrOnly2q ) )

F-test for linear parameter restrictions in equation systems
F-statistic: 5.501 
degrees of freedom of the numerator: 1 
degrees of freedom of the denominator: 34 
p-value: 0.02498 

> print( ftest.systemfit( fitsuri2e, restrOnly2m, restrOnly2q ) )

F-test for linear parameter restrictions in equation systems
F-statistic:  2.35 
degrees of freedom of the numerator: 1 
degrees of freedom of the denominator: 34 
p-value: 0.1346 

> print( ftest.systemfit( fitsuri3e, restrOnly2m, restrOnly2q ) )

F-test for linear parameter restrictions in equation systems
F-statistic:  2.35 
degrees of freedom of the numerator: 1 
degrees of freedom of the denominator: 34 
p-value: 0.1346 

> 
> # testing both of the restrictions
> print( ftest.systemfit( fitsur1r3, restr2m, restr2q ) )

F-test for linear parameter restrictions in equation systems
F-statistic: 2.602 
degrees of freedom of the numerator: 2 
degrees of freedom of the denominator: 33 
p-value: 0.08929 

> print( ftest.systemfit( fitsuri1e2, restr2m, restr2q ) )

F-test for linear parameter restrictions in equation systems
F-statistic: 89.08 
degrees of freedom of the numerator: 2 
degrees of freedom of the denominator: 33 
p-value: 4.996e-14 

> 
> 
> ## ************** Wald tests ****************
> # testing first restriction
> print( waldtest.systemfit( fitsur1, restrm ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 0.8106 
degrees of freedom: 1 
p-value: 0.3679 

> print( waldtest.systemfit( fitsur1r2, restrm ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 1.116 
degrees of freedom: 1 
p-value: 0.2908 

> print( waldtest.systemfit( fitsuri1e2, restrm ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 147.4 
degrees of freedom: 1 
p-value:     0 

> print( waldtest.systemfit( fitsuri1r3, restrm ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 147.3 
degrees of freedom: 1 
p-value:     0 

> 
> # testing second restriction
> # first restriction not imposed
> print( waldtest.systemfit( fitsur1e2, restrOnly2m, restrOnly2q ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 1.596 
degrees of freedom: 1 
p-value: 0.2065 

> print( waldtest.systemfit( fitsuri1, restrOnly2m, restrOnly2q ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 12.21 
degrees of freedom: 1 
p-value: 0.0004745 

> # first restriction imposed
> print( waldtest.systemfit( fitsur2, restrOnly2m, restrOnly2q ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 3.946 
degrees of freedom: 1 
p-value: 0.04699 

> print( waldtest.systemfit( fitsur3, restrOnly2m, restrOnly2q ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 3.946 
degrees of freedom: 1 
p-value: 0.04699 

> print( waldtest.systemfit( fitsuri2e, restrOnly2m, restrOnly2q ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 2.764 
degrees of freedom: 1 
p-value: 0.0964 

> print( waldtest.systemfit( fitsuri3e, restrOnly2m, restrOnly2q ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 2.764 
degrees of freedom: 1 
p-value: 0.0964 

> 
> # testing both of the restrictions
> print( waldtest.systemfit( fitsur1r3, restr2m, restr2q ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 3.506 
degrees of freedom: 2 
p-value: 0.1733 

> print( waldtest.systemfit( fitsuri1e2, restr2m, restr2q ) )

Wald-test for linear parameter restrictions in equation systems
Wald-statistic: 188.1 
degrees of freedom: 2 
p-value:     0 

> 
