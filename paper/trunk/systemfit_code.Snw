%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Source code}\label{sec:code}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The source code of the \pkg{systemfit} package is publicly available
for download from the comprehensive \proglang{R} archive network (CRAN,
\url{http://cran.r-project.org/src/contrib/Descriptions/systemfit.html}).
The basic functionality of this package is provided by the
function \code{systemfit}.
Moreover, this package provides
tools for statistical tests,
functions (methods) to show, extract or calculate results,
some convenience functions,
and internal helper functions.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection[Basic function systemfit]{The basic function \code{systemfit}}

The \code{systemfit} function estimates systems of linear equations
by different estimation methods.
Where possible,
the user interface and the returned object of this function
follow the function \code{lm}
--- the basic tool for linear regressions in \proglang{R} ---
to make the usage of \code{systemfit} as easy as possible
for \proglang{R} users.

The econometric estimation is done by applying
the formulas in Sections~\ref{sec:Estimation-ols-wls-sur}
and~\ref{sec:Estimation-2sls-w2sls-3sls}
or --- if the coefficients are estimate under linear restrictions ---
by the formulas in Section~\ref{sec:Restrictions}.
If the restrictions on the coefficients are specified symbolically,
function \code{makeHypothesis} of the \pkg{car} package \citep{r-car-1.2-1, fox02a}
is used to create the restriction matrix.

The \code{systemfit} function returns a list of class \code{systemfit}
that contains the results that belong to the entire system of equations.
One special element of this list is called \code{eq},
which is a list that contains one object for each estimated equation.
These objects are lists of class \code{systemfit.equation}
and contain the results that belong only to the regarding equation.
A complete description is available in the documentation of this function
that is included in the package.
A comparison of the elements returned by \code{lm} and by \code{systemfit}
is available in appendix~\ref{sec:returned-object}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Statistical tests}

The functions \codeDD{linear}{hypothesis}{systemfit},
\codeD{lrtest}{systemfit}, and \codeD{hausman}{systemfit}
apply the statistical tests described in
Sections~\ref{sec:testingRestrictions} and~\ref{sec:hausman}.

The method \code{linear.hypothesis.systemfit}
can be used to test linear restrictions on the estimated coefficients
by \citeauthor{theil71}'s $F$ test or by usual Wald tests.
Internally, \citeauthor{theil71}'s $F$ statistic is computed
by the hidden function \code{.ftest.systemfit}
and the Wald tests are computed by
\code{linear.hypothesis.default} of the \pkg{car} package
\citep{r-car-1.2-1, fox02a}.
The method \code{lrtest.systemfit} is a wrapper function
to \code{lrtest.default} of the \pkg{lmtest} package
\citep{r-lmtest},
which computes the likelihood-ratio (LR) test statistic.
All these functions return an object of class \code{anova}
that contains --- amongst others ---
the empirical test statistic, the degrees of freedom,
and the corresponding $P$ value.

The function \code{hausman.systemfit}
tests the consistency of the 3SLS estimator.
It returns an object of class \code{htest},
which contains --- amongst others ---
the empirical test statistic,
the degrees of freedom, and the $P$ value.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Other methods and functions}

The \pkg{systemfit} package provides several methods
for objects both of classes \code{systemfit}
and \codeD{systemfit}{equation}:
\code{print} methods print the estimation results,
\code{summary} methods calculate summary results,
\code{confint} methods compute confidence intervals for the coefficients,
\code{predict} methods calculate predicted values,
\code{coef} methods extract the estimated coefficients,
\code{vcov} methods extract their covariance matrix,
\code{fitted} methods extract the fitted values,
\code{residuals} methods extract the residuals,
\code{formula} methods extract the formula(s),
\code{terms} methods extract the model terms,
\codeD{model}{frame} methods extract the model frame,
and \codeD{model}{matrix} methods extract the model matrix.
Some methods can be applied to objects of class \code{systemfit} only:
a \code{correlation} method calculates
the correlations between the predictions of two equations,
an \code{se.ratio} method computes the ratios of the standard errors
of the predictions between two models,
and a \code{logLik} method extracts the log likelihood value.
The package provides \code{print} methods
to print objects of classes
\codeD{summary}{systemfit}, \codeDD{summary}{systemfit}{equation},
and \codeD{confint}{systemfit}
that are returned by the above mentioned \code{summary}
and \code{confint} methods.
There exist also two \code{coef} methods
to extract the estimated coefficients,
their standard errors, $t$ values, and $P$ values
from objects of classes
\codeD{summary}{systemfit} and \codeDD{summary}{systemfit}{equation}.%
\footnote{%
There does not exist a special method to extract
the degrees of freedom of the residuals from \code{systemfit} objects,
because the default method of \code{df.residual}
works for these objects.
}

The convenience function
\code{createSystemfitModel} creates a model for \code{systemfit}
by random numbers;
\codeD{systemfit}{control} sets suitable default values
for the technical control parameters for \code{systemfit}.

Finally, the package includes some internal (hidden) helper functions:
\codeD{.prepareData}{systemfit},
\code{.stackMatList}, and \code{.prepareWmatrix}
for preparing the data matrices;
\code{.calcXtOmegaInv} and \code{.calcGLS}
for calculating the GLS estimator;
\code{.calcResidCov} and \code{.calcSigma2}
for calculating the (co)variances of the residuals;
and \codeD{.ftest}{systemfit}
for calculating \citeauthor{theil71}'s $F$ statistic.
If \code{systemfit} is applied to
a (classical) °seemingly unrelated regression° analysis with panel data,
it calls the hidden internal function \code{.systemfitPanel},
which reshapes the data, creates the formulas to be estimated,
and --- if requested --- specifies restrictions
to ensure that the coefficients of all individuals are equal.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Efficiency of computations}
\label{sec:code-efficiency}
We have followed \cite{bates04} to make the code of \pkg{systemfit}
faster and more stable.
First, if a formula contains an inverse of a matrix
that is post-multiplied by a vector or matrix,
we use \code{solve(A,b)} instead of \code{solve(A) \%*\% b}.
Second, we calculate crossproducts
by \code{crossprod(X)} or \code{crossprod(X,y)}
instead of \code{t(X) \%*\% X} or \code{t(X) \%*\% y},
respectively.

The matrix $\Omega^{-1}$ that is used to compute the estimated
coefficients and their covariance matrix is of size
$( G \cdot T ) \times ( G \cdot T )$
(see Sections~\ref{sec:Estimation-ols-wls-sur},
\ref{sec:Estimation-2sls-w2sls-3sls}, and~\ref{sec:Restrictions}).
In case of large data sets, $\Omega^{-1}$ becomes computationally infeasible.
Therefore, we use the following transformation and compute $X' \Omega^{-1}$
by dividing the $X$ matrix into submatrices,
doing some calculations with these submatrices,
adding up some of these submatrices, and
finally putting the submatrices together, so that
\begin{equation}
X' \Omega^{-1}
%= X' \left( \Sigma^{-1} \otimes I \right)
= \sum_{i=1} \left[ \begin{array}{c}
   \sigma^{1i} {X^1} \\
   \sigma^{2i} {X^2} \\
   \vdots \\
   \sigma^{Gi} {X^G} \\
\end{array} \right]' ,
\label{eq:omegaInv}
\end{equation}
where $\sigma^{ij}$ are the elements of the matrix $\Sigma^{-1}$,
and $X^i$ is a submatrix of $X$ that contains the rows
that belong to the $i$'s equation.
This computation is done inside the internal (hidden) function
\code{.calcXtOmegaInv}.

Since version 1.0, the \code{systemfit} function by default
uses the \pkg{Matrix} package \citep{r-matrix-07}
for all computations where matrices are involved.
The \pkg{Matrix} package provides classes for different types of matrices.
For instance, we choose class \code{dgeMatrix}
(°real matrices in general storage mode°),
for matrices $X_i$ in~(\ref{eq:model-array}),
class \code{dgCMatrix} (°general, numeric, sparse matrices
in the (sorted) compressed sparse column format°)
for matrix $X$ in~(\ref{eq:model-matrices}),
and class \code{dspMatrix}
(°symmetric real matrices in packed storage (one triangle only)°)
for the residual covariance matrix $\SHat$.
If the \pkg{Matrix} package is used,
the possibly huge matrix $\Omega^{-1}$ is no longer a problem,
because it is a sparse matrix
that can be stored in a compressed format (class \code{dgCMatrix}).
Hence, we no longer need the algorithm in equation~(\ref{eq:omegaInv}).
We have tested different ways to calculate a GLS estimator
like in (\ref{eq:ols-wls-sur})
and we found
that the following code is the fastest:
<<eval=FALSE>>=
sigmaInv <- solve( residCov )
xtOmegaInv <- crossprod( xMat, kronecker( sigmaInv, Diagonal( nObs ) ) )
coef <- solve( xtOmegaInv %*% xMat, xtOmegaInv %*%  yVec )
@
In this code snippet,
\code{residCov} is the residual covariance matrix $\SHat$,
\code{nObs} is the number of observations in each equation $T$,
\code{xMat} is the matrix $X$ and
\code{yVec} is the vector $y$ in~(\ref{eq:ols-wls-sur}).

By default, the \code{systemfit} function uses the \pkg{Matrix} package
to perform GLS estimations,
because using this package considerably decreases
the computation time for many common models.
However, the estimation of small models with small data sets
gets slower by using the \pkg{Matrix} package
(see appendix~\ref{sec:timings}).
While this increase in computation time
is often imperceptible to human beings,
it might matter in some cases
such as iterated estimations or Monte Carlo studies.
Therefore, the user can opt for not using the \pkg{Matrix} package,
but equation~(\ref{eq:omegaInv}) with standard \proglang{R} matrices.


\subsection[Overlap with other functions and packages in R]
   {Overlap with other functions and packages in \proglang{R}}

Single-equation models can be fitted in \proglang{R}
by OLS with function \code{lm} (package \pkg{stats})
and by 2SLS with function \code{tsls}
(package \pkg{sem}, \citealp{r-sem-0.9-8}).
This is also possible with the \code{systemfit} function,
but \code{systemfit} is specialized in estimating systems of equation,
i.e.\ more than one equation.
Its capability to estimate single-equation models is just a side-effect.

Function \code{sem} (package \pkg{sem}, \citealp{r-sem-0.9-8})
can be used to estimate structural equation models in \proglang{R}
by full information maximum likelihood (FIML)
assuming multinormal errors.
A special feature of this function is the estimation
of models with unobserved (°latent°) variables,
which is not possible with \code{systemfit}.
While \code{sem} cannot be used to consistently estimate
systems of simultaneous equations with some endogenous regressors,
it can be used to estimate systems of equations,
where all regressors are exogenous.
However, the latter is rather cumbersome
(see appendix~\ref{sec:sem}).
Hence, \code{systemfit} is the only function in \proglang{R}
that can be used to estimate systems of simultaneous equations
and it is the most convenient function to estimate
systems of equations with purely exogenous regressors.

