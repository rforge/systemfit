%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Using systemfit}\label{sec:Usage}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

In this section we demonstrate how to use the \pkg{systemfit} package.
First, we show the standard usage of \code{systemfit} by a simple example.
Second, several options that can be specified by the user are presented.
Then, the usage of \code{systemfit}
for a (classical) °Seemingly Unrelated Regression° analysis
with panel-like data is described.
Finally, we demonstrate how to apply some statistical tests.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection[Standard usage of systemfit]{Standard usage of \code{systemfit}}
\label{sec:standard-usage}

As described in the previous section,
equation systems can be econometrically estimated
with the function \code{systemfit}.
It is generally called by
<<eval=FALSE>>=
systemfit( eqns )
@

The only mandatory argument is \code{eqns}.
It is a list of the equations
to be estimated.
Each equation is a standard formula in \proglang{R} and
starts with a dependent variable on the left hand side.
The regressors are listed after a °\verb/~/°,
separated by plus signs%
\footnote{
The full standard formula language in \proglang{R} is allowed;
for details see the \proglang{R} help files to \code{formula}.
}.

The following demonstration uses an example taken from
\citet[p.\ 685]{kmenta86}.
We want to estimate a small model of the US food market:
\begin{align}
\texttt{consump} & = \beta_1 + \beta_2 \cdot \texttt{price}
   + \beta_3 \cdot \texttt{income} \\
\texttt{consump} & = \beta_4 + \beta_5 \cdot \texttt{price}
   + \beta_6 \cdot \texttt{farmPrice} + \beta_7 \cdot \texttt{trend}
\end{align}
The first equation represents the demand side of the food market.
Variable \code{consump} (food consumption per capita) is the dependent variable.
The regressors are \code{price} (ratio of food prices to general consumer prices)
and \code{income} (disposable income) as well as a constant.
The second equation specifies the supply side of the food market.
Variable \code{consump} is the dependent variable of this equation as well.
The regressors are again \code{price} (ratio of food prices to general 
consumer prices) and a constant as well as 
\code{farmPrice} (ratio of preceding year's prices received by farmers) and 
\code{trend} (a time trend in years).
These equations can be estimated by OLS in \proglang{R} by
<<>>=
library( systemfit )
data( Kmenta )
attach( Kmenta )
eqDemand <- consump ~ price + income
eqSupply <- consump ~ price + farmPrice + trend
eqSystem <- list( demand = eqDemand, supply = eqSupply )
fitols <- systemfit( eqSystem )
@

The first line loads the \pkg{systemfit} package.
The second line loads example data that are included with the package.
They are attached to the \proglang{R} search path in line three.
In the fourth and fifth line, the demand and supply equations are specified,
respectively%
\footnote{
A regression constant is always implied if not explicitly omitted.
}.
In the sixth line, these equations are concatenated into a list and
are labeled °demand° and °supply°, respectively.%
\footnote{
If no labels are provided, the equations are numbered consecutively
( °eq1°, °eq2°, \ldots ).
}
Finally, in the last line, the regression is performed
and the result is assigned to the variable \code{fitols}.

Summary results can be printed by
<<>>=
summary( fitols )
@

First, the estimation method is reported
and a few summary statistics for each equation are given.
Then, some results regarding the whole equation system are printed:
covariance matrix and correlations of the residuals,
log of the determinant of the residual covariance matrix,
and $R^2$ value of the whole system.%
\footnote{
If the model is estimated by SUR or 3SLS,
McElroy's $R^2$ value and
the covariance matrix used for estimation are printed additionally.
}
Finally, the estimation results of each equation are reported:
formula of the estimated equation,
estimated parameters, their standard errors, $t$ values, $p$ values
and codes indicating their statistical significance,
and some other statistics like
standard error of the residuals or
$R^2$ value of the equation.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection[User options of systemfit]{User options of \code{systemfit}}
\label{sec:user-options}

The user can modify the default estimation method by providing
additional optional arguments,
e.g.\ to specify instrumental variables
or to impose parameter restrictions.
All optional arguments are described in the following:


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Estimation method}

The optional argument \code{method} is a string
that determines the estimation method.
It must be either °\code{OLS}°, °\code{WLS}°, °\code{SUR}°,
°\code{2SLS}°, °\code{W2SLS}°, or °\code{3SLS}°.
These methods correspond to the estimation methods
described in sections~\ref{sec:Estimation} and~\ref{sec:Restrictions}.
The following command estimates the model described above as
°Seemingly Unrelated Regression°.
<<>>=
fitsur <- systemfit( list( demand = eqDemand, supply = eqSupply ), "SUR" )
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Instrumental variables}
The instruments for a 2SLS, W2SLS or 3SLS estimation can be specified
by the argument \code{inst}.
If the same instruments should be used for all equations,
\code{inst} must be a one-sided formula.%
\footnote{
A one-sided formula is a standard formula in \proglang{R}
without a dependent variable.}
If different instruments should be used for the equations,
\code{inst} must be a list that contains a one-sided formula
for each equation.
The first example uses the same instruments for all equations,
and the second uses different instruments:
<<>>=
fit3sls  <- systemfit( list( demand = eqDemand, supply = eqSupply ), "3SLS",
   inst = ~ income + farmPrice + trend )
fit3sls2 <- systemfit( list( demand = eqDemand, supply = eqSupply ), "3SLS",
   inst = list( ~ farmPrice + trend, ~ income + farmPrice + trend ) )
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Data}
Having all data in the global environment or attached to the search path
is often inconvenient.
Therefore, a data frame \code{data} can be provided
that contains the variables of the model.
In the following example we do not need to attach the data frame
\code{Kmenta} before calling systemfit:
<<>>=
fitsur <- systemfit( list( eqDemand, eqSupply ), "SUR", data = Kmenta )
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Parameter restrictions}
As outlined in section~\ref{sec:Restrictions}, parameter restrictions
can be imposed in two ways.
The first way is to use the transformation matrix $M$
that can be specified by the argument \code{restrict.regMat}.
If we want to impose the restriction, say $\beta_2 = - \beta_6$,
we can do this as follows
<<>>=
tx <- matrix( 0, nrow = 7, ncol = 6 )
tx[ 1:5, 1:5 ] <- diag( 5 ) # beta_{1-5} =  beta*_{1-5}
tx[ 6, 2 ] <- -1   # beta_6 = -beta*_2
tx[ 7, 6 ] <-  1   # beta_7 =  beta*_6
fitsurTx <- systemfit( list( eqDemand, eqSupply ), "SUR", restrict.regMat = tx )
@
The first line creates a $7 \times 6$ matrix of zeros,
where 7 is the number of unrestricted coefficients and
6 is the number of restricted coefficients.
The following seven lines specify this matrix in a way
that the unrestricted coefficients $( \beta )$ are assigned
to the restricted coefficients $( \beta^M )$ with
$\beta_1 = \beta^M_1$,
$\beta_2 = \beta^M_2$,
$\beta_3 = \beta^M_3$,
$\beta_4 = \beta^M_4$,
$\beta_5 = \beta^M_5$,
$\beta_6 = -\beta^M_2$, and
$\beta_7 = \beta^M_6$.
Finally the model is estimated with restriction
$\beta^M_2 = \beta_2 = - \beta_6$ imposed.

The second way to impose parameter restrictions is to use
the matrix $R$ and the vector $q$
(see section~\ref{sec:Restrictions}).
Matrix $R$ can be specified with the argument \code{restrict.matrix}
and vector $q$ with argument \code{restrict.rhs}.
We convert the restriction specified above to $\beta_2 + \beta_6 = 0$
and impose it in the second way:
<<>>=
Rmat <- matrix( 0, nrow = 1, ncol = 7 )
Rmat[ 1, 2 ] <-  1   # beta_2
Rmat[ 1, 6 ] <-  1   # beta_6
qvec <- c( 0 )
fitsurRmat <- systemfit( list( eqDemand, eqSupply ), "SUR",
   restrict.matrix = Rmat, restrict.rhs = qvec )
@
\label{code:Rmat}
The first line creates a $1 \times 7$ matrix of zeros,
where 1 is the number of restrictions and
7 is the number of unrestricted coefficients.
The following two lines specify this matrix in a way
that the multiplication with the parameter vector
results in $ \beta_2 + \beta_6 $.
The fourth line creates a vector with a single element
that contains the left hand side of the restriction, i.e.\ zero.
Finally the model is estimated with restriction
$\beta_2 + \beta_6 = 0$ imposed.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Iteration control}
The estimation methods WLS, SUR, W2SLS and 3SLS need a
covariance matrix of the residuals
that can be calculated from a first-step OLS or 2SLS estimation
(see section~\ref{sec:residcov}).
This procedure can be iterated and at each iteration the covariance
matrix is calculated from the previous step estimation.
This iteration is repeated until the maximum number of iterations
is reached or the parameter estimates have converged.
The maximum number of iterations is specified by the argument \code{maxiter}.
Its default value is one, which means no iteration.
The convergence criterion is
\begin{equation}
   \sqrt{ \frac{ \sum_i (b_{i,g} - b_{i,g-1})^2 }{ \sum_i b_{i,g-1}^2 }}
      < \texttt{tol} ,
\end{equation}
where $b_{i,g}$ is the $i$th coefficient of the $g$th iteration.
The default value of \code{tol} is $10^{-5}$.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Residual covariance matrix}
It was explained in section~\ref{sec:residcov} that several different
methods have been proposed to calculate the residual
covariance matrix.
The user can specify, which method \pkg{systemfit} should use.
Possible values of the argument \code{methodResidCov} are presented in
table~\ref{tab:methodResidCov}.
By default, \pkg{systemfit} uses equation (\ref{eq:rcovGeomean}).

\begin{table}[H]
\caption{Possible values of argument \code{methodResidCov}}
\label{tab:methodResidCov}
\centering
\begin{tabular}{|c|c|}
\hline
argument & equation \\
\code{methodResidCov} & \\
\hline
'noDfCor' & \ref{eq:rcovNoDfCor} \\
\hline
'geomean' & \ref{eq:rcovGeomean} \\
\hline
'max'     & \ref{eq:rcovMax} \\
\hline
'Theil'   & \ref{eq:rcovTheil} \\
\hline
\end{tabular}
\end{table}

Furthermore, the user can specify
whether the means should be subtracted from the residuals
before (\ref{eq:rcovNoDfCor}), (\ref{eq:rcovGeomean}), (\ref{eq:rcovMax}),
or (\ref{eq:rcovTheil}) are applied
to calculate the residual covariance matrix
(see section~\ref{sec:residcov}).
The corresponding argument is called \code{centerResiduals}.
It must be either °\code{TRUE}° (subtract the means) or
°\code{FALSE}° (take the unmodified residuals).
The default value of \code{centerResiduals} is °\code{FALSE}°.

Moreover, if the user imposes any restrictions on the parameters,
she can use argument °\code{residCovRestricted}° to specify
whether the residual covariance matrix
for a WLS, SUR, W2SLS, or 3SLS estimation
should be obtained from a restricted or from an unrestricted
first-step estimation
(see section~\ref{sec:residcov}).
If this argument is °\code{TRUE}° (the default),
the residual covariance matrix is obtained from a restricted
OLS or 2SLS estimation.
If it is °\code{FALSE}°,
the residual covariance matrix is obtained from an unrestricted
first-step estimation.

Finally, argument °\code{residCovWeighted}° can be used to decide,
whether the residual covariance matrix for a SUR (3SLS) estimation
should be obtained from a WLS (W2SLS)
rather than from an OLS (2SLS) estimation
(see section~\ref{sec:residcov}).
By default, °\code{residCovWeighted}° is \code{FALSE},
which means that the residuals of an OLS (2SLS) estimation are used
to compute the residual covariance matrix.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{3SLS formula}
As discussed in sections~\ref{sec:Estimation} and~\ref{sec:Restrictions},
there exist several different
methods to perform a 3SLS estimation.
The user can specify the method by the argument \code{method3sls}.
Possible values are presented in table~\ref{tab:method3sls}.
The default value is 'GLS'.

\begin{table}[H]
\caption{Possible values of argument \code{method3sls}}
\label{tab:method3sls}
\centering
\begin{tabular}{|c|c|c|}
\hline
argument           & equation       & equation \\
\code{method3sls} & (unrestricted) & (restricted) \\
\hline
'GLS'     & \ref{eq:3slsGls}     & \ref{eq:3slsGlsR} \\
\hline
'IV'      & \ref{eq:3slsIv}      & \ref{eq:3slsIvR} \\
\hline
'GMM'     & \ref{eq:3slsGmm}     & \ref{eq:3slsGmmR} \\
\hline
'Schmidt' & \ref{eq:3slsSchmidt} & \ref{eq:3slsSchmidtR} \\
\hline
'EViews'  & \ref{eq:3slsEViews}  & \ref{eq:3slsEViewsR} \\
\hline
\end{tabular}
\end{table}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection[Degrees of freedom for t tests]{Degrees of freedom for $\boldsymbol{t}$ tests}
There exist two different approaches to determine the degrees of freedom
to perform $t$ tests on the estimated parameters
(section~\ref{sec:degreesOfFreedom}).
This can be specified with argument \code{probdfsys}.
If it is \code{TRUE},
the degrees of freedom of the whole system are taken.
In contrast, if \code{probdfsys} is \code{FALSE},
the degrees of freedom of the single equation are taken.
By default, \code{probdfsys} is \code{TRUE}, if any restrictions
are specified using either the argument \code{restrict.matrix} or the
argument \code{restrict.regMat}, and it is \code{FALSE} otherwise.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Sigma squared}
In case of OLS or 2SLS estimations, argument \code{single.eq.sigma}
can be used to specify,
whether different $\sigma^2$s for each single equation
or the same $\sigma^2$ for all equations should be used.
If argument \code{single.eq.sigma} is \code{TRUE},
equations (\ref{eq:olsCovSingleSigma})
and (\ref{eq:2slsCovSingleSigma}) are applied.
In contrast, if argument \code{single.eq.sigma} is \code{FALSE},
equations (\ref{eq:olsCovSameSigma})
and (\ref{eq:2slsCovSameSigma}) are applied.
By default, \code{single.eq.sigma} is \code{FALSE}, if any restrictions
are specified using either the argument \code{restrict.matrix} or the
argument \code{restrict.regMat}, and it is \code{TRUE} otherwise.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{System options}
Finally, two options regarding some internal calculations are available.
First, argument \code{solvetol} specifies the tolerance level
for detecting linear dependencies when inverting a matrix or
calculating a determinant (using functions \code{solve} and \code{det}).
The default value depends on the used computer system and is equal to the
default tolerance level of \code{solve} and \code{det}.
Second, argument \code{saveMemory} can be used in case of large data sets
to accelerate the estimation by omitting some calculation
that are not crucial for the basic estimation.
Currently, only the calculation of McElroy's $R^2$ is omitted.
The default value of argument \code{saveMemory} is \code{TRUE},
if the argument \code{data} is specified and the number of observations
times the number of equations is larger than 1000,
and it is \code{FALSE} otherwise.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Panel-like data}

The \code{systemfit} function can also be used
for a (classical) °Seemingly Unrelated Regression° analysis
with panel-like data.
For this type of analysis,
the data must be provided in an object of class \code{pdata.frame}
(°panel data frame°),%
\footnote{
Generally, panel data can be either in °long format°
(different individuals are arranged below each other)
or in °wide format°
(different individuals are arranged next to each other).
For this analysis, the data must be in °long format°.
}
which can be created with the function \code{pdata.frame}
from the \proglang{R} package \pkg{plm}
\citep{r-plm-0.1-2}.
In opposite to the previously described usage of \code{systemfit},
argument \code{eqns} must be a single equation (object of class \code{formula}).
This formula is estimated for all individuals.

We demonstrate the application of \code{systemfit}
to panel-like data
using an example taken from \citet[p.~340]{greene03}
that is based on \citet{grunfeld58}.
We want to estimate a model for gross investment of 5 US firms
in the years 1935--1954:
\begin{equation}
\texttt{invest}_{it} = \beta_1 + \beta_2 \cdot \texttt{value}_{it} +
   \beta_3 \cdot \texttt{capital}_{it}
\end{equation}
where \code{invest} is the gross investment of firm $i$ in year $t$,
\code{value} is the market value of the firm at the end of the
previous year, and
\code{capital} is the capital stock of the firm at the end of the
previous year.

This model can be estimated by
<<>>=
data( "GrunfeldGreene" )
library( plm )
pdata.frame( GrunfeldGreene, "firm", "year" )
greeneSur <- systemfit( invest ~ value + capital, "SUR",
   data = GrunfeldGreene )
@
The first line loads the example data set \code{GrunfeldGreene}
that is included in the \pkg{systemfit} package.
The second line loads the \pkg{plm} package
and the following line specifies a \code{pdata.frame},
where the variables \code{firm} and \code{year} indicate
the indivuidual (cross-section) and time identifier, respectively.
Finally, a seemingly unrelated regression is performed.

The optional argument \code{pooled} is a logical variable indicating
whether the coefficients are restricted to be equal for all
individuals.
By default, this argument is set to °\code{FALSE}°.
The following command does a seemingly unrelated regression
of the same model as before,
but with coefficients restricted to be equal for all individuals.
<<>>=
greeneSurPooled <- systemfit( invest ~ value + capital, "SUR",
   data = GrunfeldGreene, pooled = TRUE )
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Testing linear restrictions}

As described in section~\ref{sec:testingRestrictions},
linear restrictions can be tested by an $F$ test, Wald test or
LR test.
The \pkg{systemfit} package provides
the method \code{linear.hypothesis.systemfit} for $F$ tests and Wald tests
as well as the method \code{lrtest} for LR tests.

We will now test the restriction $\beta_2 = -\beta_6$
that was specified by the matrix \code{Rmat} and the vector \code{qvec}
in the example above (p.~\pageref{code:Rmat}).
<<>>=
linear.hypothesis( fitsur, Rmat, qvec, test = "F" )

linear.hypothesis( fitsur, Rmat, qvec, test = "Chisq" )

lrtest( fitsurRmat, fitsur )
@
The linear restrictions are tested by an $F$ test first,
then by a Wald test, and finally by an LR test.
The first argument of method \code{linear.hypothesis.systemfit}
must be an unrestricted regression
returned by \code{systemfit}.
The second and third argument are the restriction matrix $R$ and
optionally the vector $q$ as described in section~\ref{sec:Restrictions}.
The optional argument \code{test} must be
a character string, °\code{F}° or °\code{Chisq}°,
specifying whether to compute
the finite-sample $F$ statistic (with approximate $F$ distribution)
or the large-sample Wald statistic (with asymptotic $\chi^2$ distribution).

All arguments of the function \code{lrtest.systemfit}
must be fitted model objects returned by \code{systemfit}.
It consecutively compares all provided fitted model objects.

All tests print a short explanation first.
Then the empirical test statistic and the degree(s) of freedom are reported.
Finally the $p$ value is printed.
While there is some variation of the $p$ values across
the three different tests,
all tests suggest the same decision:
The null hypothesis $\beta_2 = -\beta_6$ cannot be rejected at any
reasonable level of significance.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Hausman test}
A Hausman test, which is described in section~\ref{sec:hausman},
can be carried out with following commands:
<<>>=
fit2sls  <- systemfit( list( demand = eqDemand, supply = eqSupply ), "2SLS",
   inst = ~ income + farmPrice + trend, data = Kmenta )
fit3sls <- systemfit( list( demand = eqDemand, supply = eqSupply ), "3SLS",
   inst = ~ income + farmPrice + trend, data = Kmenta )
hausman.systemfit( fit2sls, fit3sls )
@
<<echo=FALSE>>=
hausmantest <- hausman.systemfit( fit2sls, fit3sls )
@
First of all, the model is estimated by 2SLS and then by 3SLS.
Finally, in the last line
the test is carried out by the command \code{hausman.systemfit}.
This function requires two arguments:
the result of a 2SLS estimation and
the result of a 3SLS estimation.
The Hausman test statistic is
\Sexpr{round( hausmantest$statistic, digits = 3)},
which has a $\chi^2$ distribution
with \Sexpr{hausmantest$parameter} degrees of freedom
under the null hypothesis.
The corresponding $p$ value is
\Sexpr{round( hausmantest$p.value, digits = 3 )}.
This shows that the null hypothesis is not rejected
at any reasonable level of significance.
Hence, we can assume that the 3SLS estimator is consistent.
