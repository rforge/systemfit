
R version 2.5.0 (2007-04-23)
Copyright (C) 2007 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library( systemfit )
Loading required package: car
Loading required package: lmtest
Loading required package: zoo

Attaching package: 'zoo'


	The following object(s) are masked from package:base :

	 rapply 

> data( "Kmenta" )
> 
> demand <- consump ~ price + income
> supply <- consump ~ price + farmPrice + trend
> system <- list( demand = demand, supply = supply )
> restrm <- matrix(0,1,7)  # restriction matrix "R"
> restrm[1,3] <-  1
> restrm[1,7] <- -1
> restrict <- "demand_income - supply_trend = 0"
> restr2m <- matrix(0,2,7)  # restriction matrix "R" 2
> restr2m[1,3] <-  1
> restr2m[1,7] <- -1
> restr2m[2,2] <- -1
> restr2m[2,5] <-  1
> restr2q <- c( 0, 0.5 )  # restriction vector "q" 2
> restrict2 <- c( "demand_income - supply_trend = 0",
+    "- demand_price + supply_price = 0.5" )
> restrict2i <- c( "demand_income - supply_trend = 0",
+    "- demand_price + supply_income = 0.5" )
> tc <- matrix(0,7,6)
> tc[1,1] <- 1
> tc[2,2] <- 1
> tc[3,3] <- 1
> tc[4,4] <- 1
> tc[5,5] <- 1
> tc[6,6] <- 1
> tc[7,3] <- 1
> restr3m <- matrix(0,1,6)  # restriction matrix "R" 2
> restr3m[1,2] <- -1
> restr3m[1,5] <-  1
> restr3q <- c( 0.5 )  # restriction vector "q" 2
> restrict3 <- "- C2 + C5 = 0.5"
> 
> # the standard equations do not converge and lead to a singular weighting matrix
> # both in R and in EViews, since both equations have the same endogenous variable
> supply2 <- price ~ income + farmPrice + trend
> system2 <- list( demand = demand, supply = supply2 )
> 
> 
> ## *************** SUR estimation ************************
> fitsur1 <- systemfit( system, "SUR", data = Kmenta )
> print( summary( fitsur1 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  65.6829 3.86370 1.96563 0.755019 0.726198
supply 20 16 104.0584 6.50365 2.55023 0.611888 0.539117

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.72539 4.13696
supply 4.13696 5.78444

The covariance matrix of the residuals
        demand  supply
demand 3.86370 4.92431
supply 4.92431 6.50365

The correlations of the residuals
         demand   supply
demand 1.000000 0.982348
supply 0.982348 1.000000

The determinant of the residual covariance matrix: 0.879285
OLS R-squared value of the system: 0.683453
McElroy's R-squared value for the system: 0.788722

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.332894   7.514452 13.218913        0 ***
price       -0.275486   0.088509 -3.112513 0.006332  **
income        0.29855   0.041945  7.117605    2e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.96563 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 65.682902 MSE: 3.8637 Root MSE: 1.96563 
Multiple R-Squared: 0.755019 Adjusted R-Squared: 0.726198 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 61.966166   11.08079 5.592215    4e-05 ***
price        0.146884   0.094435 1.555397 0.139408    
farmPrice    0.214004   0.039868 5.367761  6.3e-05 ***
trend        0.339304   0.067911 4.996283 0.000132 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.550226 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 104.05843 MSE: 6.503652 Root MSE: 2.550226 
Multiple R-Squared: 0.611888 Adjusted R-Squared: 0.539117 

> 
> ## ********************* SUR (EViews-like) *****************
> fitsur1e <- systemfit( system, "SUR", data = Kmenta, methodRCov = "noDfCor" )
> print( summary( fitsur1e, useDfSys = TRUE ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.1857 3.89328 1.97314 0.753144 0.724102
supply 20 16 103.5499 6.47187 2.54399 0.613785 0.541369

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.16658 3.41143
supply 3.41143 4.62755

The covariance matrix of the residuals
        demand  supply
demand 3.30928 4.06638
supply 4.06638 5.17749

The correlations of the residuals
         demand   supply
demand 1.000000 0.982384
supply 0.982384 1.000000

The determinant of the residual covariance matrix: 0.59835
OLS R-squared value of the system: 0.683464
McElroy's R-squared value for the system: 0.747844

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.275662   6.927983 14.329663        0 ***
price       -0.271333   0.081601 -3.325108 0.002175  **
income       0.294879   0.038672   7.62519        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.973138 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.185679 MSE: 3.893275 Root MSE: 1.973138 
Multiple R-Squared: 0.753144 Adjusted R-Squared: 0.724102 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 62.294214    9.91096 6.285387        0 ***
price        0.146147   0.084465 1.730257 0.092928   .
farmPrice    0.212143   0.035659 5.949148    1e-06 ***
trend        0.332212   0.060742 5.469253    5e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.543987 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 103.549894 MSE: 6.471868 Root MSE: 2.543987 
Multiple R-Squared: 0.613785 Adjusted R-Squared: 0.541369 

> 
> ## ********************* SUR (methodRCov="Theil") *****************
> fitsur1r2 <- systemfit( system, "SUR", data = Kmenta, methodRCov = "Theil" )
> print( summary( fitsur1r2 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.8022 3.92954 1.98231 0.750844 0.721532
supply 20 16 105.3221 6.58263 2.56566 0.607175 0.533520

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.72539 4.27624
supply 4.27624 5.78444

warning: this covariance matrix is NOT positive semidefinit!

The covariance matrix of the residuals
        demand  supply
demand 3.92954 5.17327
supply 5.17327 6.58263

The correlations of the residuals
         demand   supply
demand 1.000000 0.984044
supply 0.984044 1.000000

The determinant of the residual covariance matrix: -0.896033
OLS R-squared value of the system: 0.67901
McElroy's R-squared value for the system: 1.00928

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.211993   7.512677 13.205945        0 ***
price       -0.266714   0.087712 -3.040792 0.007383  **
income       0.290795   0.040615  7.159724    2e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.982307 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.802201 MSE: 3.929541 Root MSE: 1.982307 
Multiple R-Squared: 0.750844 Adjusted R-Squared: 0.721532 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 63.076817   10.97351 5.748099    3e-05 ***
price        0.143864   0.094341 1.524947 0.146794    
farmPrice    0.206372   0.038413 5.372498  6.2e-05 ***
trend         0.33252   0.064028 5.193358  8.9e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.565663 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 105.322063 MSE: 6.582629 Root MSE: 2.565663 
Multiple R-Squared: 0.607175 Adjusted R-Squared: 0.53352 

> 
> ## *************** SUR (methodRCov="Theil", useDfSys = TRUE ) ***************
> fitsur1e2 <- systemfit( system, "SUR", data = Kmenta, methodRCov = "Theil",
+    returnModelMatrix = TRUE )
> print( summary( fitsur1e2, useDfSys = TRUE ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.8022 3.92954 1.98231 0.750844 0.721532
supply 20 16 105.3221 6.58263 2.56566 0.607175 0.533520

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.72539 4.27624
supply 4.27624 5.78444

warning: this covariance matrix is NOT positive semidefinit!

The covariance matrix of the residuals
        demand  supply
demand 3.92954 5.17327
supply 5.17327 6.58263

The correlations of the residuals
         demand   supply
demand 1.000000 0.984044
supply 0.984044 1.000000

The determinant of the residual covariance matrix: -0.896033
OLS R-squared value of the system: 0.67901
McElroy's R-squared value for the system: 1.00928

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.211993   7.512677 13.205945        0 ***
price       -0.266714   0.087712 -3.040792 0.004597  **
income       0.290795   0.040615  7.159724        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.982307 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.802201 MSE: 3.929541 Root MSE: 1.982307 
Multiple R-Squared: 0.750844 Adjusted R-Squared: 0.721532 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 63.076817   10.97351 5.748099    2e-06 ***
price        0.143864   0.094341 1.524947   0.1368    
farmPrice    0.206372   0.038413 5.372498    6e-06 ***
trend         0.33252   0.064028 5.193358    1e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.565663 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 105.322063 MSE: 6.582629 Root MSE: 2.565663 
Multiple R-Squared: 0.607175 Adjusted R-Squared: 0.53352 

> 
> ## ********************* SUR (methodRCov="max") *****************
> fitsur1r3 <- systemfit( system, "SUR", data = Kmenta, methodRCov = "max" )
> print( summary( fitsur1r3 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.6713 3.92184 1.98036 0.751332 0.722077
supply 20 16 105.1868 6.57417 2.56401 0.607679 0.534119

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.72539 4.26428
supply 4.26428 5.78444

warning: this covariance matrix is NOT positive semidefinit!

The covariance matrix of the residuals
        demand  supply
demand 3.92184 5.14958
supply 5.14958 6.57417

The correlations of the residuals
         demand   supply
demand 1.000000 0.983879
supply 0.983879 1.000000

The determinant of the residual covariance matrix: -0.735302
OLS R-squared value of the system: 0.679506
McElroy's R-squared value for the system: 0.957309

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.225003   7.512869 13.207338        0 ***
price       -0.267658   0.087799 -3.048537 0.007262  **
income       0.291629   0.040762  7.154496    2e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.980364 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.67132 MSE: 3.921842 Root MSE: 1.980364 
Multiple R-Squared: 0.751332 Adjusted R-Squared: 0.722077 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 62.957541  10.985025 5.731215  3.1e-05 ***
price        0.144186   0.094351 1.528194 0.145991    
farmPrice    0.207185   0.038568 5.371945  6.2e-05 ***
trend        0.333341   0.064412  5.17516  9.2e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.564015 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 105.186783 MSE: 6.574174 Root MSE: 2.564015 
Multiple R-Squared: 0.607679 Adjusted R-Squared: 0.534119 

> 
> ## *************** WSUR estimation ************************
> fitsur1w <- systemfit( system, "SUR", data = Kmenta, residCovWeighted = TRUE )
> summary( fitsur1w )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  65.6829 3.86370 1.96563 0.755019 0.726198
supply 20 16 104.0584 6.50365 2.55023 0.611888 0.539117

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.72539 4.13696
supply 4.13696 5.78444

The covariance matrix of the residuals
        demand  supply
demand 3.86370 4.92431
supply 4.92431 6.50365

The correlations of the residuals
         demand   supply
demand 1.000000 0.982348
supply 0.982348 1.000000

The determinant of the residual covariance matrix: 0.879285
OLS R-squared value of the system: 0.683453
McElroy's R-squared value for the system: 0.788722

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.332894   7.514452 13.218913        0 ***
price       -0.275486   0.088509 -3.112513 0.006332  **
income        0.29855   0.041945  7.117605    2e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.96563 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 65.682902 MSE: 3.8637 Root MSE: 1.96563 
Multiple R-Squared: 0.755019 Adjusted R-Squared: 0.726198 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 61.966166   11.08079 5.592215    4e-05 ***
price        0.146884   0.094435 1.555397 0.139408    
farmPrice    0.214004   0.039868 5.367761  6.3e-05 ***
trend        0.339304   0.067911 4.996283 0.000132 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.550226 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 104.05843 MSE: 6.503652 Root MSE: 2.550226 
Multiple R-Squared: 0.611888 Adjusted R-Squared: 0.539117 

> 
> ## *************** WSUR (methodRCov="Theil", useDfSys = TRUE ) ***************
> fitsur1we2 <- systemfit( system, "SUR", data = Kmenta, methodRCov = "Theil",
+    residCovWeighted = TRUE )
> summary( fitsur1we2, useDfSys = TRUE )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.8022 3.92954 1.98231 0.750844 0.721532
supply 20 16 105.3221 6.58263 2.56566 0.607175 0.533520

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.72539 4.27624
supply 4.27624 5.78444

warning: this covariance matrix is NOT positive semidefinit!

The covariance matrix of the residuals
        demand  supply
demand 3.92954 5.17327
supply 5.17327 6.58263

The correlations of the residuals
         demand   supply
demand 1.000000 0.984044
supply 0.984044 1.000000

The determinant of the residual covariance matrix: -0.896033
OLS R-squared value of the system: 0.67901
McElroy's R-squared value for the system: 1.00928

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 99.211993   7.512677 13.205945        0 ***
price       -0.266714   0.087712 -3.040792 0.004597  **
income       0.290795   0.040615  7.159724        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.982307 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.802201 MSE: 3.929541 Root MSE: 1.982307 
Multiple R-Squared: 0.750844 Adjusted R-Squared: 0.721532 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 63.076817   10.97351 5.748099    2e-06 ***
price        0.143864   0.094341 1.524947   0.1368    
farmPrice    0.206372   0.038413 5.372498    6e-06 ***
trend         0.33252   0.064028 5.193358    1e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.565663 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 105.322063 MSE: 6.582629 Root MSE: 2.565663 
Multiple R-Squared: 0.607175 Adjusted R-Squared: 0.53352 

> 
> 
> ## *************** SUR with cross-equation restriction **************
> fitsur2 <- systemfit( system, "SUR", data = Kmenta, restrict.matrix = restrm )
> print( summary( fitsur2 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  71.5965 4.21156 2.05221 0.732963 0.701547
supply 20 16 107.8064 6.73790 2.59575 0.597909 0.522517

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.77566 4.46578
supply 4.46578 5.94299

The covariance matrix of the residuals
        demand  supply
demand 4.21156 5.23869
supply 5.23869 6.73790

The correlations of the residuals
        demand  supply
demand 1.00000 0.98342
supply 0.98342 1.00000

The determinant of the residual covariance matrix: 0.93322
OLS R-squared value of the system: 0.665436
McElroy's R-squared value for the system: 0.753405

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.840761   7.558137 13.077398        0 ***
price        -0.23978   0.085993  -2.78835 0.008613  **
income       0.266981   0.036842   7.24657        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.052209 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 71.596524 MSE: 4.21156 Root MSE: 2.052209 
Multiple R-Squared: 0.732963 Adjusted R-Squared: 0.701547 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 67.428338  10.664717 6.322562        0 ***
price        0.133217    0.09531 1.397721  0.17125    
farmPrice    0.179481   0.033654 5.333128    6e-06 ***
trend        0.266981   0.036842  7.24657        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.595747 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 107.806415 MSE: 6.737901 Root MSE: 2.595747 
Multiple R-Squared: 0.597909 Adjusted R-Squared: 0.522517 

> # the same with symbolically specified restrictions
> fitsur2Sym <- systemfit( system, "SUR", data = Kmenta,
+    restrict.matrix = restrict )
> all.equal( fitsur2, fitsur2Sym )
[1] "Component 2: target, current do not match when deparsed"
> 
> ## *************** SUR with cross-equation restriction (EViews-like) **
> fitsur2e <- systemfit( system, "SUR", data = Kmenta, restrict.matrix = restrm,
+    methodRCov = "noDfCor", returnModelMatrix = TRUE )
> print( summary( fitsur2e ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  72.5773 4.26926 2.06622 0.729305 0.697458
supply 20 16 107.9169 6.74480 2.59708 0.597497 0.522027

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.20931 3.68257
supply 3.68257 4.75439

The covariance matrix of the residuals
        demand  supply
demand 3.62887 4.35444
supply 4.35444 5.39584

The correlations of the residuals
        demand  supply
demand 1.00000 0.98405
supply 0.98405 1.00000

The determinant of the residual covariance matrix: 0.619673
OLS R-squared value of the system: 0.663401
McElroy's R-squared value for the system: 0.707287

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.779936   6.968721 14.174758        0 ***
price       -0.235367   0.079496 -2.960727 0.005561  **
income       0.263079   0.034356  7.657404        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.066217 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 72.577327 MSE: 4.269255 Root MSE: 2.066217 
Multiple R-Squared: 0.729305 Adjusted R-Squared: 0.697458 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 67.603913   9.571168 7.063288        0 ***
price        0.132825    0.08527 1.557696 0.128566    
farmPrice    0.178493   0.030506  5.85111    1e-06 ***
trend        0.263079   0.034356 7.657404        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.597076 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 107.916871 MSE: 6.744804 Root MSE: 2.597076 
Multiple R-Squared: 0.597497 Adjusted R-Squared: 0.522027 

> 
> ## *************** WSUR with cross-equation restriction (EViews-like) **
> fitsur2we <- systemfit( system, "SUR", data = Kmenta, restrict.matrix = restrm,
+    methodRCov = "noDfCor", residCovWeighted = TRUE, returnModelMatrix = TRUE )
> summary( fitsur2we )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  73.0086 4.29462 2.07235 0.727696 0.695660
supply 20 16 108.6339 6.78962 2.60569 0.594822 0.518851

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.18968 3.69240
supply 3.69240 4.77803

The covariance matrix of the residuals
        demand  supply
demand 3.65043 4.38393
supply 4.38393 5.43170

The correlations of the residuals
         demand   supply
demand 1.000000 0.984518
supply 0.984518 1.000000

The determinant of the residual covariance matrix: 0.609218
OLS R-squared value of the system: 0.661259
McElroy's R-squared value for the system: 0.710796

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.754217   6.946822 14.215739        0 ***
price       -0.233501   0.078997 -2.955819 0.005632  **
income       0.261429   0.033786  7.737836        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.072347 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 73.008591 MSE: 4.294623 Root MSE: 2.072347 
Multiple R-Squared: 0.727696 Adjusted R-Squared: 0.69566 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 67.888244   9.564006 7.098306        0 ***
price         0.13205   0.085457 1.545215 0.131552    
farmPrice    0.176533   0.030134 5.858301    1e-06 ***
trend        0.261429   0.033786 7.737836        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.60569 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 108.633939 MSE: 6.789621 Root MSE: 2.60569 
Multiple R-Squared: 0.594822 Adjusted R-Squared: 0.518851 

> 
> 
> ## *************** SUR with restriction via restrict.regMat *******************
> fitsur3 <- systemfit( system, "SUR", data = Kmenta, restrict.regMat = tc )
> print( summary( fitsur3 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  71.5965 4.21156 2.05221 0.732963 0.701547
supply 20 16 107.8064 6.73790 2.59575 0.597909 0.522517

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.77566 4.46578
supply 4.46578 5.94299

The covariance matrix of the residuals
        demand  supply
demand 4.21156 5.23869
supply 5.23869 6.73790

The correlations of the residuals
        demand  supply
demand 1.00000 0.98342
supply 0.98342 1.00000

The determinant of the residual covariance matrix: 0.93322
OLS R-squared value of the system: 0.665436
McElroy's R-squared value for the system: 0.753405

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.840761   7.558137 13.077398        0 ***
price        -0.23978   0.085993  -2.78835 0.008613  **
income       0.266981   0.036842   7.24657        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.052209 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 71.596524 MSE: 4.21156 Root MSE: 2.052209 
Multiple R-Squared: 0.732963 Adjusted R-Squared: 0.701547 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 67.428338  10.664717 6.322562        0 ***
price        0.133217    0.09531 1.397721  0.17125    
farmPrice    0.179481   0.033654 5.333128    6e-06 ***
trend        0.266981   0.036842  7.24657        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.595747 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 107.806415 MSE: 6.737901 Root MSE: 2.595747 
Multiple R-Squared: 0.597909 Adjusted R-Squared: 0.522517 

> 
> ## *************** SUR with restriction via restrict.regMat (EViews-like) **************
> fitsur3e <- systemfit( system, "SUR", data = Kmenta, restrict.regMat = tc,
+    methodRCov = "noDfCor", returnModelMatrix = TRUE )
> print( summary( fitsur3e ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  72.5773 4.26926 2.06622 0.729305 0.697458
supply 20 16 107.9169 6.74480 2.59708 0.597497 0.522027

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.20931 3.68257
supply 3.68257 4.75439

The covariance matrix of the residuals
        demand  supply
demand 3.62887 4.35444
supply 4.35444 5.39584

The correlations of the residuals
        demand  supply
demand 1.00000 0.98405
supply 0.98405 1.00000

The determinant of the residual covariance matrix: 0.619673
OLS R-squared value of the system: 0.663401
McElroy's R-squared value for the system: 0.707287

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.779936   6.968721 14.174758        0 ***
price       -0.235367   0.079496 -2.960727 0.005561  **
income       0.263079   0.034356  7.657404        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.066217 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 72.577327 MSE: 4.269255 Root MSE: 2.066217 
Multiple R-Squared: 0.729305 Adjusted R-Squared: 0.697458 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 67.603913   9.571168 7.063288        0 ***
price        0.132825    0.08527 1.557696 0.128566    
farmPrice    0.178493   0.030506  5.85111    1e-06 ***
trend        0.263079   0.034356 7.657404        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.597076 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 107.916871 MSE: 6.744804 Root MSE: 2.597076 
Multiple R-Squared: 0.597497 Adjusted R-Squared: 0.522027 

> 
> ## *************** WSUR with restriction via restrict.regMat *******************
> fitsur3w <- systemfit( system, "SUR", data = Kmenta, restrict.regMat = tc,
+    residCovWeighted = TRUE, returnModelMatrix = TRUE )
> summary( fitsur3w )

systemfit results 
method: SUR 

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17  72.023 4.23665 2.05831 0.731372 0.699769
supply 20 16 108.579 6.78618 2.60503 0.595028 0.519096

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.74999 4.47951
supply 4.47951 5.97670

The covariance matrix of the residuals
        demand  supply
demand 4.23665 5.27562
supply 5.27562 6.78618

The correlations of the residuals
         demand   supply
demand 1.000000 0.983897
supply 0.983897 1.000000

The determinant of the residual covariance matrix: 0.918505
OLS R-squared value of the system: 0.6632
McElroy's R-squared value for the system: 0.756941

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.813894   7.531715 13.119707        0 ***
price       -0.237831   0.085381 -2.785537 0.008674  **
income       0.265258   0.036129  7.341939        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.058311 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 72.022983 MSE: 4.236646 Root MSE: 2.058311 
Multiple R-Squared: 0.731372 Adjusted R-Squared: 0.699769 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

            Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 67.73662  10.655644 6.356877        0 ***
price       0.132374   0.095548 1.385413 0.174948    
farmPrice    0.17735   0.033171 5.346473    6e-06 ***
trend       0.265258   0.036129 7.341939        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.605029 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 108.57882 MSE: 6.786176 Root MSE: 2.605029 
Multiple R-Squared: 0.595028 Adjusted R-Squared: 0.519096 

> 
> 
> ## *************** SUR with 2 restrictions ***************************
> fitsur4 <- systemfit( system, "SUR", data = Kmenta, restrict.matrix = restr2m,
+    restrict.rhs = restr2q )
> print( summary( fitsur4 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  63.9868 3.76393 1.94009 0.761345 0.733268
supply 20 16 101.4731 6.34207 2.51835 0.621530 0.550567

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.76491 4.45579
supply 4.45579 5.98832

The covariance matrix of the residuals
        demand  supply
demand 3.76393 4.70247
supply 4.70247 6.34207

The correlations of the residuals
         demand   supply
demand 1.000000 0.962476
supply 0.962476 1.000000

The determinant of the residual covariance matrix: 1.75786
OLS R-squared value of the system: 0.691438
McElroy's R-squared value for the system: 0.689596

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 96.827525   7.466548 12.968179        0 ***
price       -0.279771   0.083971 -3.331764 0.002046  **
income       0.328631   0.020632 15.928109        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.940085 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 63.986801 MSE: 3.763929 Root MSE: 1.940085 
Multiple R-Squared: 0.761345 Adjusted R-Squared: 0.733268 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 52.938648   7.665482  6.906108        0 ***
price        0.220229   0.083971  2.622692 0.012832   *
farmPrice    0.232671   0.021215 10.967325        0 ***
trend        0.328631   0.020632 15.928109        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.518346 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 101.473089 MSE: 6.342068 Root MSE: 2.518346 
Multiple R-Squared: 0.62153 Adjusted R-Squared: 0.550567 

> # the same with symbolically specified restrictions
> fitsur4Sym <- systemfit( system, "SUR", data = Kmenta,
+    restrict.matrix = restrict2 )
> all.equal( fitsur4, fitsur4Sym )
[1] "Component 2: target, current do not match when deparsed"
> 
> ## *************** SUR with 2 restrictions (EViews-like) **************
> fitsur4e <- systemfit( system, "SUR", data = Kmenta, methodRCov = "noDfCor",
+    restrict.matrix = restr2m, restrict.rhs = restr2q )
> print( summary( fitsur4e ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE      R2   Adj R2
demand 20 17  63.8111 3.75360 1.93742 0.76200 0.734000
supply 20 16 100.8351 6.30219 2.51042 0.62391 0.553393

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.20017 3.67434
supply 3.67434 4.79065

The covariance matrix of the residuals
        demand  supply
demand 3.19056 3.85826
supply 3.85826 5.04176

The correlations of the residuals
         demand   supply
demand 1.000000 0.961984
supply 0.961984 1.000000

The determinant of the residual covariance matrix: 1.19981
OLS R-squared value of the system: 0.692955
McElroy's R-squared value for the system: 0.652956

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  97.26781   6.920022 14.055997        0 ***
price       -0.285096   0.076719  -3.71611 0.000704 ***
income       0.329579    0.01845 17.863736        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.93742 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 63.811125 MSE: 3.753596 Root MSE: 1.93742 
Multiple R-Squared: 0.762 Adjusted R-Squared: 0.734 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 53.303998   7.104496  7.502855        0 ***
price        0.214904   0.076719  2.801176 0.008238  **
farmPrice    0.234299   0.018653 12.561069        0 ***
trend        0.329579    0.01845 17.863736        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.510417 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 100.835103 MSE: 6.302194 Root MSE: 2.510417 
Multiple R-Squared: 0.62391 Adjusted R-Squared: 0.553393 

> 
> ## *************** SUR with 2 restrictions (methodRCov = "Theil") **************
> fitsur4r2 <- systemfit( system, "SUR", data = Kmenta, methodRCov = "Theil",
+    restrict.matrix = restr2m, restrict.rhs = restr2q )
> print( summary( fitsur4r2 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  67.0475 3.94397 1.98594 0.749929 0.720509
supply 20 16 108.2171 6.76357 2.60069 0.596377 0.520698

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.76491 4.60580
supply 4.60580 5.98832

The covariance matrix of the residuals
        demand  supply
demand 3.94397 5.16157
supply 5.16157 6.76357

The correlations of the residuals
         demand   supply
demand 1.000000 0.966822
supply 0.966822 1.000000

The determinant of the residual covariance matrix: 0.0335271
OLS R-squared value of the system: 0.673153
McElroy's R-squared value for the system: 0.707639

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 92.526596   7.289606 12.692949        0 ***
price       -0.230404   0.082692 -2.786302 0.008552  **
income       0.322103   0.016626 19.373258        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.985944 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.047517 MSE: 3.943972 Root MSE: 1.985944 
Multiple R-Squared: 0.749929 Adjusted R-Squared: 0.720509 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 48.701089   7.403429   6.57818        0 ***
price        0.269596   0.082692  3.260266 0.002483  **
farmPrice    0.226135   0.016607 13.616644        0 ***
trend        0.322103   0.016626 19.373258        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.600686 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 108.217072 MSE: 6.763567 Root MSE: 2.600686 
Multiple R-Squared: 0.596377 Adjusted R-Squared: 0.520698 

> 
> ## *************** SUR with 2 restrictions (methodRCov = "max") **************
> fitsur4r3 <- systemfit( system, "SUR", data = Kmenta, methodRCov = "max",
+    restrict.matrix = restr2m, restrict.rhs = restr2q,
+    returnModelMatrix = TRUE )
> print( summary( fitsur4r3 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.4048 3.90616 1.97640 0.752327 0.723189
supply 20 16 106.9240 6.68275 2.58510 0.601200 0.526425

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.76491 4.59292
supply 4.59292 5.98832

The covariance matrix of the residuals
        demand  supply
demand 3.90616 5.08791
supply 5.08791 6.68275

The correlations of the residuals
       demand supply
demand 1.0000 0.9661
supply 0.9661 1.0000

The determinant of the residual covariance matrix: 0.217064
OLS R-squared value of the system: 0.676763
McElroy's R-squared value for the system: 0.701594

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.197751   7.316811 12.737482        0 ***
price       -0.238111   0.082935 -2.871059   0.0069  **
income       0.323126   0.017039 18.963348        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.976402 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.404772 MSE: 3.906163 Root MSE: 1.976402 
Multiple R-Squared: 0.752327 Adjusted R-Squared: 0.723189 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 49.367559   7.438141  6.637083        0 ***
price        0.261889   0.082935  3.157772 0.003267  **
farmPrice    0.227104   0.017083  13.29439        0 ***
trend        0.323126   0.017039 18.963348        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.585101 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 106.923958 MSE: 6.682747 Root MSE: 2.585101 
Multiple R-Squared: 0.6012 Adjusted R-Squared: 0.526425 

> 
> ## *************** WSUR with 2 restrictions (EViews-like) **************
> fitsur4we <- systemfit( system, "SUR", data = Kmenta, methodRCov = "noDfCor",
+    restrict.matrix = restr2m, restrict.rhs = restr2q, residCovWeighted = TRUE )
> summary( fitsur4we )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  63.9355 3.76091 1.93931 0.761536 0.733482
supply 20 16 101.2010 6.32507 2.51497 0.622545 0.551772

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.18351 3.68711
supply 3.68711 4.81075

The covariance matrix of the residuals
        demand  supply
demand 3.19678 3.87025
supply 3.87025 5.06005

The correlations of the residuals
         demand   supply
demand 1.000000 0.962289
supply 0.962289 1.000000

The determinant of the residual covariance matrix: 1.19701
OLS R-squared value of the system: 0.692041
McElroy's R-squared value for the system: 0.654129

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 96.941374   6.889437 14.071015        0 ***
price       -0.281365   0.076619  -3.67226 0.000796 ***
income         0.3291   0.018107 18.175434        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.939307 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 63.935526 MSE: 3.760913 Root MSE: 1.939307 
Multiple R-Squared: 0.761536 Adjusted R-Squared: 0.733482 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 52.996312   7.065215  7.501019        0 ***
price        0.218635   0.076619  2.853523 0.007215  **
farmPrice    0.233674   0.018314 12.759505        0 ***
trend          0.3291   0.018107 18.175434        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.514968 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 101.201048 MSE: 6.325065 Root MSE: 2.514968 
Multiple R-Squared: 0.622545 Adjusted R-Squared: 0.551772 

> 
> 
> ## *************** SUR with 2 restrictions via R and restrict.regMat ****************
> fitsur5 <- systemfit( system, "SUR", data = Kmenta, restrict.matrix = restr3m,
+    restrict.rhs = restr3q, restrict.regMat = tc,
+    returnModelMatrix = TRUE )
> print( summary( fitsur5 ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  63.9868 3.76393 1.94009 0.761345 0.733268
supply 20 16 101.4731 6.34207 2.51835 0.621530 0.550567

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.76491 4.45579
supply 4.45579 5.98832

The covariance matrix of the residuals
        demand  supply
demand 3.76393 4.70247
supply 4.70247 6.34207

The correlations of the residuals
         demand   supply
demand 1.000000 0.962476
supply 0.962476 1.000000

The determinant of the residual covariance matrix: 1.75786
OLS R-squared value of the system: 0.691438
McElroy's R-squared value for the system: 0.689596

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 96.827525   7.466548 12.968179        0 ***
price       -0.279771   0.083971 -3.331764 0.002046  **
income       0.328631   0.020632 15.928109        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.940085 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 63.986801 MSE: 3.763929 Root MSE: 1.940085 
Multiple R-Squared: 0.761345 Adjusted R-Squared: 0.733268 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 52.938648   7.665482  6.906108        0 ***
price        0.220229   0.083971  2.622692 0.012832   *
farmPrice    0.232671   0.021215 10.967325        0 ***
trend        0.328631   0.020632 15.928109        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.518346 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 101.473089 MSE: 6.342068 Root MSE: 2.518346 
Multiple R-Squared: 0.62153 Adjusted R-Squared: 0.550567 

> # the same with symbolically specified restrictions
> fitsur5Sym <- systemfit( system, "SUR", data = Kmenta,
+    restrict.matrix = restrict3, restrict.regMat = tc,
+    returnModelMatrix = TRUE )
> all.equal( fitsur5, fitsur5Sym )
[1] "Component 2: target, current do not match when deparsed"
> 
> ## *************** SUR with 2 restrictions via R and restrict.regMat (EViews-like) **************
> fitsur5e <- systemfit( system, "SUR", data = Kmenta, methodRCov = "noDfCor",
+    restrict.matrix = restr3m, restrict.rhs = restr3q, restrict.regMat = tc )
> print( summary( fitsur5e ) )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE      R2   Adj R2
demand 20 17  63.8111 3.75360 1.93742 0.76200 0.734000
supply 20 16 100.8351 6.30219 2.51042 0.62391 0.553393

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.20017 3.67434
supply 3.67434 4.79065

The covariance matrix of the residuals
        demand  supply
demand 3.19056 3.85826
supply 3.85826 5.04176

The correlations of the residuals
         demand   supply
demand 1.000000 0.961984
supply 0.961984 1.000000

The determinant of the residual covariance matrix: 1.19981
OLS R-squared value of the system: 0.692955
McElroy's R-squared value for the system: 0.652956

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  97.26781   6.920022 14.055997        0 ***
price       -0.285096   0.076719  -3.71611 0.000704 ***
income       0.329579    0.01845 17.863736        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.93742 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 63.811125 MSE: 3.753596 Root MSE: 1.93742 
Multiple R-Squared: 0.762 Adjusted R-Squared: 0.734 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 53.303998   7.104496  7.502855        0 ***
price        0.214904   0.076719  2.801176 0.008238  **
farmPrice    0.234299   0.018653 12.561069        0 ***
trend        0.329579    0.01845 17.863736        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.510417 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 100.835103 MSE: 6.302194 Root MSE: 2.510417 
Multiple R-Squared: 0.62391 Adjusted R-Squared: 0.553393 

> 
> ## ************ WSUR with 2 restrictions via R and restrict.regMat ************
> fitsur5w <- systemfit( system, "SUR", data = Kmenta, restrict.matrix = restr3m,
+    restrict.rhs = restr3q, restrict.regMat = tc, residCovWeighted = TRUE )
> summary( fitsur5w )

systemfit results 
method: SUR 

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  64.1601 3.77412 1.94271 0.760699 0.732546
supply 20 16 101.9671 6.37295 2.52447 0.619688 0.548379

The covariance matrix of the residuals used for estimation
       demand  supply
demand 3.7433 4.47340
supply 4.4734 6.01672

The covariance matrix of the residuals
        demand  supply
demand 3.77412 4.72213
supply 4.72213 6.37295

The correlations of the residuals
         demand   supply
demand 1.000000 0.962852
supply 0.962852 1.000000

The determinant of the residual covariance matrix: 1.75379
OLS R-squared value of the system: 0.690193
McElroy's R-squared value for the system: 0.69107

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 96.442138   7.423367 12.991697        0 ***
price       -0.275275    0.08378 -3.285708 0.002318  **
income       0.327973   0.020233 16.209765        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.94271 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 64.16009 MSE: 3.774123 Root MSE: 1.94271 
Multiple R-Squared: 0.760699 Adjusted R-Squared: 0.732546 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 52.576104   7.609854   6.90895        0 ***
price        0.224725    0.08378  2.682336 0.011083   *
farmPrice    0.231841   0.020811 11.140336        0 ***
trend        0.327973   0.020233 16.209765        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.52447 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 101.967146 MSE: 6.372947 Root MSE: 2.52447 
Multiple R-Squared: 0.619688 Adjusted R-Squared: 0.548379 

> 
> 
> ## ************** iterated SUR ****************************
> fitsuri1 <- systemfit( system2, "SUR", data = Kmenta, maxit = 100 )
> print( summary( fitsuri1 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 6 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.2863 3.89919 1.97464 0.752769 0.723683
supply 20 16 41.4111 2.58819 1.60879 0.937938 0.926301

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.89916 -2.38058
supply -2.38058  2.58815

The covariance matrix of the residuals
         demand   supply
demand  3.89919 -2.38063
supply -2.38063  2.58819

The correlations of the residuals
          demand    supply
demand  1.000000 -0.749386
supply -0.749386  1.000000

The determinant of the residual covariance matrix: 4.42447
OLS R-squared value of the system: 0.884861
McElroy's R-squared value for the system: 0.958178

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 94.053729   7.405122 12.701172        0 ***
price       -0.235545   0.088182 -2.671109 0.016117   *
income       0.311718   0.045744   6.81435    3e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.974637 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.286284 MSE: 3.899193 Root MSE: 1.974637 
Multiple R-Squared: 0.752769 Adjusted R-Squared: 0.723683 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept) 89.298175   3.382237  26.402106        0 ***
income       0.665484   0.042298  15.733148        0 ***
farmPrice   -0.474229    0.03724 -12.734343        0 ***
trend       -0.796644    0.06557 -12.149612        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.608786 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.411056 MSE: 2.588191 Root MSE: 1.608786 
Multiple R-Squared: 0.937938 Adjusted R-Squared: 0.926301 

> 
> ## ************** iterated SUR (EViews-like) *****************
> fitsuri1e <- systemfit( system2, "SUR", data = Kmenta, methodRCov = "noDfCor",
+    maxit = 100 )
> print( summary( fitsuri1e, useDfSys = TRUE ) )

systemfit results 
method: iterated SUR 

convergence achieved after 7 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.7421 3.92601 1.98141 0.751068 0.721782
supply 20 16 41.1759 2.57349 1.60421 0.938290 0.926720

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.33709 -1.96546
supply -1.96546  2.05879

The covariance matrix of the residuals
         demand   supply
demand  3.33711 -1.96547
supply -1.96547  2.05879

The correlations of the residuals
          demand    supply
demand  1.000000 -0.749851
supply -0.749851  1.000000

The determinant of the residual covariance matrix: 3.00734
OLS R-squared value of the system: 0.884625
McElroy's R-squared value for the system: 0.959109

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.619279   6.849931 13.667186        0 ***
price       -0.229539   0.081568 -2.814078 0.008182  **
income       0.310014   0.042317  7.325931        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.981415 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.742101 MSE: 3.926006 Root MSE: 1.981415 
Multiple R-Squared: 0.751068 Adjusted R-Squared: 0.721782 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept)    89.269   3.016465  29.593913        0 ***
income       0.664062   0.037723  17.603683        0 ***
farmPrice   -0.473003   0.033209 -14.243301        0 ***
trend       -0.791932   0.058461 -13.546225        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.604211 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.175862 MSE: 2.573491 Root MSE: 1.604211 
Multiple R-Squared: 0.93829 Adjusted R-Squared: 0.92672 

> 
> ## ************** iterated SUR (methodRCov = "Theil") ****************************
> fitsuri1r2 <- systemfit( system2, "SUR", data = Kmenta, maxit = 100,
+    methodRCov = "Theil" )
> print( summary( fitsuri1r2 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 7 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.9392 3.93760 1.98434 0.750333 0.720961
supply 20 16 41.7645 2.61028 1.61564 0.937408 0.925672

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.93758 -2.50632
supply -2.50632  2.61027

The covariance matrix of the residuals
         demand   supply
demand  3.93760 -2.50634
supply -2.50634  2.61028

The correlations of the residuals
          demand    supply
demand  1.000000 -0.754481
supply -0.754481  1.000000

The determinant of the residual covariance matrix: 3.99651
OLS R-squared value of the system: 0.883785
McElroy's R-squared value for the system: 0.960621

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.440458   7.382104 12.657699        0 ***
price       -0.227067   0.087661 -2.590284 0.019059   *
income       0.309312   0.045821  6.750372    3e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.984339 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.939212 MSE: 3.937601 Root MSE: 1.984339 
Multiple R-Squared: 0.750333 Adjusted R-Squared: 0.720961 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept) 89.160176   3.386831  26.325546        0 ***
income       0.663534   0.042265  15.699458        0 ***
farmPrice   -0.470988   0.036942 -12.749498        0 ***
trend       -0.795203   0.064253 -12.376104        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.615636 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.764463 MSE: 2.610279 Root MSE: 1.615636 
Multiple R-Squared: 0.937408 Adjusted R-Squared: 0.925672 

> 
> ## ************** iterated SUR (methodRCov="Theil", useDfSys=TRUE) *****************
> fitsuri1e2 <- systemfit( system2, "SUR", data = Kmenta, methodRCov = "Theil",
+    maxit = 100, returnModelMatrix = TRUE )
> print( summary( fitsuri1e2, useDfSys = TRUE ) )

systemfit results 
method: iterated SUR 

convergence achieved after 7 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.9392 3.93760 1.98434 0.750333 0.720961
supply 20 16 41.7645 2.61028 1.61564 0.937408 0.925672

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.93758 -2.50632
supply -2.50632  2.61027

The covariance matrix of the residuals
         demand   supply
demand  3.93760 -2.50634
supply -2.50634  2.61028

The correlations of the residuals
          demand    supply
demand  1.000000 -0.754481
supply -0.754481  1.000000

The determinant of the residual covariance matrix: 3.99651
OLS R-squared value of the system: 0.883785
McElroy's R-squared value for the system: 0.960621

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.440458   7.382104 12.657699        0 ***
price       -0.227067   0.087661 -2.590284 0.014166   *
income       0.309312   0.045821  6.750372        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.984339 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.939212 MSE: 3.937601 Root MSE: 1.984339 
Multiple R-Squared: 0.750333 Adjusted R-Squared: 0.720961 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept) 89.160176   3.386831  26.325546        0 ***
income       0.663534   0.042265  15.699458        0 ***
farmPrice   -0.470988   0.036942 -12.749498        0 ***
trend       -0.795203   0.064253 -12.376104        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.615636 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.764463 MSE: 2.610279 Root MSE: 1.615636 
Multiple R-Squared: 0.937408 Adjusted R-Squared: 0.925672 

> 
> ## ************** iterated SUR (methodRCov = "max") ****************************
> fitsuri1r3 <- systemfit( system2, "SUR", data = Kmenta, maxit = 100,
+    methodRCov = "max" )
> print( summary( fitsuri1r3 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 7 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.8258 3.93093 1.98266 0.750756 0.721433
supply 20 16 41.7081 2.60676 1.61455 0.937493 0.925773

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.93091 -2.48679
supply -2.48679  2.60675

The covariance matrix of the residuals
         demand   supply
demand  3.93093 -2.48681
supply -2.48681  2.60676

The correlations of the residuals
          demand    supply
demand  1.000000 -0.753668
supply -0.753668  1.000000

The determinant of the residual covariance matrix: 4.06276
OLS R-squared value of the system: 0.883966
McElroy's R-squared value for the system: 0.960247

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.542723   7.385832 12.665157        0 ***
price       -0.228481   0.087747 -2.603847 0.018532   *
income       0.309713   0.045807  6.761201    3e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.982657 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.825809 MSE: 3.93093 Root MSE: 1.982657 
Multiple R-Squared: 0.750756 Adjusted R-Squared: 0.721433 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept) 89.182975    3.38614  26.337655        0 ***
income       0.663871   0.042272  15.704739        0 ***
farmPrice   -0.471532   0.036993 -12.746565        0 ***
trend       -0.795507   0.064465 -12.340106        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.614546 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.708116 MSE: 2.606757 Root MSE: 1.614546 
Multiple R-Squared: 0.937493 Adjusted R-Squared: 0.925773 

> 
> ## ************** iterated WSUR (methodRCov = "max") ****************************
> fitsuri1wr3 <- systemfit( system2, "SUR", data = Kmenta, maxit = 100,
+    methodRCov = "max", residCovWeighted = TRUE )
> summary( fitsuri1wr3 )

systemfit results 
method: iterated SUR 

convergence achieved after 7 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17 66.8258 3.93093 1.98266 0.750756 0.721433
supply 20 16 41.7081 2.60676 1.61455 0.937493 0.925773

The covariance matrix of the residuals used for estimation
         demand   supply
demand  3.93091 -2.48679
supply -2.48679  2.60675

The covariance matrix of the residuals
         demand   supply
demand  3.93093 -2.48681
supply -2.48681  2.60676

The correlations of the residuals
          demand    supply
demand  1.000000 -0.753668
supply -0.753668  1.000000

The determinant of the residual covariance matrix: 4.06276
OLS R-squared value of the system: 0.883966
McElroy's R-squared value for the system: 0.960247

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 93.542723   7.385832 12.665157        0 ***
price       -0.228481   0.087747 -2.603847 0.018532   *
income       0.309713   0.045807  6.761201    3e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.982657 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.825809 MSE: 3.93093 Root MSE: 1.982657 
Multiple R-Squared: 0.750756 Adjusted R-Squared: 0.721433 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error    t value Pr(>|t|)    
(Intercept) 89.182975    3.38614  26.337655        0 ***
income       0.663871   0.042272  15.704739        0 ***
farmPrice   -0.471532   0.036993 -12.746565        0 ***
trend       -0.795507   0.064465 -12.340106        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.614546 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 41.708116 MSE: 2.606757 Root MSE: 1.614546 
Multiple R-Squared: 0.937493 Adjusted R-Squared: 0.925773 

> 
> 
> ## *********** iterated SUR with restriction *******************
> fitsuri2 <- systemfit( system2, "SUR", data = Kmenta, restrict.matrix = restrm,
+    maxit = 100 )
> print( summary( fitsuri2 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 21 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  67.0238  3.94258 1.98559 0.750018 0.720608
supply 20 16 520.3287 32.52054 5.70268 0.220191 0.073977

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.94252  4.24117
supply 4.24117 32.52034

The covariance matrix of the residuals
        demand   supply
demand 3.94258  4.24148
supply 4.24148 32.52054

The correlations of the residuals
         demand   supply
demand 1.000000 0.374583
supply 0.374583 1.000000

The determinant of the residual covariance matrix: 110.225
OLS R-squared value of the system: 0.372061
McElroy's R-squared value for the system: 0.66924

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

              Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 107.367833   7.498581 14.318419        0 ***
price        -0.394459   0.091188 -4.325773 0.000126 ***
income        0.338174   0.046617  7.254284        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.985592 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.023783 MSE: 3.942575 Root MSE: 1.985592 
Multiple R-Squared: 0.750018 Adjusted R-Squared: 0.720608 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 85.044826  12.106893  7.024496        0 ***
income       0.312488   0.123346  2.533433 0.016074   *
farmPrice   -0.197207   0.115708 -1.704352 0.097439   .
trend        0.338174   0.046617  7.254284        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.702679 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 520.328675 MSE: 32.520542 Root MSE: 5.702679 
Multiple R-Squared: 0.220191 Adjusted R-Squared: 0.073977 

> 
> ## *********** iterated SUR with restriction (EViews-like) ***************
> fitsuri2e <- systemfit( system2, "SUR", data = Kmenta, restrict.matrix = restrm,
+    methodRCov = "noDfCor", maxit = 100, returnModelMatrix = TRUE )
> print( summary( fitsuri2e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 22 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  67.4702  3.96884 1.99219 0.748353 0.718747
supply 20 16 520.2049 32.51281 5.70200 0.220377 0.074197

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.37345  3.57767
supply 3.57767 26.01003

The covariance matrix of the residuals
        demand   supply
demand 3.37351  3.57801
supply 3.57801 26.01025

The correlations of the residuals
         demand   supply
demand 1.000000 0.381969
supply 0.381969 1.000000

The determinant of the residual covariance matrix: 74.9437
OLS R-squared value of the system: 0.371716
McElroy's R-squared value for the system: 0.664223

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

              Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 107.805111   6.927003 15.563024        0 ***
price         -0.39858   0.084288 -4.728796  3.8e-05 ***
income        0.337917   0.043115  7.837628        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.992194 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.470241 MSE: 3.968838 Root MSE: 1.992194 
Multiple R-Squared: 0.748353 Adjusted R-Squared: 0.718747 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 85.107081  10.828732  7.859377        0 ***
income        0.31064   0.110145  2.820283  0.00795  **
farmPrice   -0.195958   0.103427 -1.894652 0.066669   .
trend        0.337917   0.043115  7.837628        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.702 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 520.204913 MSE: 32.512807 Root MSE: 5.702 
Multiple R-Squared: 0.220377 Adjusted R-Squared: 0.074197 

> 
> ## *********** iterated WSUR with restriction *******************
> fitsuri2w <- systemfit( system2, "SUR", data = Kmenta, restrict.matrix = restrm,
+    maxit = 100, residCovWeighted = TRUE )
> summary( fitsuri2w )

systemfit results 
method: iterated SUR 

convergence achieved after 18 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  67.0232  3.94254 1.98558 0.750020 0.720611
supply 20 16 520.3267 32.52042 5.70267 0.220194 0.073980

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.94246  4.24086
supply 4.24086 32.52014

The covariance matrix of the residuals
        demand   supply
demand 3.94254  4.24128
supply 4.24128 32.52042

The correlations of the residuals
         demand   supply
demand 1.000000 0.374568
supply 0.374568 1.000000

The determinant of the residual covariance matrix: 110.225
OLS R-squared value of the system: 0.372064
McElroy's R-squared value for the system: 0.669238

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 107.36724   7.498563 14.318374        0 ***
price       -0.394451   0.091188 -4.325697 0.000126 ***
income       0.338172   0.046617  7.254288        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.985583 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.023202 MSE: 3.942541 Root MSE: 1.985583 
Multiple R-Squared: 0.75002 Adjusted R-Squared: 0.720611 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 85.044807   12.10686  7.024514        0 ***
income       0.312492   0.123346  2.533458 0.016073   *
farmPrice    -0.19721   0.115708 -1.704373 0.097435   .
trend        0.338172   0.046617  7.254288        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.702668 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 520.326669 MSE: 32.520417 Root MSE: 5.702668 
Multiple R-Squared: 0.220194 Adjusted R-Squared: 0.07398 

> 
> 
> ## *********** iterated SUR with restriction via restrict.regMat ********************
> fitsuri3 <- systemfit( system2, "SUR", data = Kmenta, restrict.regMat = tc,
+    maxit = 100 )
> print( summary( fitsuri3 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 21 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  67.0238  3.94258 1.98559 0.750018 0.720608
supply 20 16 520.3287 32.52054 5.70268 0.220191 0.073977

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.94252  4.24117
supply 4.24117 32.52034

The covariance matrix of the residuals
        demand   supply
demand 3.94258  4.24148
supply 4.24148 32.52054

The correlations of the residuals
         demand   supply
demand 1.000000 0.374583
supply 0.374583 1.000000

The determinant of the residual covariance matrix: 110.225
OLS R-squared value of the system: 0.372061
McElroy's R-squared value for the system: 0.66924

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

              Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 107.367833   7.498581 14.318419        0 ***
price        -0.394459   0.091188 -4.325773 0.000126 ***
income        0.338174   0.046617  7.254284        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.985592 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.023783 MSE: 3.942575 Root MSE: 1.985592 
Multiple R-Squared: 0.750018 Adjusted R-Squared: 0.720608 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 85.044826  12.106893  7.024496        0 ***
income       0.312488   0.123346  2.533433 0.016074   *
farmPrice   -0.197207   0.115708 -1.704352 0.097439   .
trend        0.338174   0.046617  7.254284        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.702679 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 520.328675 MSE: 32.520542 Root MSE: 5.702679 
Multiple R-Squared: 0.220191 Adjusted R-Squared: 0.073977 

> 
> ## *********** iterated SUR with restriction via restrict.regMat (EViews-like) ***************
> fitsuri3e <- systemfit( system2, "SUR", data = Kmenta, restrict.regMat = tc,
+    methodRCov = "noDfCor", maxit = 100, returnModelMatrix = TRUE )
> print( summary( fitsuri3e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 22 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  67.4702  3.96884 1.99219 0.748353 0.718747
supply 20 16 520.2049 32.51281 5.70200 0.220377 0.074197

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.37345  3.57767
supply 3.57767 26.01003

The covariance matrix of the residuals
        demand   supply
demand 3.37351  3.57801
supply 3.57801 26.01025

The correlations of the residuals
         demand   supply
demand 1.000000 0.381969
supply 0.381969 1.000000

The determinant of the residual covariance matrix: 74.9437
OLS R-squared value of the system: 0.371716
McElroy's R-squared value for the system: 0.664223

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

              Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 107.805111   6.927003 15.563024        0 ***
price         -0.39858   0.084288 -4.728796  3.8e-05 ***
income        0.337917   0.043115  7.837628        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.992194 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.470241 MSE: 3.968838 Root MSE: 1.992194 
Multiple R-Squared: 0.748353 Adjusted R-Squared: 0.718747 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 85.107081  10.828732  7.859377        0 ***
income        0.31064   0.110145  2.820283  0.00795  **
farmPrice   -0.195958   0.103427 -1.894652 0.066669   .
trend        0.337917   0.043115  7.837628        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.702 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 520.204913 MSE: 32.512807 Root MSE: 5.702 
Multiple R-Squared: 0.220377 Adjusted R-Squared: 0.074197 

> 
> ## *********** iterated WSUR with restriction via restrict.regMat (EViews-like) ***************
> fitsuri3we <- systemfit( system2, "SUR", data = Kmenta, restrict.regMat = tc,
+    methodRCov = "noDfCor", maxit = 100, residCovWeighted = TRUE )
> summary( fitsuri3we )

systemfit results 
method: iterated SUR 

convergence achieved after 20 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  67.4707  3.96886 1.99220 0.748351 0.718745
supply 20 16 520.2063 32.51289 5.70201 0.220375 0.074195

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.37348  3.57784
supply 3.57784 26.01014

The covariance matrix of the residuals
        demand   supply
demand 3.37353  3.57812
supply 3.57812 26.01031

The correlations of the residuals
         demand   supply
demand 1.000000 0.381979
supply 0.381979 1.000000

The determinant of the residual covariance matrix: 74.9437
OLS R-squared value of the system: 0.371714
McElroy's R-squared value for the system: 0.664224

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

              Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 107.805519   6.927015 15.563056        0 ***
price        -0.398586   0.084288 -4.728852  3.8e-05 ***
income        0.337918   0.043115  7.837624        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.9922 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.470662 MSE: 3.968862 Root MSE: 1.9922 
Multiple R-Squared: 0.748351 Adjusted R-Squared: 0.718745 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 85.107093  10.828751  7.859364        0 ***
income       0.310638   0.110145  2.820265  0.00795  **
farmPrice   -0.195956   0.103427 -1.894636 0.066671   .
trend        0.337918   0.043115  7.837624        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.702008 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 520.20628 MSE: 32.512892 Root MSE: 5.702008 
Multiple R-Squared: 0.220375 Adjusted R-Squared: 0.074195 

> 
> 
> ## *************** iterated SUR with 2 restrictions ***************************
> fitsurio4 <- systemfit( system, "SUR", data = Kmenta, restrict.matrix = restr2m,
+    restrict.rhs = restr2q, maxit = 100 )
> print( summary( fitsurio4 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 10 iterations

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  67.2057 3.95327 1.98828 0.749340 0.719850
supply 20 16 109.2337 6.82710 2.61287 0.592585 0.516195

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.95325 5.02451
supply 5.02451 6.82706

The covariance matrix of the residuals
        demand  supply
demand 3.95327 5.02454
supply 5.02454 6.82710

The correlations of the residuals
         demand   supply
demand 1.000000 0.967163
supply 0.967163 1.000000

The determinant of the residual covariance matrix: 1.7434
OLS R-squared value of the system: 0.670962
McElroy's R-squared value for the system: 0.704623

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 92.426174   7.354296 12.567644        0 ***
price       -0.227612   0.085013 -2.677361  0.01122   *
income        0.32027   0.018494 17.317867        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.988284 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.205652 MSE: 3.953274 Root MSE: 1.988284 
Multiple R-Squared: 0.74934 Adjusted R-Squared: 0.71985 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 48.729451    7.45869  6.533246        0 ***
price        0.272388   0.085013  3.204058 0.002887  **
farmPrice     0.22315   0.018976 11.759398        0 ***
trend         0.32027   0.018494 17.317867        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.612873 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 109.233669 MSE: 6.827104 Root MSE: 2.612873 
Multiple R-Squared: 0.592585 Adjusted R-Squared: 0.516195 

> fitsuri4 <- systemfit( system2, "SUR", data = Kmenta, restrict.matrix = restr2m,
+    restrict.rhs = restr2q, maxit = 100 )
> print( summary( fitsuri4 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 19 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  65.5317  3.85480 1.96337 0.755583 0.726828
supply 20 16 509.3450 31.83406 5.64217 0.236652 0.093524

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.85483  1.22891
supply 1.22891 31.83363

The covariance matrix of the residuals
        demand   supply
demand 3.85480  1.22921
supply 1.22921 31.83406

The correlations of the residuals
         demand   supply
demand 1.000000 0.110963
supply 0.110963 1.000000

The determinant of the residual covariance matrix: 121.203
OLS R-squared value of the system: 0.385399
McElroy's R-squared value for the system: 0.636563

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.035578   6.743699 14.537359        0 ***
price       -0.264591    0.07773 -3.403959  0.00168  **
income        0.30068   0.043628  6.891872        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.963366 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 65.531682 MSE: 3.854805 Root MSE: 1.963366 
Multiple R-Squared: 0.755583 Adjusted R-Squared: 0.726828 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 90.004648  10.436748  8.623821        0 ***
income       0.235409    0.07773  3.028524 0.004594  **
farmPrice   -0.166658   0.110832 -1.503703 0.141629    
trend         0.30068   0.043628  6.891872        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.642168 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 509.345019 MSE: 31.834064 Root MSE: 5.642168 
Multiple R-Squared: 0.236652 Adjusted R-Squared: 0.093524 

> 
> ## *************** iterated SUR with 2 restrictions (EViews-like) **************
> fitsurio4e <- systemfit( system, "SUR", data = Kmenta, methodRCov = "noDfCor",
+    restrict.matrix = restr2m, restrict.rhs = restr2q, maxit = 100 )
> print( summary( fitsurio4e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 9 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.265 3.89794 1.97432 0.752848 0.723771
supply 20 16 106.722 6.67014 2.58266 0.601952 0.527318

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.31323 4.06161
supply 4.06161 5.33608

The covariance matrix of the residuals
        demand  supply
demand 3.31325 4.06163
supply 4.06163 5.33612

The correlations of the residuals
         demand   supply
demand 1.000000 0.965964
supply 0.965964 1.000000

The determinant of the residual covariance matrix: 1.18302
OLS R-squared value of the system: 0.6774
McElroy's R-squared value for the system: 0.664522

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  93.35957    6.85761  13.61401        0 ***
price       -0.239757   0.077937 -3.076298 0.004053  **
income       0.323155   0.016311 19.811891        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.97432 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.264982 MSE: 3.89794 Root MSE: 1.97432 
Multiple R-Squared: 0.752848 Adjusted R-Squared: 0.723771 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 49.545591   6.972681  7.105673        0 ***
price        0.260243   0.077937  3.339147 0.002005  **
farmPrice    0.226962   0.016434 13.810256        0 ***
trend        0.323155   0.016311 19.811891        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.582662 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 106.722321 MSE: 6.670145 Root MSE: 2.582662 
Multiple R-Squared: 0.601952 Adjusted R-Squared: 0.527318 

> fitsuri4e <- systemfit( system2, "SUR", data = Kmenta, methodRCov = "noDfCor",
+    restrict.matrix = restr2m, restrict.rhs = restr2q, maxit = 100 )
> print( summary( fitsuri4e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 20 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  65.9947  3.88204 1.97029 0.753856 0.724898
supply 20 16 504.0662 31.50414 5.61285 0.244563 0.102919

The covariance matrix of the residuals used for estimation
         demand    supply
demand 3.299759  0.875937
supply 0.875937 25.203031

The covariance matrix of the residuals
        demand   supply
demand 3.29974  0.87614
supply 0.87614 25.20331

The correlations of the residuals
          demand    supply
demand 1.0000000 0.0960738
supply 0.0960738 1.0000000

The determinant of the residual covariance matrix: 82.3967
OLS R-squared value of the system: 0.390548
McElroy's R-squared value for the system: 0.629112

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 97.629728   6.155972 15.859351        0 ***
price       -0.257559    0.07091 -3.632214 0.000891 ***
income       0.297629   0.040327  7.380428        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.97029 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 65.994726 MSE: 3.882043 Root MSE: 1.97029 
Multiple R-Squared: 0.753856 Adjusted R-Squared: 0.724898 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 89.543697   9.337169  9.590027        0 ***
income       0.242441    0.07091  3.419018 0.001612  **
farmPrice   -0.168655   0.098793 -1.707147 0.096653   .
trend        0.297629   0.040327  7.380428        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.612855 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 504.066186 MSE: 31.504137 Root MSE: 5.612855 
Multiple R-Squared: 0.244563 Adjusted R-Squared: 0.102919 

> 
> ## *************** iterated WSUR with 2 restrictions ***************************
> fitsurio4w <- systemfit( system, "SUR", data = Kmenta, restrict.matrix = restr2m,
+    restrict.rhs = restr2q, maxit = 100, residCovWeighted = TRUE )
> summary( fitsurio4w )

systemfit results 
method: iterated SUR 

convergence achieved after 10 iterations

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  67.2057 3.95327 1.98828 0.749340 0.719850
supply 20 16 109.2337 6.82711 2.61287 0.592585 0.516195

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.95326 5.02451
supply 5.02451 6.82706

The covariance matrix of the residuals
        demand  supply
demand 3.95327 5.02454
supply 5.02454 6.82711

The correlations of the residuals
         demand   supply
demand 1.000000 0.967163
supply 0.967163 1.000000

The determinant of the residual covariance matrix: 1.7434
OLS R-squared value of the system: 0.670962
McElroy's R-squared value for the system: 0.704623

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 92.426163   7.354297 12.567641        0 ***
price       -0.227612   0.085014 -2.677359  0.01122   *
income        0.32027   0.018494 17.317864        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.988284 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.205664 MSE: 3.953274 Root MSE: 1.988284 
Multiple R-Squared: 0.74934 Adjusted R-Squared: 0.71985 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

            Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 48.72944    7.45869  6.533243        0 ***
price       0.272388   0.085014  3.204059 0.002887  **
farmPrice    0.22315   0.018976 11.759396        0 ***
trend        0.32027   0.018494 17.317864        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.612873 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 109.233696 MSE: 6.827106 Root MSE: 2.612873 
Multiple R-Squared: 0.592585 Adjusted R-Squared: 0.516195 

> fitsuri4w <- systemfit( system2, "SUR", data = Kmenta, restrict.matrix = restr2m,
+    restrict.rhs = restr2q, maxit = 100, residCovWeighted = TRUE )
> summary( fitsuri4w )

systemfit results 
method: iterated SUR 

convergence achieved after 18 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  65.5314  3.85479 1.96336 0.755584 0.726829
supply 20 16 509.3490 31.83431 5.64219 0.236646 0.093517

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.85481  1.22919
supply 1.22919 31.83404

The covariance matrix of the residuals
        demand   supply
demand 3.85479  1.22938
supply 1.22938 31.83431

The correlations of the residuals
         demand   supply
demand 1.000000 0.110979
supply 0.110979 1.000000

The determinant of the residual covariance matrix: 121.203
OLS R-squared value of the system: 0.385395
McElroy's R-squared value for the system: 0.636565

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.036064   6.743736 14.537352        0 ***
price       -0.264598   0.077731 -3.404031 0.001679  **
income       0.300681   0.043628  6.891948        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.963362 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 65.53142 MSE: 3.854789 Root MSE: 1.963362 
Multiple R-Squared: 0.755584 Adjusted R-Squared: 0.726829 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  90.00521  10.436769  8.623858        0 ***
income       0.235402   0.077731  3.028435 0.004595  **
farmPrice   -0.166657   0.110833 -1.503687 0.141633    
trend        0.300681   0.043628  6.891948        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.64219 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 509.348991 MSE: 31.834312 Root MSE: 5.64219 
Multiple R-Squared: 0.236646 Adjusted R-Squared: 0.093517 

> 
> 
> ## *************** iterated SUR with 2 restrictions via R and restrict.regMat ****************
> fitsurio5 <- systemfit( system, "SUR", data = Kmenta, restrict.matrix = restr3m,
+    restrict.rhs = restr3q, restrict.regMat = tc, maxit = 100 )
> print( summary( fitsurio5 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 10 iterations

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  67.2057 3.95327 1.98828 0.749340 0.719850
supply 20 16 109.2337 6.82710 2.61287 0.592585 0.516195

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.95325 5.02451
supply 5.02451 6.82706

The covariance matrix of the residuals
        demand  supply
demand 3.95327 5.02454
supply 5.02454 6.82710

The correlations of the residuals
         demand   supply
demand 1.000000 0.967163
supply 0.967163 1.000000

The determinant of the residual covariance matrix: 1.7434
OLS R-squared value of the system: 0.670962
McElroy's R-squared value for the system: 0.704623

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 92.426174   7.354296 12.567644        0 ***
price       -0.227612   0.085013 -2.677361  0.01122   *
income        0.32027   0.018494 17.317867        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.988284 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 67.205652 MSE: 3.953274 Root MSE: 1.988284 
Multiple R-Squared: 0.74934 Adjusted R-Squared: 0.71985 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 48.729451    7.45869  6.533246        0 ***
price        0.272388   0.085013  3.204058 0.002887  **
farmPrice     0.22315   0.018976 11.759398        0 ***
trend         0.32027   0.018494 17.317867        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.612873 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 109.233669 MSE: 6.827104 Root MSE: 2.612873 
Multiple R-Squared: 0.592585 Adjusted R-Squared: 0.516195 

> fitsuri5 <- systemfit( system2, "SUR", data = Kmenta, restrict.matrix = restr3m,
+    restrict.rhs = restr3q, restrict.regMat = tc, maxit = 100 )
> print( summary( fitsuri5 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 19 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  65.5317  3.85480 1.96337 0.755583 0.726828
supply 20 16 509.3450 31.83406 5.64217 0.236652 0.093524

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.85483  1.22891
supply 1.22891 31.83363

The covariance matrix of the residuals
        demand   supply
demand 3.85480  1.22921
supply 1.22921 31.83406

The correlations of the residuals
         demand   supply
demand 1.000000 0.110963
supply 0.110963 1.000000

The determinant of the residual covariance matrix: 121.203
OLS R-squared value of the system: 0.385399
McElroy's R-squared value for the system: 0.636563

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.035578   6.743699 14.537359        0 ***
price       -0.264591    0.07773 -3.403959  0.00168  **
income        0.30068   0.043628  6.891872        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.963366 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 65.531682 MSE: 3.854805 Root MSE: 1.963366 
Multiple R-Squared: 0.755583 Adjusted R-Squared: 0.726828 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 90.004648  10.436748  8.623821        0 ***
income       0.235409    0.07773  3.028524 0.004594  **
farmPrice   -0.166658   0.110832 -1.503703 0.141629    
trend         0.30068   0.043628  6.891872        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.642168 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 509.345019 MSE: 31.834064 Root MSE: 5.642168 
Multiple R-Squared: 0.236652 Adjusted R-Squared: 0.093524 

> 
> ## ********* iterated SUR with 2 restrictions via R and restrict.regMat (EViews-like) **********
> fitsurio5e <- systemfit( system, "SUR", data = Kmenta, methodRCov = "noDfCor",
+    restrict.matrix = restr3m, restrict.rhs = restr3q, restrict.regMat = tc, maxit = 100 )
> print( summary( fitsurio5e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 9 iterations

        N DF     SSR     MSE    RMSE       R2   Adj R2
demand 20 17  66.265 3.89794 1.97432 0.752848 0.723771
supply 20 16 106.722 6.67014 2.58266 0.601952 0.527318

The covariance matrix of the residuals used for estimation
        demand  supply
demand 3.31323 4.06161
supply 4.06161 5.33608

The covariance matrix of the residuals
        demand  supply
demand 3.31325 4.06163
supply 4.06163 5.33612

The correlations of the residuals
         demand   supply
demand 1.000000 0.965964
supply 0.965964 1.000000

The determinant of the residual covariance matrix: 1.18302
OLS R-squared value of the system: 0.6774
McElroy's R-squared value for the system: 0.664522

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  93.35957    6.85761  13.61401        0 ***
price       -0.239757   0.077937 -3.076298 0.004053  **
income       0.323155   0.016311 19.811891        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.97432 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 66.264982 MSE: 3.89794 Root MSE: 1.97432 
Multiple R-Squared: 0.752848 Adjusted R-Squared: 0.723771 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 49.545591   6.972681  7.105673        0 ***
price        0.260243   0.077937  3.339147 0.002005  **
farmPrice    0.226962   0.016434 13.810256        0 ***
trend        0.323155   0.016311 19.811891        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.582662 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 106.722321 MSE: 6.670145 Root MSE: 2.582662 
Multiple R-Squared: 0.601952 Adjusted R-Squared: 0.527318 

> fitsuri5e <- systemfit( system2, "SUR", data = Kmenta, methodRCov = "noDfCor",
+    restrict.matrix = restr3m, restrict.rhs = restr3q, restrict.regMat = tc, maxit = 100 )
> print( summary( fitsuri5e ) )

systemfit results 
method: iterated SUR 

convergence achieved after 20 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  65.9947  3.88204 1.97029 0.753856 0.724898
supply 20 16 504.0662 31.50414 5.61285 0.244563 0.102919

The covariance matrix of the residuals used for estimation
         demand    supply
demand 3.299759  0.875937
supply 0.875937 25.203031

The covariance matrix of the residuals
        demand   supply
demand 3.29974  0.87614
supply 0.87614 25.20331

The correlations of the residuals
          demand    supply
demand 1.0000000 0.0960738
supply 0.0960738 1.0000000

The determinant of the residual covariance matrix: 82.3967
OLS R-squared value of the system: 0.390548
McElroy's R-squared value for the system: 0.629112

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 97.629728   6.155972 15.859351        0 ***
price       -0.257559    0.07091 -3.632214 0.000891 ***
income       0.297629   0.040327  7.380428        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.97029 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 65.994726 MSE: 3.882043 Root MSE: 1.97029 
Multiple R-Squared: 0.753856 Adjusted R-Squared: 0.724898 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 89.543697   9.337169  9.590027        0 ***
income       0.242441    0.07091  3.419018 0.001612  **
farmPrice   -0.168655   0.098793 -1.707147 0.096653   .
trend        0.297629   0.040327  7.380428        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.612855 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 504.066186 MSE: 31.504137 Root MSE: 5.612855 
Multiple R-Squared: 0.244563 Adjusted R-Squared: 0.102919 

> 
> ## ********* iterated SUR with 2 restrictions via R and restrict.regMat (methodRCov="Theil") **********
> fitsurio5r2 <- systemfit( system, "SUR", data = Kmenta, methodRCov = "Theil",
+    restrict.matrix = restr3m, restrict.rhs = restr3q, restrict.regMat = tc,
+    maxit = 100, returnModelMatrix = TRUE )
> print( summary( fitsurio5r2 ) )

systemfit results 
method: iterated SUR 

warning: convergence not achieved after 100 iterations

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  95.7602 5.63295 2.37338 0.642838 0.600819
supply 20 16 157.7373 9.85858 3.13984 0.411679 0.301369

The covariance matrix of the residuals used for estimation
        demand  supply
demand 4.25504 5.28586
supply 5.28586 6.69323

warning: this covariance matrix is NOT positive semidefinit!

The covariance matrix of the residuals
        demand  supply
demand 5.63295 7.56339
supply 7.56339 9.85858

The correlations of the residuals
         demand   supply
demand 1.000000 0.981886
supply 0.981886 1.000000

The determinant of the residual covariance matrix: -1.67203
OLS R-squared value of the system: 0.527259
McElroy's R-squared value for the system: 0.926927

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  78.03416    7.16377 10.892891        0 ***
price       -0.064681   0.081525 -0.793381 0.432902    
income       0.300747   0.013068 23.013486        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.373384 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 95.760152 MSE: 5.63295 Root MSE: 2.373384 
Multiple R-Squared: 0.642838 Adjusted R-Squared: 0.600819 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 34.195763   7.225714   4.73251  3.6e-05 ***
price        0.435319   0.081525  5.339674    6e-06 ***
farmPrice    0.207031   0.012415 16.675571        0 ***
trend        0.300747   0.013068 23.013486        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 3.139838 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 157.737286 MSE: 9.85858 Root MSE: 3.139838 
Multiple R-Squared: 0.411679 Adjusted R-Squared: 0.301369 

> fitsuri5r2 <- systemfit( system2, "SUR", data = Kmenta, methodRCov = "Theil",
+    restrict.matrix = restr3m, restrict.rhs = restr3q, restrict.regMat = tc,
+    maxit = 100, returnModelMatrix = TRUE )
> print( summary( fitsuri5r2 ) )

systemfit results 
method: iterated SUR 

convergence achieved after 21 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  65.4469  3.84982 1.96210 0.755899 0.727181
supply 20 16 510.7500 31.92188 5.64994 0.234546 0.091024

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.84984  1.33977
supply 1.33977 31.92159

The covariance matrix of the residuals
        demand   supply
demand 3.84982  1.33998
supply 1.33998 31.92188

The correlations of the residuals
         demand   supply
demand 1.000000 0.116654
supply 0.116654 1.000000

The determinant of the residual covariance matrix: 121.098
OLS R-squared value of the system: 0.383988
McElroy's R-squared value for the system: 0.637054

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.219953   6.759299 14.531086        0 ***
price       -0.266878   0.077815 -3.429648 0.001565  **
income       0.301134   0.043544  6.915575        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.962096 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 65.44693 MSE: 3.849819 Root MSE: 1.962096 
Multiple R-Squared: 0.755899 Adjusted R-Squared: 0.727181 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 90.216748  10.434182  8.646269        0 ***
income       0.233122   0.077815  2.995846 0.005003  **
farmPrice   -0.166594   0.111097 -1.499543   0.1427    
trend        0.301134   0.043544  6.915575        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.649945 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 510.750031 MSE: 31.921877 Root MSE: 5.649945 
Multiple R-Squared: 0.234546 Adjusted R-Squared: 0.091024 

> 
> ## ********* iterated SUR with 2 restrictions via R and restrict.regMat (methodRCov="max") **********
> # fitsuri5e <- systemfit( system, "SUR", data = Kmenta, methodRCov = "max",
> #    restrict.matrix = restr3m, restrict.rhs = restr3q, restrict.regMat = tc, maxit = 100 )
> # print( summary( fitsuri5e ) )
> # print( round( vcov( fitsuri5e ), digits = 6 ) )
> # disabled, because the estimation does not converge
> 
> ## ********* iterated WSUR with 2 restrictions via R and restrict.regMat (methodRCov="Theil") **********
> fitsurio5wr2 <- systemfit( system, "SUR", data = Kmenta, methodRCov = "Theil",
+    restrict.matrix = restr3m, restrict.rhs = restr3q, restrict.regMat = tc, maxit = 100,
+    residCovWeighted = TRUE )
> summary( fitsurio5wr2 )

systemfit results 
method: iterated SUR 

warning: convergence not achieved after 100 iterations

        N DF      SSR     MSE    RMSE       R2   Adj R2
demand 20 17  95.7602 5.63295 2.37338 0.642838 0.600819
supply 20 16 157.7373 9.85858 3.13984 0.411679 0.301369

The covariance matrix of the residuals used for estimation
        demand  supply
demand 4.25504 5.28586
supply 5.28586 6.69323

warning: this covariance matrix is NOT positive semidefinit!

The covariance matrix of the residuals
        demand  supply
demand 5.63295 7.56339
supply 7.56339 9.85858

The correlations of the residuals
         demand   supply
demand 1.000000 0.981886
supply 0.981886 1.000000

The determinant of the residual covariance matrix: -1.67203
OLS R-squared value of the system: 0.527259
McElroy's R-squared value for the system: 0.926927

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept)  78.03416    7.16377 10.892891        0 ***
price       -0.064681   0.081525 -0.793381 0.432902    
income       0.300747   0.013068 23.013486        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 2.373384 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 95.760152 MSE: 5.63295 Root MSE: 2.373384 
Multiple R-Squared: 0.642838 Adjusted R-Squared: 0.600819 


SUR estimates for 'supply' (equation 2)
Model Formula: consump ~ price + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 34.195763   7.225714   4.73251  3.6e-05 ***
price        0.435319   0.081525  5.339674    6e-06 ***
farmPrice    0.207031   0.012415 16.675571        0 ***
trend        0.300747   0.013068 23.013486        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 3.139838 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 157.737286 MSE: 9.85858 Root MSE: 3.139838 
Multiple R-Squared: 0.411679 Adjusted R-Squared: 0.301369 

> fitsuri5wr2 <- systemfit( system2, "SUR", data = Kmenta, methodRCov = "Theil",
+    restrict.matrix = restr3m, restrict.rhs = restr3q, restrict.regMat = tc, maxit = 100,
+    residCovWeighted = TRUE )
> summary( fitsuri5wr2 )

systemfit results 
method: iterated SUR 

convergence achieved after 19 iterations

        N DF      SSR      MSE    RMSE       R2   Adj R2
demand 20 17  65.4469  3.84982 1.96210 0.755899 0.727181
supply 20 16 510.7501 31.92188 5.64994 0.234546 0.091024

The covariance matrix of the residuals used for estimation
        demand   supply
demand 3.84984  1.33977
supply 1.33977 31.92159

The covariance matrix of the residuals
        demand   supply
demand 3.84982  1.33998
supply 1.33998 31.92188

The correlations of the residuals
         demand   supply
demand 1.000000 0.116655
supply 0.116655 1.000000

The determinant of the residual covariance matrix: 121.098
OLS R-squared value of the system: 0.383988
McElroy's R-squared value for the system: 0.637054

SUR estimates for 'demand' (equation 1)
Model Formula: consump ~ price + income

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 98.219956   6.759299 14.531086        0 ***
price       -0.266878   0.077815 -3.429648 0.001565  **
income       0.301134   0.043544  6.915576        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 1.962096 on 17 degrees of freedom
Number of observations: 20 Degrees of Freedom: 17 
SSR: 65.446929 MSE: 3.849819 Root MSE: 1.962096 
Multiple R-Squared: 0.755899 Adjusted R-Squared: 0.727181 


SUR estimates for 'supply' (equation 2)
Model Formula: price ~ income + farmPrice + trend

             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 90.216751  10.434182  8.646269        0 ***
income       0.233122   0.077815  2.995846 0.005003  **
farmPrice   -0.166594   0.111097 -1.499543   0.1427    
trend        0.301134   0.043544  6.915576        0 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 5.649945 on 16 degrees of freedom
Number of observations: 20 Degrees of Freedom: 16 
SSR: 510.750052 MSE: 31.921878 Root MSE: 5.649945 
Multiple R-Squared: 0.234546 Adjusted R-Squared: 0.091024 

> 
> 
> ## ****************** residuals **************************
> print( residuals( fitsur1e2 ) )
       demand       supply
1   0.6150735  0.418250365
2  -0.5979146 -0.006249244
3   2.4186950  2.756494415
4   1.6091532  1.817267947
5   2.1449077  2.535656907
6   1.3324200  1.533382323
7   1.7266833  2.255808743
8  -2.7179319 -3.568342388
9  -1.2292888 -2.027331772
10  2.0881185  2.532449625
11 -0.7886248 -1.407327588
12 -2.7985190 -3.014159193
13 -1.8312455 -2.301187196
14 -0.4614107  0.018707909
15  1.9736153  2.936239781
16 -3.2912838 -4.004842202
17 -0.6523995 -0.455798174
18 -1.8994646 -3.186833033
19  2.0300772  2.182844209
20  0.3293395  0.984968567
> print( residuals( fitsur1e2$eq[[ 2 ]] ) )
 [1]  0.418250365 -0.006249244  2.756494415  1.817267947  2.535656907
 [6]  1.533382323  2.255808743 -3.568342388 -2.027331772  2.532449625
[11] -1.407327588 -3.014159193 -2.301187196  0.018707909  2.936239781
[16] -4.004842202 -0.455798174 -3.186833033  2.182844209  0.984968567
> 
> print( residuals( fitsur1w ) )
       demand      supply
1   0.6963428  0.47128658
2  -0.5611829  0.01970802
3   2.4551349  2.77817100
4   1.6433543  1.83655816
5   2.1096394  2.47088473
6   1.3044857  1.47727477
7   1.6919313  2.20789778
8  -2.7559303 -3.66625340
9  -1.2533793 -2.09851792
10  2.0779751  2.53205161
11 -0.6754516 -1.27053810
12 -2.6491664 -2.80678219
13 -1.7055854 -2.13054829
14 -0.4187047  0.11496875
15  1.8874732  2.87719909
16 -3.3637096 -4.10133342
17 -0.7622006 -0.56495362
18 -1.9176465 -3.21830157
19  1.9784119  2.16371940
20  0.2182090  0.90750860
> print( residuals( fitsur1w$eq[[ 2 ]] ) )
 [1]  0.47128658  0.01970802  2.77817100  1.83655816  2.47088473  1.47727477
 [7]  2.20789778 -3.66625340 -2.09851792  2.53205161 -1.27053810 -2.80678219
[13] -2.13054829  0.11496875  2.87719909 -4.10133342 -0.56495362 -3.21830157
[19]  2.16371940  0.90750860
> 
> print( residuals( fitsur2e ) )
       demand     supply
1   0.3246481 -0.1997471
2  -0.7291795 -0.4806336
3   2.2884727  2.3423994
4   1.4869317  1.4565571
5   2.2709433  2.5266466
6   1.4322467  1.5373880
7   1.8508733  2.2745415
8  -2.5821399 -3.3222638
9  -1.1431985 -1.8342918
10  2.1243674  2.5115050
11 -1.1930624 -1.8847690
12 -3.3322480 -3.7047656
13 -2.2803065 -2.8128927
14 -0.6140254 -0.1766569
15  2.2814544  3.3528469
16 -3.0324617 -3.4067376
17 -0.2600125  0.2331341
18 -1.8344895 -2.7369076
19  2.2147093  2.6323477
20  0.7264771  1.6922994
> print( residuals( fitsur2e$eq[[ 1 ]] ) )
 [1]  0.3246481 -0.7291795  2.2884727  1.4869317  2.2709433  1.4322467
 [7]  1.8508733 -2.5821399 -1.1431985  2.1243674 -1.1930624 -3.3322480
[13] -2.2803065 -0.6140254  2.2814544 -3.0324617 -0.2600125 -1.8344895
[19]  2.2147093  0.7264771
> 
> print( residuals( fitsur3 ) )
       demand     supply
1   0.3655343 -0.1641572
2  -0.7107000 -0.4515749
3   2.3068054  2.3678808
4   1.5041381  1.4787054
5   2.2532000  2.5348928
6   1.4181930  1.5437315
7   1.8333898  2.2789216
8  -2.6012568 -3.3273818
9  -1.1553184 -1.8389694
10  2.1192643  2.5129700
11 -1.1361256 -1.8685697
12 -3.2571095 -3.6824555
13 -2.2170876 -2.7983641
14 -0.5925403 -0.1747780
15  2.2381167  3.3316004
16 -3.0688987 -3.4358575
17 -0.3152528  0.1993576
18 -1.8436367 -2.7636605
19  2.1887167  2.6041680
20  0.6705679  1.6535405
> print( residuals( fitsur3$eq[[ 2 ]] ) )
 [1] -0.1641572 -0.4515749  2.3678808  1.4787054  2.5348928  1.5437315
 [7]  2.2789216 -3.3273818 -1.8389694  2.5129700 -1.8685697 -3.6824555
[13] -2.7983641 -0.1747780  3.3316004 -3.4358575  0.1993576 -2.7636605
[19]  2.6041680  1.6535405
> 
> print( residuals( fitsur4r3 ) )
       demand     supply
1   0.9340521  0.2646246
2  -0.7214350 -0.6384208
3   2.3479843  2.2315597
4   1.4593124  1.1960545
5   2.1294011  2.4283001
6   1.2526642  1.3175955
7   1.5135833  1.9132980
8  -3.1854992 -4.4248682
9  -1.0968591 -1.8700467
10  2.6187465  3.4829068
11  0.1350519 -0.2603125
12 -2.0965332 -2.2753099
13 -1.4956799 -2.0853535
14 -0.2010695  0.5162951
15  1.9338513  3.4391910
16 -3.4910150 -3.9417300
17 -0.2289596  0.9134358
18 -2.2357408 -3.5025973
19  1.4399758  1.7359173
20 -1.0118317 -0.4405394
> print( residuals( fitsur4r3$eq[[ 1 ]] ) )
 [1]  0.9340521 -0.7214350  2.3479843  1.4593124  2.1294011  1.2526642
 [7]  1.5135833 -3.1854992 -1.0968591  2.6187465  0.1350519 -2.0965332
[13] -1.4956799 -0.2010695  1.9338513 -3.4910150 -0.2289596 -2.2357408
[19]  1.4399758 -1.0118317
> 
> print( residuals( fitsur5 ) )
        demand      supply
1   1.00251625  0.32193826
2  -0.54494860 -0.42855466
3   2.49488985  2.40138400
4   1.64257702  1.41055745
5   2.03285855  2.29560191
6   1.21288282  1.25448017
7   1.52600861  1.92622288
8  -3.04438404 -4.28681278
9  -1.24056412 -2.07785919
10  2.30005492  3.09729748
11 -0.03029668 -0.46495716
12 -2.03366425 -2.17830477
13 -1.30410849 -1.83556042
14 -0.21550508  0.52915960
15  1.69907566  3.17868782
16 -3.59799145 -4.08395830
17 -0.78599631  0.23712357
18 -2.10702572 -3.35441570
19  1.60703397  1.96943654
20 -0.61341291  0.08853328
> print( residuals( fitsur5$eq[[ 2 ]] ) )
 [1]  0.32193826 -0.42855466  2.40138400  1.41055745  2.29560191  1.25448017
 [7]  1.92622288 -4.28681278 -2.07785919  3.09729748 -0.46495716 -2.17830477
[13] -1.83556042  0.52915960  3.17868782 -4.08395830  0.23712357 -3.35441570
[19]  1.96943654  0.08853328
> 
> print( residuals( fitsuri1r3 ) )
       demand     supply
1   0.7951914  0.1233191
2  -0.7614426 -1.3929723
3   2.3038890 -0.8289812
4   1.4250217 -0.4298120
5   2.1792140 -1.2130458
6   1.2978539 -0.6532306
7   1.5794817 -1.2661573
8  -3.0935068  2.1529768
9  -1.0749907  1.5481536
10  2.5875902 -1.5819397
11 -0.0990772  0.9899652
12 -2.3615660  0.4595118
13 -1.6969889  1.3347358
14 -0.2819204 -1.0538997
15  2.0556788 -2.3387668
16 -3.3744504  1.7341342
17 -0.1139731 -1.0542572
18 -2.1821565  3.4607122
19  1.5611760  0.3179312
20 -0.7450240 -0.3083775
> print( residuals( fitsuri1r3$eq[[ 1 ]] ) )
 [1]  0.7951914 -0.7614426  2.3038890  1.4250217  2.1792140  1.2978539
 [7]  1.5794817 -3.0935068 -1.0749907  2.5875902 -0.0990772 -2.3615660
[13] -1.6969889 -0.2819204  2.0556788 -3.3744504 -0.1139731 -2.1821565
[19]  1.5611760 -0.7450240
> 
> print( residuals( fitsuri2 ) )
        demand      supply
1   1.13409197   6.9548352
2  -0.05872074   7.5872076
3   2.89462921   6.7012729
4   2.15083389   6.7681587
5   1.77979646   1.9295364
6   1.12001296   2.3148812
7   1.59202218   2.2302492
8  -2.59826283   4.9798992
9  -1.64143037  -0.3923332
10  1.37422202  -5.1397265
11 -0.61146216  -3.1738251
12 -1.97644567  -0.8038496
13 -0.84934249   1.0123925
14 -0.29418357  -3.2820349
15  1.08398934  -7.0416803
16 -3.85002032  -4.1403714
17 -2.32587799 -12.6282563
18 -1.71413158  -1.4980699
19  2.14085804  -2.6829845
20  0.64942165   0.3046989
> print( residuals( fitsuri2$eq[[ 2 ]] ) )
 [1]   6.9548352   7.5872076   6.7012729   6.7681587   1.9295364   2.3148812
 [7]   2.2302492   4.9798992  -0.3923332  -5.1397265  -3.1738251  -0.8038496
[13]   1.0123925  -3.2820349  -7.0416803  -4.1403714 -12.6282563  -1.4980699
[19]  -2.6829845   0.3046989
> 
> print( residuals( fitsuri3e ) )
        demand      supply
1   1.13273287   6.9319340
2  -0.04121196   7.5820445
3   2.90849004   6.6947038
4   2.16949448   6.7658698
5   1.77206439   1.9145920
6   1.11845684   2.3047376
7   1.59779607   2.2286035
8  -2.57606952   4.9817660
9  -1.65639465  -0.4095379
10  1.33577196  -5.1607850
11 -0.64581610  -3.1956424
12 -1.98678206  -0.8065859
13 -0.84077116   1.0212735
14 -0.30117518  -3.2749264
15  1.06523184  -7.0373254
16 -3.85453239  -4.1354359
17 -2.38188621 -12.6460187
18 -1.69589251  -1.4782922
19  2.16794401  -2.6473043
20  0.71254924   0.3663293
> print( residuals( fitsuri3e$eq[[ 1 ]] ) )
 [1]  1.13273287 -0.04121196  2.90849004  2.16949448  1.77206439  1.11845684
 [7]  1.59779607 -2.57606952 -1.65639465  1.33577196 -0.64581610 -1.98678206
[13] -0.84077116 -0.30117518  1.06523184 -3.85453239 -2.38188621 -1.69589251
[19]  2.16794401  0.71254924
> 
> print( residuals( fitsurio4 ) )
        demand     supply
1   0.90192011  0.2397418
2  -0.76581675 -0.6974755
3   2.30973614  2.1840642
4   1.41410325  1.1362167
5   2.15705618  2.4898217
6   1.26704231  1.3564179
7   1.51876806  1.9277938
8  -3.20599350 -4.4297270
9  -1.06201588 -1.7890792
10  2.68638542  3.5894903
11  0.14378800 -0.2478570
12 -2.14266900 -2.3690330
13 -1.56294704 -2.2102473
14 -0.20761195  0.4793592
15  2.00118756  3.5259218
16 -3.45295005 -3.8764518
17 -0.09024428  1.1288068
18 -2.25810118 -3.5394523
19  1.41720069  1.6708623
20 -1.06883811 -0.5691733
> print( residuals( fitsurio4$eq[[ 2 ]] ) )
 [1]  0.2397418 -0.6974755  2.1840642  1.1362167  2.4898217  1.3564179
 [7]  1.9277938 -4.4297270 -1.7890792  3.5894903 -0.2478570 -2.3690330
[13] -2.2102473  0.4793592  3.5259218 -3.8764518  1.1288068 -3.5394523
[19]  1.6708623 -0.5691733
> print( residuals( fitsuri4 ) )
         demand      supply
1   0.714611837   5.7754287
2  -0.607567056   7.1979046
3   2.419698477   6.2800926
4   1.593056204   6.5306420
5   2.126801750   1.4648634
6   1.304306364   2.0210871
7   1.668463136   2.2614936
8  -2.829469437   5.2748972
9  -1.212462619  -0.8895296
10  2.192133715  -5.9454916
11 -0.552139531  -4.4070264
12 -2.591958825  -1.4819992
13 -1.709516170   0.8949876
14 -0.390178045  -3.2202363
15  1.929006244  -6.6173745
16 -3.362734822  -3.6068953
17 -0.612481599 -12.8959017
18 -1.975808031  -0.5616921
19  1.887738197  -1.1257514
20  0.008500211   3.0505014
> print( residuals( fitsuri4$eq[[ 2 ]] ) )
 [1]   5.7754287   7.1979046   6.2800926   6.5306420   1.4648634   2.0210871
 [7]   2.2614936   5.2748972  -0.8895296  -5.9454916  -4.4070264  -1.4819992
[13]   0.8949876  -3.2202363  -6.6173745  -3.6068953 -12.8959017  -0.5616921
[19]  -1.1257514   3.0505014
> 
> print( residuals( fitsuri4w ) )
         demand      supply
1   0.714628596   5.7753784
2  -0.607540464   7.1979165
3   2.419721176   6.2800974
4   1.593083438   6.5306552
5   2.126785745   1.4648804
6   1.304298481   2.0211080
7   1.668461418   2.2615310
8  -2.829454652   5.2749604
9  -1.212483712  -0.8895378
10  2.192091099  -5.9455466
11 -0.552150256  -4.4071623
12 -2.591936252  -1.4821207
13 -1.709479058   0.8949123
14 -0.390175825  -3.2202793
15  1.928967286  -6.6173483
16 -3.362755762  -3.6068589
17 -0.612564939 -12.8959235
18 -1.975792961  -0.5616584
19  1.887755058  -1.1256784
20  0.008541586   3.0506747
> print( residuals( fitsuri4w$eq[[ 2 ]] ) )
 [1]   5.7753784   7.1979165   6.2800974   6.5306552   1.4648804   2.0211080
 [7]   2.2615310   5.2749604  -0.8895378  -5.9455466  -4.4071623  -1.4821207
[13]   0.8949123  -3.2202793  -6.6173483  -3.6068589 -12.8959235  -0.5616584
[19]  -1.1256784   3.0506747
> 
> print( residuals( fitsurio5r2 ) )
       demand      supply
1   0.6545291  0.02691215
2  -1.4561821 -1.51516211
3   1.7368698  1.52097071
4   0.6960225  0.30202796
5   2.5300794  2.93973872
6   1.4166671  1.54688304
7   1.4587865  1.83355287
8  -3.7785243 -5.03909973
9  -0.4981092 -1.04156204
10  3.9501376  5.07613853
11  0.8355563  0.63981224
12 -2.3470730 -2.59303465
13 -2.2861800 -3.04680916
14 -0.1372155  0.50806365
15  2.9082050  4.50362418
16 -3.0497726 -3.37859031
17  2.0905963  3.68236337
18 -2.7753015 -4.11074773
19  0.7373786  0.78189006
20 -2.6864700 -2.63697176
> print( residuals( fitsurio5r2$eq[[ 1 ]] ) )
 [1]  0.6545291 -1.4561821  1.7368698  0.6960225  2.5300794  1.4166671
 [7]  1.4587865 -3.7785243 -0.4981092  3.9501376  0.8355563 -2.3470730
[13] -2.2861800 -0.1372155  2.9082050 -3.0497726  2.0905963 -2.7753015
[19]  0.7373786 -2.6864700
> print( residuals( fitsuri5r2 ) )
        demand      supply
1   0.71991503   5.7564837
2  -0.59788931   7.2017599
3   2.42788968   6.2814352
4   1.60301455   6.5350239
5   2.12115706   1.4716388
6   1.30167068   2.0291746
7   1.66828156   2.2754667
8  -2.82328826   5.2986667
9  -1.22020831  -0.8917565
10  2.17595656  -5.9652644
11 -0.55779562  -4.4575604
12 -2.58536205  -1.5280802
13 -1.69702854   0.8659135
14 -0.38991321  -3.2367147
15  1.91527061  -6.6070568
16 -3.36976023  -3.5926311
17 -0.64288532 -12.9023383
18 -1.96978919  -0.5491400
19  1.89490133  -1.0990430
20  0.02586298   3.1140223
> print( residuals( fitsuri5r2$eq[[ 1 ]] ) )
 [1]  0.71991503 -0.59788931  2.42788968  1.60301455  2.12115706  1.30167068
 [7]  1.66828156 -2.82328826 -1.22020831  2.17595656 -0.55779562 -2.58536205
[13] -1.69702854 -0.38991321  1.91527061 -3.36976023 -0.64288532 -1.96978919
[19]  1.89490133  0.02586298
> 
> 
> ## *************** coefficients *********************
> print( round( coef( fitsur1r3 ), digits = 6 ) )
demand_(Intercept)       demand_price      demand_income supply_(Intercept) 
         99.225003          -0.267658           0.291629          62.957541 
      supply_price   supply_farmPrice       supply_trend 
          0.144186           0.207185           0.333341 
> print( round( coef( fitsur1r3$eq[[ 2 ]] ), digits = 6 ) )
(Intercept)       price   farmPrice       trend 
  62.957541    0.144186    0.207185    0.333341 
> 
> print( round( coef( fitsuri2 ), digits = 6 ) )
demand_(Intercept)       demand_price      demand_income supply_(Intercept) 
        107.367833          -0.394459           0.338174          85.044826 
     supply_income   supply_farmPrice       supply_trend 
          0.312488          -0.197207           0.338174 
> print( round( coef( fitsuri2$eq[[ 1 ]] ), digits = 6 ) )
(Intercept)       price      income 
 107.367833   -0.394459    0.338174 
> 
> print( round( coef( fitsur2we ), digits = 6 ) )
demand_(Intercept)       demand_price      demand_income supply_(Intercept) 
         98.754217          -0.233501           0.261429          67.888244 
      supply_price   supply_farmPrice       supply_trend 
          0.132050           0.176533           0.261429 
> print( round( coef( fitsur2we$eq[[ 1 ]] ), digits = 6 ) )
(Intercept)       price      income 
  98.754217   -0.233501    0.261429 
> 
> print( round( coef( fitsur3 ), digits = 6 ) )
demand_(Intercept)       demand_price      demand_income supply_(Intercept) 
         98.840761          -0.239780           0.266981          67.428338 
      supply_price   supply_farmPrice       supply_trend 
          0.133217           0.179481           0.266981 
> print( round( coef( fitsur3, modified.reg = TRUE ), digits = 6 ) )
       C1        C2        C3        C4        C5        C6 
98.840761 -0.239780  0.266981 67.428338  0.133217  0.179481 
> print( round( coef( fitsur3$eq[[ 2 ]] ), digits = 6 ) )
(Intercept)       price   farmPrice       trend 
  67.428338    0.133217    0.179481    0.266981 
> 
> print( round( coef( fitsur4r2 ), digits = 6 ) )
demand_(Intercept)       demand_price      demand_income supply_(Intercept) 
         92.526596          -0.230404           0.322103          48.701089 
      supply_price   supply_farmPrice       supply_trend 
          0.269596           0.226135           0.322103 
> print( round( coef( fitsur4r2$eq[[ 1 ]] ), digits = 6 ) )
(Intercept)       price      income 
  92.526596   -0.230404    0.322103 
> 
> print( round( coef( fitsuri5e ), digits = 6 ) )
demand_(Intercept)       demand_price      demand_income supply_(Intercept) 
         97.629728          -0.257559           0.297629          89.543697 
     supply_income   supply_farmPrice       supply_trend 
          0.242441          -0.168655           0.297629 
> print( round( coef( fitsuri5e, modified.reg = TRUE ), digits = 6 ) )
       C1        C2        C3        C4        C5        C6 
97.629728 -0.257559  0.297629 89.543697  0.242441 -0.168655 
> print( round( coef( fitsuri5e$eq[[ 2 ]] ), digits = 6 ) )
(Intercept)      income   farmPrice       trend 
  89.543697    0.242441   -0.168655    0.297629 
> 
> print( round( coef( fitsur5w ), digits = 6 ) )
demand_(Intercept)       demand_price      demand_income supply_(Intercept) 
         96.442138          -0.275275           0.327973          52.576104 
      supply_price   supply_farmPrice       supply_trend 
          0.224725           0.231841           0.327973 
> print( round( coef( fitsur5w, modified.reg = TRUE ), digits = 6 ) )
       C1        C2        C3        C4        C5        C6 
96.442138 -0.275275  0.327973 52.576104  0.224725  0.231841 
> print( round( coef( fitsur5w$eq[[ 1 ]] ), digits = 6 ) )
(Intercept)       price      income 
  96.442138   -0.275275    0.327973 
> 
> 
> ## *************** coefficients with stats *********************
> print( round( coef( summary( fitsur1r3 ) ), digits = 6 ) )
                    Estimate Std. Error   t value Pr(>|t|)
demand_(Intercept) 99.225003   7.512869 13.207338 0.000000
demand_price       -0.267658   0.087799 -3.048537 0.007262
demand_income       0.291629   0.040762  7.154496 0.000002
supply_(Intercept) 62.957541  10.985025  5.731215 0.000031
supply_price        0.144186   0.094351  1.528194 0.145991
supply_farmPrice    0.207185   0.038568  5.371945 0.000062
supply_trend        0.333341   0.064412  5.175160 0.000092
> print( round( coef( summary( fitsur1r3$eq[[ 2 ]] ) ), digits = 6 ) )
             Estimate Std. Error  t value Pr(>|t|)
(Intercept) 62.957541  10.985025 5.731215 0.000031
price        0.144186   0.094351 1.528194 0.145991
farmPrice    0.207185   0.038568 5.371945 0.000062
trend        0.333341   0.064412 5.175160 0.000092
> 
> print( round( coef( summary( fitsuri2, useDfSys = FALSE ) ), digits = 6 ) )
                     Estimate Std. Error   t value Pr(>|t|)
demand_(Intercept) 107.367833   7.498581 14.318419 0.000000
demand_price        -0.394459   0.091188 -4.325773 0.000459
demand_income        0.338174   0.046617  7.254284 0.000001
supply_(Intercept)  85.044826  12.106893  7.024496 0.000003
supply_income        0.312488   0.123346  2.533433 0.022132
supply_farmPrice    -0.197207   0.115708 -1.704352 0.107654
supply_trend         0.338174   0.046617  7.254284 0.000002
> print( round( coef( summary( fitsuri2$eq[[ 1 ]], useDfSys = FALSE ) ),
+    digits = 6 ) )
              Estimate Std. Error   t value Pr(>|t|)
(Intercept) 107.367833   7.498581 14.318419 0.000000
price        -0.394459   0.091188 -4.325773 0.000459
income        0.338174   0.046617  7.254284 0.000001
> 
> print( round( coef( summary( fitsur3 ) ), digits = 6 ) )
                    Estimate Std. Error   t value Pr(>|t|)
demand_(Intercept) 98.840761   7.558137 13.077398 0.000000
demand_price       -0.239780   0.085993 -2.788350 0.008613
demand_income       0.266981   0.036842  7.246570 0.000000
supply_(Intercept) 67.428338  10.664717  6.322562 0.000000
supply_price        0.133217   0.095310  1.397721 0.171250
supply_farmPrice    0.179481   0.033654  5.333128 0.000006
supply_trend        0.266981   0.036842  7.246570 0.000000
> print( round( coef( summary( fitsur3 ), modified.reg = TRUE ), digits = 6 ) )
    Estimate Std. Error   t value Pr(>|t|)
C1 98.840761   7.558137 13.077398 0.000000
C2 -0.239780   0.085993 -2.788350 0.008613
C3  0.266981   0.036842  7.246570 0.000000
C4 67.428338  10.664717  6.322562 0.000000
C5  0.133217   0.095310  1.397721 0.171250
C6  0.179481   0.033654  5.333128 0.000006
> print( round( coef( summary( fitsur3$eq[[ 2 ]] ) ), digits = 6 ) )
             Estimate Std. Error  t value Pr(>|t|)
(Intercept) 67.428338  10.664717 6.322562 0.000000
price        0.133217   0.095310 1.397721 0.171250
farmPrice    0.179481   0.033654 5.333128 0.000006
trend        0.266981   0.036842 7.246570 0.000000
> 
> print( round( coef( summary( fitsuri3we ) ), digits = 6 ) )
                     Estimate Std. Error   t value Pr(>|t|)
demand_(Intercept) 107.805519   6.927015 15.563056 0.000000
demand_price        -0.398586   0.084288 -4.728852 0.000038
demand_income        0.337918   0.043115  7.837624 0.000000
supply_(Intercept)  85.107093  10.828751  7.859364 0.000000
supply_income        0.310638   0.110145  2.820265 0.007950
supply_farmPrice    -0.195956   0.103427 -1.894636 0.066671
supply_trend         0.337918   0.043115  7.837624 0.000000
> print( round( coef( summary( fitsuri3we ), modified.reg = TRUE ), digits = 6 ) )
     Estimate Std. Error   t value Pr(>|t|)
C1 107.805519   6.927015 15.563056 0.000000
C2  -0.398586   0.084288 -4.728852 0.000038
C3   0.337918   0.043115  7.837624 0.000000
C4  85.107093  10.828751  7.859364 0.000000
C5   0.310638   0.110145  2.820265 0.007950
C6  -0.195956   0.103427 -1.894636 0.066671
> print( round( coef( summary( fitsuri3we$eq[[ 1 ]] ) ), digits = 6 ) )
              Estimate Std. Error   t value Pr(>|t|)
(Intercept) 107.805519   6.927015 15.563056  0.0e+00
price        -0.398586   0.084288 -4.728852  3.8e-05
income        0.337918   0.043115  7.837624  0.0e+00
> 
> print( round( coef( summary( fitsur4r2 ) ), digits = 6 ) )
                    Estimate Std. Error   t value Pr(>|t|)
demand_(Intercept) 92.526596   7.289606 12.692949 0.000000
demand_price       -0.230404   0.082692 -2.786302 0.008552
demand_income       0.322103   0.016626 19.373258 0.000000
supply_(Intercept) 48.701089   7.403429  6.578180 0.000000
supply_price        0.269596   0.082692  3.260266 0.002483
supply_farmPrice    0.226135   0.016607 13.616644 0.000000
supply_trend        0.322103   0.016626 19.373258 0.000000
> print( round( coef( summary( fitsur4r2$eq[[ 1 ]] ) ), digits = 6 ) )
             Estimate Std. Error   t value Pr(>|t|)
(Intercept) 92.526596   7.289606 12.692949 0.000000
price       -0.230404   0.082692 -2.786302 0.008552
income       0.322103   0.016626 19.373258 0.000000
> 
> print( round( coef( summary( fitsur4we ) ), digits = 6 ) )
                    Estimate Std. Error   t value Pr(>|t|)
demand_(Intercept) 96.941374   6.889437 14.071015 0.000000
demand_price       -0.281365   0.076619 -3.672260 0.000796
demand_income       0.329100   0.018107 18.175434 0.000000
supply_(Intercept) 52.996312   7.065215  7.501019 0.000000
supply_price        0.218635   0.076619  2.853523 0.007215
supply_farmPrice    0.233674   0.018314 12.759505 0.000000
supply_trend        0.329100   0.018107 18.175434 0.000000
> print( round( coef( summary( fitsur4we$eq[[ 2 ]] ) ), digits = 6 ) )
             Estimate Std. Error   t value Pr(>|t|)
(Intercept) 52.996312   7.065215  7.501019 0.000000
price        0.218635   0.076619  2.853523 0.007215
farmPrice    0.233674   0.018314 12.759505 0.000000
trend        0.329100   0.018107 18.175434 0.000000
> 
> print( round( coef( summary( fitsuri5e, useDfSys = FALSE ) ), digits = 6 ) )
                    Estimate Std. Error   t value Pr(>|t|)
demand_(Intercept) 97.629728   6.155972 15.859351 0.000000
demand_price       -0.257559   0.070910 -3.632214 0.002060
demand_income       0.297629   0.040327  7.380428 0.000001
supply_(Intercept) 89.543697   9.337169  9.590027 0.000000
supply_income       0.242441   0.070910  3.419018 0.003516
supply_farmPrice   -0.168655   0.098793 -1.707147 0.107123
supply_trend        0.297629   0.040327  7.380428 0.000002
> print( round( coef( summary( fitsuri5e, useDfSys = FALSE ),
+    modified.reg = TRUE ), digits = 6 ) )
    Estimate Std. Error   t value Pr(>|t|)
C1 97.629728   6.155972 15.859351       NA
C2 -0.257559   0.070910 -3.632214       NA
C3  0.297629   0.040327  7.380428       NA
C4 89.543697   9.337169  9.590027       NA
C5  0.242441   0.070910  3.419018       NA
C6 -0.168655   0.098793 -1.707147       NA
> print( round( coef( summary( fitsuri5e$eq[[ 2 ]], useDfSys = FALSE ) ),
+    digits = 6 ) )
             Estimate Std. Error   t value Pr(>|t|)
(Intercept) 89.543697   9.337169  9.590027 0.000000
income       0.242441   0.070910  3.419018 0.003516
farmPrice   -0.168655   0.098793 -1.707147 0.107123
trend        0.297629   0.040327  7.380428 0.000002
> 
> 
> ## *********** variance covariance matrix of the coefficients *******
> print( round( vcov( fitsur1e2 ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          56.440312    -0.587510      0.025716
demand_price                -0.587510     0.007693     -0.001866
demand_income                0.025716    -0.001866      0.001650
supply_(Intercept)          61.054961    -0.403701     -0.209805
supply_price                -0.632489     0.005792      0.000546
supply_farmPrice             0.021495    -0.001559      0.001379
supply_trend                 0.032652    -0.002369      0.002095
                   supply_(Intercept) supply_price supply_farmPrice
demand_(Intercept)          61.054961    -0.632489         0.021495
demand_price                -0.403701     0.005792        -0.001559
demand_income               -0.209805     0.000546         0.001379
supply_(Intercept)         120.417915    -0.954714        -0.221454
supply_price                -0.954714     0.008900         0.000584
supply_farmPrice            -0.221454     0.000584         0.001476
supply_trend                -0.308674     0.000772         0.001950
                   supply_trend
demand_(Intercept)     0.032652
demand_price          -0.002369
demand_income          0.002095
supply_(Intercept)    -0.308674
supply_price           0.000772
supply_farmPrice       0.001950
supply_trend           0.004100
> print( round( vcov( fitsur1e2$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   56.440312 -0.587510  0.025716
price         -0.587510  0.007693 -0.001866
income         0.025716 -0.001866  0.001650
> 
> print( round( vcov( fitsur1r3 ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          56.443206    -0.587720      0.025901
demand_price                -0.587720     0.007709     -0.001879
demand_income                0.025901    -0.001879      0.001662
supply_(Intercept)          60.860716    -0.400864     -0.210729
supply_price                -0.630659     0.005771      0.000548
supply_farmPrice             0.021589    -0.001566      0.001385
supply_trend                 0.032796    -0.002379      0.002104
                   supply_(Intercept) supply_price supply_farmPrice
demand_(Intercept)          60.860716    -0.630659         0.021589
demand_price                -0.400864     0.005771        -0.001566
demand_income               -0.210729     0.000548         0.001385
supply_(Intercept)         120.670780    -0.955395        -0.223176
supply_price                -0.955395     0.008902         0.000589
supply_farmPrice            -0.223176     0.000589         0.001487
supply_trend                -0.310422     0.000776         0.001959
                   supply_trend
demand_(Intercept)     0.032796
demand_price          -0.002379
demand_income          0.002104
supply_(Intercept)    -0.310422
supply_price           0.000776
supply_farmPrice       0.001959
supply_trend           0.004149
> print( round( vcov( fitsur1r3$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)     price farmPrice     trend
(Intercept)  120.670780 -0.955395 -0.223176 -0.310422
price         -0.955395  0.008902  0.000589  0.000776
farmPrice     -0.223176  0.000589  0.001487  0.001959
trend         -0.310422  0.000776  0.001959  0.004149
> 
> print( round( vcov( fitsur2e ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          48.563078    -0.501877      0.018400
demand_price                -0.501877     0.006320     -0.001335
demand_income                0.018400    -0.001335      0.001180
supply_(Intercept)          53.201367    -0.392828     -0.140738
supply_price                -0.546194     0.005097      0.000373
supply_farmPrice             0.014689    -0.001066      0.000942
supply_trend                 0.018400    -0.001335      0.001180
                   supply_(Intercept) supply_price supply_farmPrice
demand_(Intercept)          53.201367    -0.546194         0.014689
demand_price                -0.392828     0.005097        -0.001066
demand_income               -0.140738     0.000373         0.000942
supply_(Intercept)          91.607253    -0.766739        -0.136644
supply_price                -0.766739     0.007271         0.000368
supply_farmPrice            -0.136644     0.000368         0.000931
supply_trend                -0.140738     0.000373         0.000942
                   supply_trend
demand_(Intercept)     0.018400
demand_price          -0.001335
demand_income          0.001180
supply_(Intercept)    -0.140738
supply_price           0.000373
supply_farmPrice       0.000942
supply_trend           0.001180
> print( round( vcov( fitsur2e$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   48.563078 -0.501877  0.018400
price         -0.501877  0.006320 -0.001335
income         0.018400 -0.001335  0.001180
> 
> print( round( vcov( fitsur3 ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          57.125431    -0.589892      0.021160
demand_price                -0.589892     0.007395     -0.001535
demand_income                0.021160    -0.001535      0.001357
supply_(Intercept)          64.595187    -0.482110     -0.165599
supply_price                -0.662552     0.006195      0.000440
supply_farmPrice             0.017322    -0.001257      0.001111
supply_trend                 0.021160    -0.001535      0.001357
                   supply_(Intercept) supply_price supply_farmPrice
demand_(Intercept)          64.595187    -0.662552         0.017322
demand_price                -0.482110     0.006195        -0.001257
demand_income               -0.165599     0.000440         0.001111
supply_(Intercept)         113.736182    -0.956493        -0.165927
supply_price                -0.956493     0.009084         0.000448
supply_farmPrice            -0.165927     0.000448         0.001133
supply_trend                -0.165599     0.000440         0.001111
                   supply_trend
demand_(Intercept)     0.021160
demand_price          -0.001535
demand_income          0.001357
supply_(Intercept)    -0.165599
supply_price           0.000440
supply_farmPrice       0.001111
supply_trend           0.001357
> print( round( vcov( fitsur3, modified.reg = TRUE ), digits = 6 ) )
          C1        C2        C3         C4        C5        C6
C1 57.125431 -0.589892  0.021160  64.595187 -0.662552  0.017322
C2 -0.589892  0.007395 -0.001535  -0.482110  0.006195 -0.001257
C3  0.021160 -0.001535  0.001357  -0.165599  0.000440  0.001111
C4 64.595187 -0.482110 -0.165599 113.736182 -0.956493 -0.165927
C5 -0.662552  0.006195  0.000440  -0.956493  0.009084  0.000448
C6  0.017322 -0.001257  0.001111  -0.165927  0.000448  0.001133
> print( round( vcov( fitsur3$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)     price farmPrice     trend
(Intercept)  113.736182 -0.956493 -0.165927 -0.165599
price         -0.956493  0.009084  0.000448  0.000440
farmPrice     -0.165927  0.000448  0.001133  0.001111
trend         -0.165599  0.000440  0.001111  0.001357
> 
> print( round( vcov( fitsur3w ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          56.726729    -0.585128      0.020348
demand_price                -0.585128     0.007290     -0.001476
demand_income                0.020348    -0.001476      0.001305
supply_(Intercept)          64.882000    -0.489991     -0.160451
supply_price                -0.664819     0.006231      0.000426
supply_farmPrice             0.016795    -0.001219      0.001077
supply_trend                 0.020348    -0.001476      0.001305
                   supply_(Intercept) supply_price supply_farmPrice
demand_(Intercept)          64.882000    -0.664819         0.016795
demand_price                -0.489991     0.006231        -0.001219
demand_income               -0.160451     0.000426         0.001077
supply_(Intercept)         113.542748    -0.959668        -0.161181
supply_price                -0.959668     0.009129         0.000435
supply_farmPrice            -0.161181     0.000435         0.001100
supply_trend                -0.160451     0.000426         0.001077
                   supply_trend
demand_(Intercept)     0.020348
demand_price          -0.001476
demand_income          0.001305
supply_(Intercept)    -0.160451
supply_price           0.000426
supply_farmPrice       0.001077
supply_trend           0.001305
> print( round( vcov( fitsur3w, modified.reg = TRUE ), digits = 6 ) )
          C1        C2        C3         C4        C5        C6
C1 56.726729 -0.585128  0.020348  64.882000 -0.664819  0.016795
C2 -0.585128  0.007290 -0.001476  -0.489991  0.006231 -0.001219
C3  0.020348 -0.001476  0.001305  -0.160451  0.000426  0.001077
C4 64.882000 -0.489991 -0.160451 113.542748 -0.959668 -0.161181
C5 -0.664819  0.006231  0.000426  -0.959668  0.009129  0.000435
C6  0.016795 -0.001219  0.001077  -0.161181  0.000435  0.001100
> print( round( vcov( fitsur3w$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   56.726729 -0.585128  0.020348
price         -0.585128  0.007290 -0.001476
income         0.020348 -0.001476  0.001305
> 
> print( round( vcov( fitsur4r2 ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          53.138353    -0.593514      0.065746
demand_price                -0.593514     0.006838     -0.000927
demand_income                0.065746    -0.000927      0.000276
supply_(Intercept)          53.390331    -0.599312      0.069540
supply_price                -0.593514     0.006838     -0.000927
supply_farmPrice             0.057048    -0.000775      0.000210
supply_trend                 0.065746    -0.000927      0.000276
                   supply_(Intercept) supply_price supply_farmPrice
demand_(Intercept)          53.390331    -0.593514         0.057048
demand_price                -0.599312     0.006838        -0.000775
demand_income                0.069540    -0.000927         0.000210
supply_(Intercept)          54.810757    -0.599312         0.048653
supply_price                -0.599312     0.006838        -0.000775
supply_farmPrice             0.048653    -0.000775         0.000276
supply_trend                 0.069540    -0.000927         0.000210
                   supply_trend
demand_(Intercept)     0.065746
demand_price          -0.000927
demand_income          0.000276
supply_(Intercept)     0.069540
supply_price          -0.000927
supply_farmPrice       0.000210
supply_trend           0.000276
> print( round( vcov( fitsur4r2$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   53.138353 -0.593514  0.065746
price         -0.593514  0.006838 -0.000927
income         0.065746 -0.000927  0.000276
> 
> print( round( vcov( fitsur5e ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          47.886704    -0.516747      0.040579
demand_price                -0.516747     0.005886     -0.000738
demand_income                0.040579    -0.000738      0.000340
supply_(Intercept)          48.218725    -0.526670      0.047594
supply_price                -0.516747     0.005886     -0.000738
supply_farmPrice             0.033361    -0.000562      0.000234
supply_trend                 0.040579    -0.000738      0.000340
                   supply_(Intercept) supply_price supply_farmPrice
demand_(Intercept)          48.218725    -0.516747         0.033361
demand_price                -0.526670     0.005886        -0.000562
demand_income                0.047594    -0.000738         0.000234
supply_(Intercept)          50.473858    -0.526670         0.020109
supply_price                -0.526670     0.005886        -0.000562
supply_farmPrice             0.020109    -0.000562         0.000348
supply_trend                 0.047594    -0.000738         0.000234
                   supply_trend
demand_(Intercept)     0.040579
demand_price          -0.000738
demand_income          0.000340
supply_(Intercept)     0.047594
supply_price          -0.000738
supply_farmPrice       0.000234
supply_trend           0.000340
> print( round( vcov( fitsur5e, modified.reg = TRUE ), digits = 6 ) )
          C1        C2        C3        C4        C5        C6
C1 47.886704 -0.516747  0.040579 48.218725 -0.516747  0.033361
C2 -0.516747  0.005886 -0.000738 -0.526670  0.005886 -0.000562
C3  0.040579 -0.000738  0.000340  0.047594 -0.000738  0.000234
C4 48.218725 -0.526670  0.047594 50.473858 -0.526670  0.020109
C5 -0.516747  0.005886 -0.000738 -0.526670  0.005886 -0.000562
C6  0.033361 -0.000562  0.000234  0.020109 -0.000562  0.000348
> print( round( vcov( fitsur5e$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)     price farmPrice     trend
(Intercept)   50.473858 -0.526670  0.020109  0.047594
price         -0.526670  0.005886 -0.000562 -0.000738
farmPrice      0.020109 -0.000562  0.000348  0.000234
trend          0.047594 -0.000738  0.000234  0.000340
> 
> print( round( vcov( fitsuri1r3 ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          54.550512    -0.556983      0.013891
demand_price                -0.556983     0.007700     -0.002185
demand_income                0.013891    -0.002185      0.002098
supply_(Intercept)          -2.703167    -0.087329      0.115993
supply_income                0.224902    -0.001848     -0.000411
supply_farmPrice            -0.172110     0.002379     -0.000675
supply_trend                -0.259704     0.003590     -0.001019
                   supply_(Intercept) supply_income supply_farmPrice
demand_(Intercept)          -2.703167      0.224902        -0.172110
demand_price                -0.087329     -0.001848         0.002379
demand_income                0.115993     -0.000411        -0.000675
supply_(Intercept)          11.465941     -0.058750        -0.051728
supply_income               -0.058750      0.001787        -0.001018
supply_farmPrice            -0.051728     -0.001018         0.001368
supply_trend                -0.057836     -0.001631         0.001794
                   supply_trend
demand_(Intercept)    -0.259704
demand_price           0.003590
demand_income         -0.001019
supply_(Intercept)    -0.057836
supply_income         -0.001631
supply_farmPrice       0.001794
supply_trend           0.004156
> print( round( vcov( fitsuri1r3$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   54.550512 -0.556983  0.013891
price         -0.556983  0.007700 -0.002185
income         0.013891 -0.002185  0.002098
> 
> print( round( vcov( fitsuri2 ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          56.228722    -0.592601      0.033216
demand_price                -0.592601     0.008315     -0.002451
demand_income                0.033216    -0.002451      0.002173
supply_(Intercept)           5.954773     0.141405     -0.203885
supply_income               -0.251647     0.002011      0.000518
supply_farmPrice             0.190974    -0.003227      0.001351
supply_trend                 0.033216    -0.002451      0.002173
                   supply_(Intercept) supply_income supply_farmPrice
demand_(Intercept)           5.954773     -0.251647         0.190974
demand_price                 0.141405      0.002011        -0.003227
demand_income               -0.203885      0.000518         0.001351
supply_(Intercept)         146.576864     -0.828954        -0.641222
supply_income               -0.828954      0.015214        -0.006835
supply_farmPrice            -0.641222     -0.006835         0.013388
supply_trend                -0.203885      0.000518         0.001351
                   supply_trend
demand_(Intercept)     0.033216
demand_price          -0.002451
demand_income          0.002173
supply_(Intercept)    -0.203885
supply_income          0.000518
supply_farmPrice       0.001351
supply_trend           0.002173
> print( round( vcov( fitsuri2$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)    income farmPrice     trend
(Intercept)  146.576864 -0.828954 -0.641222 -0.203885
income        -0.828954  0.015214 -0.006835  0.000518
farmPrice     -0.641222 -0.006835  0.013388  0.001351
trend         -0.203885  0.000518  0.001351  0.002173
> 
> print( round( vcov( fitsuri3e ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          47.983367    -0.505917      0.028570
demand_price                -0.505917     0.007104     -0.002098
demand_income                0.028570    -0.002098      0.001859
supply_(Intercept)           4.986011     0.119753     -0.172089
supply_income               -0.211763     0.001700      0.000428
supply_farmPrice             0.160903    -0.002728      0.001147
supply_trend                 0.028570    -0.002098      0.001859
                   supply_(Intercept) supply_income supply_farmPrice
demand_(Intercept)           4.986011     -0.211763         0.160903
demand_price                 0.119753      0.001700        -0.002728
demand_income               -0.172089      0.000428         0.001147
supply_(Intercept)         117.261427     -0.661134        -0.514052
supply_income               -0.661134      0.012132        -0.005450
supply_farmPrice            -0.514052     -0.005450         0.010697
supply_trend                -0.172089      0.000428         0.001147
                   supply_trend
demand_(Intercept)     0.028570
demand_price          -0.002098
demand_income          0.001859
supply_(Intercept)    -0.172089
supply_income          0.000428
supply_farmPrice       0.001147
supply_trend           0.001859
> print( round( vcov( fitsuri3e, modified.reg = TRUE ), digits = 6 ) )
          C1        C2        C3         C4        C5        C6
C1 47.983367 -0.505917  0.028570   4.986011 -0.211763  0.160903
C2 -0.505917  0.007104 -0.002098   0.119753  0.001700 -0.002728
C3  0.028570 -0.002098  0.001859  -0.172089  0.000428  0.001147
C4  4.986011  0.119753 -0.172089 117.261427 -0.661134 -0.514052
C5 -0.211763  0.001700  0.000428  -0.661134  0.012132 -0.005450
C6  0.160903 -0.002728  0.001147  -0.514052 -0.005450  0.010697
> print( round( vcov( fitsuri3e$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   47.983367 -0.505917  0.028570
price         -0.505917  0.007104 -0.002098
income         0.028570 -0.002098  0.001859
> 
> print( round( vcov( fitsurio4e ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          47.026816    -0.525375      0.058300
demand_price                -0.525375     0.006074     -0.000842
demand_income                0.058300    -0.000842      0.000266
supply_(Intercept)          47.234560    -0.530682      0.061997
supply_price                -0.525375     0.006074     -0.000842
supply_farmPrice             0.050751    -0.000704      0.000201
supply_trend                 0.058300    -0.000842      0.000266
                   supply_(Intercept) supply_price supply_farmPrice
demand_(Intercept)          47.234560    -0.525375         0.050751
demand_price                -0.530682     0.006074        -0.000704
demand_income                0.061997    -0.000842         0.000201
supply_(Intercept)          48.618283    -0.530682         0.042182
supply_price                -0.530682     0.006074        -0.000704
supply_farmPrice             0.042182    -0.000704         0.000270
supply_trend                 0.061997    -0.000842         0.000201
                   supply_trend
demand_(Intercept)     0.058300
demand_price          -0.000842
demand_income          0.000266
supply_(Intercept)     0.061997
supply_price          -0.000842
supply_farmPrice       0.000201
supply_trend           0.000266
> print( round( vcov( fitsurio4e$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)     price farmPrice     trend
(Intercept)   48.618283 -0.530682  0.042182  0.061997
price         -0.530682  0.006074 -0.000704 -0.000842
farmPrice      0.042182 -0.000704  0.000270  0.000201
trend          0.061997 -0.000842  0.000201  0.000266
> print( round( vcov( fitsuri4e ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          37.895997    -0.362737     -0.014871
demand_price                -0.362737     0.005028     -0.001437
demand_income               -0.014871    -0.001437      0.001626
supply_(Intercept)          19.082188    -0.206115      0.016169
supply_income               -0.362737     0.005028     -0.001437
supply_farmPrice             0.170735    -0.002786      0.001107
supply_trend                -0.014871    -0.001437      0.001626
                   supply_(Intercept) supply_income supply_farmPrice
demand_(Intercept)          19.082188     -0.362737         0.170735
demand_price                -0.206115      0.005028        -0.002786
demand_income                0.016169     -0.001437         0.001107
supply_(Intercept)          87.182717     -0.206115        -0.682938
supply_income               -0.206115      0.005028        -0.002786
supply_farmPrice            -0.682938     -0.002786         0.009760
supply_trend                 0.016169     -0.001437         0.001107
                   supply_trend
demand_(Intercept)    -0.014871
demand_price          -0.001437
demand_income          0.001626
supply_(Intercept)     0.016169
supply_income         -0.001437
supply_farmPrice       0.001107
supply_trend           0.001626
> print( round( vcov( fitsuri4e$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)    income farmPrice     trend
(Intercept)   87.182717 -0.206115 -0.682938  0.016169
income        -0.206115  0.005028 -0.002786 -0.001437
farmPrice     -0.682938 -0.002786  0.009760  0.001107
trend          0.016169 -0.001437  0.001107  0.001626
> 
> print( round( vcov( fitsurio5r2 ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          51.319595    -0.579747      0.070528
demand_price                -0.579747     0.006646     -0.000872
demand_income                0.070528    -0.000872      0.000171
supply_(Intercept)          51.551829    -0.583025      0.072036
supply_price                -0.579747     0.006646     -0.000872
supply_farmPrice             0.061658    -0.000751      0.000138
supply_trend                 0.070528    -0.000872      0.000171
                   supply_(Intercept) supply_price supply_farmPrice
demand_(Intercept)          51.551829    -0.579747         0.061658
demand_price                -0.583025     0.006646        -0.000751
demand_income                0.072036    -0.000872         0.000138
supply_(Intercept)          52.210946    -0.583025         0.058794
supply_price                -0.583025     0.006646        -0.000751
supply_farmPrice             0.058794    -0.000751         0.000154
supply_trend                 0.072036    -0.000872         0.000138
                   supply_trend
demand_(Intercept)     0.070528
demand_price          -0.000872
demand_income          0.000171
supply_(Intercept)     0.072036
supply_price          -0.000872
supply_farmPrice       0.000138
supply_trend           0.000171
> print( round( vcov( fitsurio5r2, modified.reg = TRUE ), digits = 6 ) )
          C1        C2        C3        C4        C5        C6
C1 51.319595 -0.579747  0.070528 51.551829 -0.579747  0.061658
C2 -0.579747  0.006646 -0.000872 -0.583025  0.006646 -0.000751
C3  0.070528 -0.000872  0.000171  0.072036 -0.000872  0.000138
C4 51.551829 -0.583025  0.072036 52.210946 -0.583025  0.058794
C5 -0.579747  0.006646 -0.000872 -0.583025  0.006646 -0.000751
C6  0.061658 -0.000751  0.000138  0.058794 -0.000751  0.000154
> print( round( vcov( fitsurio5r2$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   51.319595 -0.579747  0.070528
price         -0.579747  0.006646 -0.000872
income         0.070528 -0.000872  0.000171
> print( round( vcov( fitsuri5r2 ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          45.688124    -0.440079     -0.015167
demand_price                -0.440079     0.006055     -0.001697
demand_income               -0.015167    -0.001697      0.001896
supply_(Intercept)          22.817210    -0.239028      0.011864
supply_income               -0.440079     0.006055     -0.001697
supply_farmPrice             0.210423    -0.003454      0.001385
supply_trend                -0.015167    -0.001697      0.001896
                   supply_(Intercept) supply_income supply_farmPrice
demand_(Intercept)          22.817210     -0.440079         0.210423
demand_price                -0.239028      0.006055        -0.003454
demand_income                0.011864     -0.001697         0.001385
supply_(Intercept)         108.872157     -0.239028        -0.870241
supply_income               -0.239028      0.006055        -0.003454
supply_farmPrice            -0.870241     -0.003454         0.012342
supply_trend                 0.011864     -0.001697         0.001385
                   supply_trend
demand_(Intercept)    -0.015167
demand_price          -0.001697
demand_income          0.001896
supply_(Intercept)     0.011864
supply_income         -0.001697
supply_farmPrice       0.001385
supply_trend           0.001896
> print( round( vcov( fitsuri5r2, modified.reg = TRUE ), digits = 6 ) )
          C1        C2        C3         C4        C5        C6
C1 45.688124 -0.440079 -0.015167  22.817210 -0.440079  0.210423
C2 -0.440079  0.006055 -0.001697  -0.239028  0.006055 -0.003454
C3 -0.015167 -0.001697  0.001896   0.011864 -0.001697  0.001385
C4 22.817210 -0.239028  0.011864 108.872157 -0.239028 -0.870241
C5 -0.440079  0.006055 -0.001697  -0.239028  0.006055 -0.003454
C6  0.210423 -0.003454  0.001385  -0.870241 -0.003454  0.012342
> print( round( vcov( fitsuri5r2$eq[[ 1 ]] ), digits = 6 ) )
            (Intercept)     price    income
(Intercept)   45.688124 -0.440079 -0.015167
price         -0.440079  0.006055 -0.001697
income        -0.015167 -0.001697  0.001896
> 
> print( round( vcov( fitsurio5wr2 ), digits = 6 ) )
                   demand_(Intercept) demand_price demand_income
demand_(Intercept)          51.319595    -0.579747      0.070528
demand_price                -0.579747     0.006646     -0.000872
demand_income                0.070528    -0.000872      0.000171
supply_(Intercept)          51.551829    -0.583025      0.072036
supply_price                -0.579747     0.006646     -0.000872
supply_farmPrice             0.061658    -0.000751      0.000138
supply_trend                 0.070528    -0.000872      0.000171
                   supply_(Intercept) supply_price supply_farmPrice
demand_(Intercept)          51.551829    -0.579747         0.061658
demand_price                -0.583025     0.006646        -0.000751
demand_income                0.072036    -0.000872         0.000138
supply_(Intercept)          52.210946    -0.583025         0.058794
supply_price                -0.583025     0.006646        -0.000751
supply_farmPrice             0.058794    -0.000751         0.000154
supply_trend                 0.072036    -0.000872         0.000138
                   supply_trend
demand_(Intercept)     0.070528
demand_price          -0.000872
demand_income          0.000171
supply_(Intercept)     0.072036
supply_price          -0.000872
supply_farmPrice       0.000138
supply_trend           0.000171
> print( round( vcov( fitsurio5wr2, modified.reg = TRUE ), digits = 6 ) )
          C1        C2        C3        C4        C5        C6
C1 51.319595 -0.579747  0.070528 51.551829 -0.579747  0.061658
C2 -0.579747  0.006646 -0.000872 -0.583025  0.006646 -0.000751
C3  0.070528 -0.000872  0.000171  0.072036 -0.000872  0.000138
C4 51.551829 -0.583025  0.072036 52.210946 -0.583025  0.058794
C5 -0.579747  0.006646 -0.000872 -0.583025  0.006646 -0.000751
C6  0.061658 -0.000751  0.000138  0.058794 -0.000751  0.000154
> print( round( vcov( fitsurio5wr2$eq[[ 2 ]] ), digits = 6 ) )
            (Intercept)     price farmPrice     trend
(Intercept)   52.210946 -0.583025  0.058794  0.072036
price         -0.583025  0.006646 -0.000751 -0.000872
farmPrice      0.058794 -0.000751  0.000154  0.000138
trend          0.072036 -0.000872  0.000138  0.000171
> 
> 
> ## *********** confidence intervals of coefficients *************
> print( confint( fitsur1e2, useDfSys = TRUE ) )
                    2.5 %  97.5 %
demand_(Intercept) 83.927 114.497
demand_price       -0.445  -0.088
demand_income       0.208   0.373
supply_(Intercept) 40.751  85.403
supply_price       -0.048   0.336
supply_farmPrice    0.128   0.285
supply_trend        0.202   0.463
> print( confint( fitsur1e2$eq[[ 2 ]], level = 0.9, useDfSys = TRUE ) )
               5 %   95 %
(Intercept) 44.506 81.648
price       -0.016  0.304
farmPrice    0.141  0.271
trend        0.224  0.441
> 
> print( confint( fitsur1we2, useDfSys = TRUE ) )
                    2.5 %  97.5 %
demand_(Intercept) 83.927 114.497
demand_price       -0.445  -0.088
demand_income       0.208   0.373
supply_(Intercept) 40.751  85.403
supply_price       -0.048   0.336
supply_farmPrice    0.128   0.285
supply_trend        0.202   0.463
> print( confint( fitsur1we2$eq[[ 1 ]], level = 0.9, useDfSys = TRUE ) )
               5 %    95 %
(Intercept) 86.498 111.926
price       -0.415  -0.118
income       0.222   0.360
> 
> print( confint( fitsur2e, level = 0.9 ) )
                      5 %    95 %
demand_(Intercept) 84.618 112.942
demand_price       -0.397  -0.074
demand_income       0.193   0.333
supply_(Intercept) 48.153  87.055
supply_price       -0.040   0.306
supply_farmPrice    0.116   0.240
supply_trend        0.193   0.333
> print( confint( fitsur2e$eq[[ 1 ]], level = 0.99 ) )
             0.5 %  99.5 %
(Intercept) 79.767 117.793
price       -0.452  -0.018
income       0.169   0.357
> 
> print( confint( fitsur3, level = 0.99 ) )
                    0.5 %  99.5 %
demand_(Intercept) 83.481 114.201
demand_price       -0.415  -0.065
demand_income       0.192   0.342
supply_(Intercept) 45.755  89.102
supply_price       -0.060   0.327
supply_farmPrice    0.111   0.248
supply_trend        0.192   0.342
> print( confint( fitsur3$eq[[ 2 ]], level = 0.5 ) )
              25 %   75 %
(Intercept) 60.157 74.699
price        0.068  0.198
farmPrice    0.157  0.202
trend        0.242  0.292
> 
> print( confint( fitsur4r3, level = 0.5 ) )
                     25 %    75 %
demand_(Intercept) 78.344 108.052
demand_price       -0.406  -0.070
demand_income       0.289   0.358
supply_(Intercept) 34.267  64.468
supply_price        0.094   0.430
supply_farmPrice    0.192   0.262
supply_trend        0.289   0.358
> print( confint( fitsur4r3$eq[[ 1 ]], level = 0.25 ) )
            37.5 % 62.5 %
(Intercept) 90.848 95.548
price       -0.265 -0.211
income       0.318  0.329
> 
> print( confint( fitsur5, level = 0.25 ) )
                   37.5 %  62.5 %
demand_(Intercept) 81.670 111.985
demand_price       -0.450  -0.109
demand_income       0.287   0.371
supply_(Intercept) 37.377  68.500
supply_price        0.050   0.391
supply_farmPrice    0.190   0.276
supply_trend        0.287   0.371
> print( confint( fitsur5$eq[[ 2 ]], level = 0.975 ) )
             1.3 % 98.8 %
(Intercept) 34.986 70.891
price        0.024  0.417
farmPrice    0.183  0.282
trend        0.280  0.377
> 
> print( confint( fitsuri1r3, level = 0.975 ) )
                    1.3 %  98.8 %
demand_(Intercept) 77.960 109.125
demand_price       -0.414  -0.043
demand_income       0.213   0.406
supply_(Intercept) 82.005  96.361
supply_income       0.574   0.753
supply_farmPrice   -0.550  -0.393
supply_trend       -0.932  -0.659
> print( confint( fitsuri1r3$eq[[ 1 ]], level = 0.999 ) )
             0.1 %   100 %
(Intercept) 64.257 122.828
price       -0.576   0.119
income       0.128   0.491
> 
> print( confint( fitsuri2, level = 0.999 ) )
                    0.1 %   100 %
demand_(Intercept) 92.129 122.607
demand_price       -0.580  -0.209
demand_income       0.243   0.433
supply_(Intercept) 60.441 109.649
supply_income       0.062   0.563
supply_farmPrice   -0.432   0.038
supply_trend        0.243   0.433
> print( confint( fitsuri2$eq[[ 2 ]], level = 0.1 ) )
              45 %   55 %
(Intercept) 83.512 86.578
income       0.297  0.328
farmPrice   -0.212 -0.183
trend        0.332  0.344
> 
> print( confint( fitsuri3e, level = 0.1 ) )
                     45 %    55 %
demand_(Intercept) 93.728 121.882
demand_price       -0.570  -0.227
demand_income       0.250   0.426
supply_(Intercept) 63.100 107.114
supply_income       0.087   0.534
supply_farmPrice   -0.406   0.014
supply_trend        0.250   0.426
> print( confint( fitsuri3e$eq[[ 1 ]], level = 0.01 ) )
             49.5 %  50.5 %
(Intercept) 107.718 107.893
price        -0.400  -0.398
income        0.337   0.338
> 
> print( confint( fitsurio4, level = 0.01 ) )
                   49.5 %  50.5 %
demand_(Intercept) 77.496 107.356
demand_price       -0.400  -0.055
demand_income       0.283   0.358
supply_(Intercept) 33.588  63.871
supply_price        0.100   0.445
supply_farmPrice    0.185   0.262
supply_trend        0.283   0.358
> print( confint( fitsurio4$eq[[ 2 ]], level = 0.33 ) )
            33.5 % 66.5 %
(Intercept) 45.524 51.935
price        0.236  0.309
farmPrice    0.215  0.231
trend        0.312  0.328
> print( confint( fitsuri4, level = 0.01 ) )
                   49.5 %  50.5 %
demand_(Intercept) 84.345 111.726
demand_price       -0.422  -0.107
demand_income       0.212   0.389
supply_(Intercept) 68.817 111.192
supply_income       0.078   0.393
supply_farmPrice   -0.392   0.058
supply_trend        0.212   0.389
> print( confint( fitsuri4$eq[[ 2 ]], level = 0.33 ) )
            33.5 % 66.5 %
(Intercept) 85.519 94.490
income       0.202  0.269
farmPrice   -0.214 -0.119
trend        0.282  0.319
> 
> print( confint( fitsurio4w, level = 0.01 ) )
                   49.5 %  50.5 %
demand_(Intercept) 77.496 107.356
demand_price       -0.400  -0.055
demand_income       0.283   0.358
supply_(Intercept) 33.587  63.871
supply_price        0.100   0.445
supply_farmPrice    0.185   0.262
supply_trend        0.283   0.358
> print( confint( fitsurio4w$eq[[ 1 ]], level = 0.33 ) )
            33.5 % 66.5 %
(Intercept) 89.266 95.587
price       -0.264 -0.191
income       0.312  0.328
> 
> print( confint( fitsurio5r2, level = 0.33 ) )
                   33.5 % 66.5 %
demand_(Intercept) 63.491 92.577
demand_price       -0.230  0.101
demand_income       0.274  0.327
supply_(Intercept) 19.527 48.865
supply_price        0.270  0.601
supply_farmPrice    0.182  0.232
supply_trend        0.274  0.327
> print( confint( fitsurio5r2$eq[[ 1 ]] ) )
             2.5 % 97.5 %
(Intercept) 63.491 92.577
price       -0.230  0.101
income       0.274  0.327
> print( confint( fitsuri5r2, level = 0.33 ) )
                   33.5 %  66.5 %
demand_(Intercept) 84.498 111.942
demand_price       -0.425  -0.109
demand_income       0.213   0.390
supply_(Intercept) 69.034 111.399
supply_income       0.075   0.391
supply_farmPrice   -0.392   0.059
supply_trend        0.213   0.390
> print( confint( fitsuri5r2$eq[[ 1 ]] ) )
             2.5 %  97.5 %
(Intercept) 84.498 111.942
price       -0.425  -0.109
income       0.213   0.390
> 
> 
> ## *********** fitted values *************
> print( fitted( fitsur1e2 ) )
      demand    supply
1   97.86993  98.06675
2   99.78491  99.19325
3   99.74431  99.40651
4   99.89485  99.68673
5  102.09509 101.70434
6  101.91058 101.70962
7  102.26632 101.73719
8  102.61793 103.46834
9  101.57929 102.37733
10 100.73188 100.28755
11  96.22362  96.84233
12  95.22252  95.43816
13  96.36625  96.83619
14  99.21841  98.73829
15 103.82338 102.86076
16 103.51628 104.22984
17 104.17440 103.97780
18 101.82846 103.11583
19 103.19292 103.04016
20 105.90266 105.24703
> print( fitted( fitsur1e2$eq[[ 2 ]] ) )
 [1]  98.06675  99.19325  99.40651  99.68673 101.70434 101.70962 101.73719
 [8] 103.46834 102.37733 100.28755  96.84233  95.43816  96.83619  98.73829
[15] 102.86076 104.22984 103.97780 103.11583 103.04016 105.24703
> 
> print( fitted( fitsur2e ) )
      demand    supply
1   98.16035  98.68475
2   99.91618  99.66763
3   99.87453  99.82060
4  100.01707 100.04744
5  101.96906 101.71335
6  101.81075 101.70561
7  102.14213 101.71846
8  102.48214 103.22226
9  101.49320 102.18429
10 100.69563 100.30849
11  96.62806  97.31977
12  95.75625  96.12877
13  96.81531  97.34789
14  99.37103  98.93366
15 103.51555 102.44415
16 103.25746 103.63174
17 103.78201 103.28887
18 101.76349 102.66591
19 103.00829 102.59065
20 105.50552 104.53970
> print( fitted( fitsur2e$eq[[ 1 ]] ) )
 [1]  98.16035  99.91618  99.87453 100.01707 101.96906 101.81075 102.14213
 [8] 102.48214 101.49320 100.69563  96.62806  95.75625  96.81531  99.37103
[15] 103.51555 103.25746 103.78201 101.76349 103.00829 105.50552
> 
> print( fitted( fitsur2we ) )
      demand    supply
1   98.17764  98.69749
2   99.92399  99.67351
3   99.88228  99.82547
4  100.02434 100.05179
5  101.96155 101.69620
6  101.80481 101.69078
7  102.13473 101.70583
8  102.47406 103.19688
9  101.48807 102.16587
10 100.69347 100.30835
11  96.65214  97.35495
12  95.78802  96.18218
13  96.84204  97.39196
14  99.38011  98.95871
15 103.49722 102.42940
16 103.24205 103.60746
17 103.75865 103.26143
18 101.75962 102.65852
19 102.99730 102.58653
20 105.48188 104.52068
> print( fitted( fitsur2we$eq[[ 2 ]] ) )
 [1]  98.69749  99.67351  99.82547 100.05179 101.69620 101.69078 101.70583
 [8] 103.19688 102.16587 100.30835  97.35495  96.18218  97.39196  98.95871
[15] 102.42940 103.60746 103.26143 102.65852 102.58653 104.52068
> 
> print( fitted( fitsur3 ) )
      demand    supply
1   98.11947  98.64916
2   99.89770  99.63857
3   99.85619  99.79512
4   99.99986 100.02529
5  101.98680 101.70511
6  101.82481 101.69927
7  102.15961 101.71408
8  102.50126 103.22738
9  101.50532 102.18897
10 100.70074 100.30703
11  96.57113  97.30357
12  95.68111  96.10646
13  96.75209  97.33336
14  99.34954  98.93178
15 103.55888 102.46540
16 103.29390 103.66086
17 103.83725 103.32264
18 101.77264 102.69266
19 103.03428 102.61883
20 105.56143 104.57846
> print( fitted( fitsur3$eq[[ 2 ]] ) )
 [1]  98.64916  99.63857  99.79512 100.02529 101.70511 101.69927 101.71408
 [8] 103.22738 102.18897 100.30703  97.30357  96.10646  97.33336  98.93178
[15] 102.46540 103.66086 103.32264 102.69266 102.61883 104.57846
> 
> print( fitted( fitsur4r3 ) )
      demand    supply
1   97.55095  98.22038
2   99.90843  99.82542
3   99.81502  99.93144
4  100.04469 100.30795
5  102.11060 101.81170
6  101.99034 101.92540
7  102.47942 102.07970
8  103.08550 104.32487
9  101.44686 102.22005
10 100.20125  99.33709
11  95.29995  95.69531
12  94.52053  94.69931
13  96.03068  96.62035
14  98.95807  98.24070
15 103.86315 102.35781
16 103.71601 104.16673
17 103.75096 102.60856
18 102.16474 103.43160
19 103.78302 103.48708
20 107.24383 106.67254
> print( fitted( fitsur4r3$eq[[ 1 ]] ) )
 [1]  97.55095  99.90843  99.81502 100.04469 102.11060 101.99034 102.47942
 [8] 103.08550 101.44686 100.20125  95.29995  94.52053  96.03068  98.95807
[15] 103.86315 103.71601 103.75096 102.16474 103.78302 107.24383
> 
> print( fitted( fitsur5 ) )
      demand    supply
1   97.48248  98.16306
2   99.73195  99.61555
3   99.66811  99.76162
4   99.86142 100.09344
5  102.20714 101.94440
6  102.03012 101.98852
7  102.46699 102.06678
8  102.94438 104.18681
9  101.59056 102.42786
10 100.51995  99.72270
11  95.46530  95.89996
12  94.45766  94.60230
13  95.83911  96.37056
14  98.97251  98.22784
15 104.09792 102.61831
16 103.82299 104.30896
17 104.30800 103.28488
18 102.03603 103.28342
19 103.61597 103.25356
20 106.84541 106.14347
> print( fitted( fitsur5$eq[[ 2 ]] ) )
 [1]  98.16306  99.61555  99.76162 100.09344 101.94440 101.98852 102.06678
 [8] 104.18681 102.42786  99.72270  95.89996  94.60230  96.37056  98.22784
[15] 102.61831 104.30896 103.28488 103.28342 103.25356 106.14347
> 
> print( fitted( fitsuri1r3 ) )
      demand    supply
1   97.68981 100.19968
2   99.94844 105.65697
3   99.85911 104.26398
4  100.07898 104.93581
5  102.06079  99.21405
6  101.94515 100.10923
7  102.41352 102.33216
8  102.99351 102.61002
9  101.42499  94.89785
10 100.23241  92.80994
11  95.53408  92.09503
12  94.78557  98.34149
13  96.23199 101.57326
14  99.03892  99.80990
15 103.74132  97.45777
16 103.59945  96.71687
17 103.63597  87.55226
18 102.11116 100.55529
19 103.66182 105.45107
20 106.97702 113.79838
> print( fitted( fitsuri1r3$eq[[ 1 ]] ) )
 [1]  97.68981  99.94844  99.85911 100.07898 102.06079 101.94515 102.41352
 [8] 102.99351 101.42499 100.23241  95.53408  94.78557  96.23199  99.03892
[15] 103.74132 103.59945 103.63597 102.11116 103.66182 106.97702
> 
> print( fitted( fitsuri1wr3 ) )
      demand    supply
1   97.68981 100.19968
2   99.94844 105.65697
3   99.85911 104.26398
4  100.07898 104.93581
5  102.06079  99.21405
6  101.94515 100.10923
7  102.41352 102.33216
8  102.99351 102.61002
9  101.42499  94.89785
10 100.23241  92.80994
11  95.53408  92.09503
12  94.78557  98.34149
13  96.23199 101.57326
14  99.03892  99.80990
15 103.74132  97.45777
16 103.59945  96.71687
17 103.63597  87.55226
18 102.11116 100.55529
19 103.66182 105.45107
20 106.97702 113.79838
> print( fitted( fitsuri1wr3$eq[[ 2 ]] ) )
 [1] 100.19968 105.65697 104.26398 104.93581  99.21405 100.10923 102.33216
 [8] 102.61002  94.89785  92.80994  92.09503  98.34149 101.57326  99.80990
[15]  97.45777  96.71687  87.55226 100.55529 105.45107 113.79838
> 
> print( fitted( fitsuri2 ) )
      demand    supply
1   97.35091  93.36816
2   99.24572  96.67679
3   99.26837  96.73373
4   99.35317  97.73784
5  102.46020  96.07146
6  102.12299  97.14112
7  102.40098  98.83575
8  102.49826  99.78310
9  101.99143  96.83833
10 101.44578  96.36773
11  96.04646  96.25883
12  94.40045  99.60485
13  95.38434 101.89561
14  99.05118 102.03803
15 104.71301 102.16068
16 104.07502 102.59137
17 105.84788  99.12626
18 101.64313 105.51407
19 103.08214 108.45198
20 105.58258 113.18530
> print( fitted( fitsuri2$eq[[ 2 ]] ) )
 [1]  93.36816  96.67679  96.73373  97.73784  96.07146  97.14112  98.83575
 [8]  99.78310  96.83833  96.36773  96.25883  99.60485 101.89561 102.03803
[15] 102.16068 102.59137  99.12626 105.51407 108.45198 113.18530
> 
> print( fitted( fitsuri3e ) )
      demand    supply
1   97.35227  93.39107
2   99.22821  96.68196
3   99.25451  96.74030
4   99.33451  97.74013
5  102.46794  96.08641
6  102.12454  97.15126
7  102.39520  98.83740
8  102.47607  99.78123
9  102.00639  96.85554
10 101.48423  96.38878
11  96.08082  96.28064
12  94.41078  99.60759
13  95.37577 101.88673
14  99.05818 102.03093
15 104.73177 102.15633
16 104.07953 102.58644
17 105.90389  99.14402
18 101.62489 105.49429
19 103.05506 108.41630
20 105.51945 113.12367
> print( fitted( fitsuri3e$eq[[ 1 ]] ) )
 [1]  97.35227  99.22821  99.25451  99.33451 102.46794 102.12454 102.39520
 [8] 102.47607 102.00639 101.48423  96.08082  94.41078  95.37577  99.05818
[15] 104.73177 104.07953 105.90389 101.62489 103.05506 105.51945
> 
> print( fitted( fitsurio4 ) )
      demand    supply
1   97.58308  98.24526
2   99.95282  99.88448
3   99.85326  99.97894
4  100.08990 100.36778
5  102.08294 101.75018
6  101.97596 101.88658
7  102.47423 102.06521
8  103.10599 104.32973
9  101.41202 102.13908
10 100.13361  99.23051
11  95.29121  95.68286
12  94.56667  94.79303
13  96.09795  96.74525
14  98.96461  98.27764
15 103.79581 102.27108
16 103.67795 104.10145
17 103.61224 102.39319
18 102.18710 103.46845
19 103.80580 103.55214
20 107.30084 106.80117
> print( fitted( fitsurio4$eq[[ 2 ]] ) )
 [1]  98.24526  99.88448  99.97894 100.36778 101.75018 101.88658 102.06521
 [8] 104.32973 102.13908  99.23051  95.68286  94.79303  96.74525  98.27764
[15] 102.27108 104.10145 102.39319 103.46845 103.55214 106.80117
> print( fitted( fitsuri4 ) )
      demand    supply
1   97.77039  94.54757
2   99.79457  97.06610
3   99.74330  97.15491
4   99.91094  97.97536
5  102.11320  96.53614
6  101.93869  97.43491
7  102.32454  98.80451
8  102.72947  99.48810
9  101.56246  97.33553
10 100.62787  97.17349
11  95.98714  97.49203
12  95.01596 100.28300
13  96.24452 102.01301
14  99.14718 101.97624
15 103.86799 101.73637
16 103.58773 102.05790
17 104.13448  99.39390
18 101.90481 104.57769
19 103.33526 106.89475
20 106.22350 110.43950
> print( fitted( fitsuri4$eq[[ 2 ]] ) )
 [1]  94.54757  97.06610  97.15491  97.97536  96.53614  97.43491  98.80451
 [8]  99.48810  97.33553  97.17349  97.49203 100.28300 102.01301 101.97624
[15] 101.73637 102.05790  99.39390 104.57769 106.89475 110.43950
> 
> print( fitted( fitsurio5r2 ) )
      demand    supply
1   97.83047  98.45809
2  100.64318 100.70216
3  100.42613 100.64203
4  100.80798 101.20197
5  101.70992 101.30026
6  101.82633 101.69612
7  102.53421 102.15945
8  103.67852 104.93910
9  100.84811 101.39156
10  98.86986  97.74386
11  94.59944  94.79519
12  94.77107  95.01703
13  96.82118  97.58181
14  98.89422  98.24894
15 102.88880 101.29338
16 103.27477 103.60359
17 101.43140  99.83964
18 102.70430 104.03975
19 104.48562 104.44111
20 108.91847 108.86897
> print( fitted( fitsurio5r2$eq[[ 1 ]] ) )
 [1]  97.83047 100.64318 100.42613 100.80798 101.70992 101.82633 102.53421
 [8] 103.67852 100.84811  98.86986  94.59944  94.77107  96.82118  98.89422
[15] 102.88880 103.27477 101.43140 102.70430 104.48562 108.91847
> print( fitted( fitsuri5r2 ) )
      demand    supply
1   97.76508  94.56652
2   99.78489  97.06224
3   99.73511  97.15356
4   99.90099  97.97098
5  102.11884  96.52936
6  101.94133  97.42683
7  102.32472  98.79053
8  102.72329  99.46433
9  101.57021  97.33776
10 100.64404  97.19326
11  95.99280  97.54256
12  95.00936 100.32908
13  96.23203 102.04209
14  99.14691 101.99271
15 103.88173 101.72606
16 103.59476 102.04363
17 104.16489  99.40034
18 101.89879 104.56514
19 103.32810 106.86804
20 106.20614 110.37598
> print( fitted( fitsuri5r2$eq[[ 1 ]] ) )
 [1]  97.76508  99.78489  99.73511  99.90099 102.11884 101.94133 102.32472
 [8] 102.72329 101.57021 100.64404  95.99280  95.00936  96.23203  99.14691
[15] 103.88173 103.59476 104.16489 101.89879 103.32810 106.20614
> 
> 
> ## *********** predicted values *************
> predictData <- Kmenta
> predictData$consump <- NULL
> predictData$price <- Kmenta$price * 0.9
> predictData$income <- Kmenta$income * 1.1
> 
> print( predict( fitsur1e2, se.fit = TRUE, interval = "prediction",
+    useDfSys = TRUE ) )
   demand.pred demand.se.fit demand.lwr demand.upr supply.pred supply.se.fit
1     97.86993     0.6065642   93.65231  102.08754    98.06675     0.7796843
2     99.78491     0.5691035   95.58897  103.98086    99.19325     0.7933149
3     99.74431     0.5365027   95.56617  103.92244    99.40651     0.7284511
4     99.89485     0.5751120   95.69551  104.09418    99.68673     0.7550714
5    102.09509     0.4930722   97.93917  106.25102   101.70434     0.6524107
6    101.91058     0.4576463   97.77146  106.04970   101.70962     0.6049095
7    102.26632     0.4748795   98.11917  106.41346   101.73719     0.5923362
8    102.61793     0.5928897   98.40837  106.82749   103.46834     0.8351629
9    101.57929     0.5229385   97.40828  105.75030   102.37733     0.7172604
10   100.73188     0.7877655   96.39206  105.07171   100.28755     0.9795979
11    96.22362     0.8977644   91.79626  100.65099    96.84233     1.0812621
12    95.22252     0.8979440   90.79501   99.65003    95.43816     1.1591557
13    96.36625     0.8160407   92.00485  100.72764    96.83619     1.0193827
14    99.21841     0.4951710   95.06145  103.37537    98.73829     0.7095672
15   103.82338     0.7237624   99.52994  108.11683   102.86076     0.8164131
16   103.51628     0.5863922   99.31049  107.72207   104.22984     0.8304227
17   104.17440     1.2400107   99.41730  108.93150   103.97780     1.5396564
18   101.82846     0.5334141   97.65197  106.00496   103.11583     0.7703822
19   103.19292     0.6663832   98.93811  107.44774   103.04016     0.8615643
20   105.90266     1.2402140  101.14534  110.65998   105.24703     1.5165512
   supply.lwr supply.upr
1    92.61116   103.5223
2    93.72953   104.6570
3    93.98031   104.8327
4    94.24549   105.1280
5    96.31834   107.0903
6    96.34662   107.0726
7    96.38000   107.0944
8    97.97887   108.9578
9    96.95731   107.7974
10   94.70013   105.8750
11   91.17783   102.5068
12   89.71026   101.1661
13   91.21939   102.4530
14   93.32246   104.1541
15   97.38298   108.3385
16   98.74335   109.7163
17   97.89015   110.0654
18   97.66572   108.5659
19   97.53382   108.5465
20   99.18344   111.3106
> print( predict( fitsur1e2$eq[[ 2 ]], se.fit = TRUE, interval = "prediction",
+    useDfSys = TRUE ) )
         fit    se.fit      lwr      upr
1   98.06675 0.7796843 92.61116 103.5223
2   99.19325 0.7933149 93.72953 104.6570
3   99.40651 0.7284511 93.98031 104.8327
4   99.68673 0.7550714 94.24549 105.1280
5  101.70434 0.6524107 96.31834 107.0903
6  101.70962 0.6049095 96.34662 107.0726
7  101.73719 0.5923362 96.38000 107.0944
8  103.46834 0.8351629 97.97887 108.9578
9  102.37733 0.7172604 96.95731 107.7974
10 100.28755 0.9795979 94.70013 105.8750
11  96.84233 1.0812621 91.17783 102.5068
12  95.43816 1.1591557 89.71026 101.1661
13  96.83619 1.0193827 91.21939 102.4530
14  98.73829 0.7095672 93.32246 104.1541
15 102.86076 0.8164131 97.38298 108.3385
16 104.22984 0.8304227 98.74335 109.7163
17 103.97780 1.5396564 97.89015 110.0654
18 103.11583 0.7703822 97.66572 108.5659
19 103.04016 0.8615643 97.53382 108.5465
20 105.24703 1.5165512 99.18344 111.3106
> 
> print( predict( fitsur2e, se.pred = TRUE, interval = "confidence",
+    level = 0.999, newdata = predictData ) )
   demand.pred demand.se.pred demand.lwr demand.upr supply.pred supply.se.pred
1     102.8209       2.234699   99.75583   105.8860    97.35220       2.795247
2     104.9379       2.224251  101.97292   107.9028    98.28274       2.709171
3     104.8530       2.233508  101.79919   107.9069    98.44672       2.719320
4     105.0602       2.225128  102.08677   108.0337    98.65934       2.701366
5     106.9012       2.423994  102.33739   111.4650   100.41165       2.828238
6     106.7956       2.385944  102.49957   111.0916   100.38458       2.789549
7     107.2359       2.374171  103.02528   111.4464   100.37605       2.751963
8     107.7839       2.341421  103.81822   111.7496   101.83074       2.698769
9     106.3046       2.435482  101.66212   110.9470   100.90324       2.873025
10    105.1816       2.543622   99.83997   110.5233    99.09676       3.046529
11    100.7947       2.390114   96.46876   105.1206    96.08336       3.048671
12    100.1048       2.241052   96.98011   103.2294    94.81644       2.957882
13    101.4631       2.170520   99.06947   103.8567    95.98101       2.830079
14    104.0789       2.298331  100.45474   107.7031    97.62193       2.847843
15    108.4667       2.578891  102.91011   114.0233   101.18073       2.913100
16    108.3396       2.487840  103.35022   113.3291   102.32406       2.828467
17    108.3540       2.850434  101.28361   115.4243   102.13995       3.259070
18    106.9582       2.310486  103.23521   110.6813   101.28431       2.699692
19    108.4100       2.362745  104.28362   112.5364   101.18577       2.676799
20    111.5204       2.515582  106.35382   116.6871   103.03226       2.660543
   supply.lwr supply.upr
1    93.63003  101.07437
2    95.50575  101.05973
3    95.54396  101.34948
4    95.98274  101.33594
5    96.37929  104.44401
6    96.71825  104.05092
7    97.09862  103.65347
8    99.18832  104.47317
9    96.47939  105.32710
10   93.36208  104.83143
11   90.33394  101.83279
12   89.71883   99.91404
13   91.93194  100.03008
14   93.41447  101.82938
15   96.42923  105.93224
16   98.28962  106.35850
17   95.05035  109.22956
18   98.62969  103.93893
19   98.85100  103.52054
20  100.95230  105.11223
> print( predict( fitsur2e$eq[[ 1 ]], se.pred = TRUE, interval = "confidence",
+    level = 0.999, newdata = predictData ) )
        fit  se.pred       lwr      upr
1  102.8209 2.234699  99.75583 105.8860
2  104.9379 2.224251 101.97292 107.9028
3  104.8530 2.233508 101.79919 107.9069
4  105.0602 2.225128 102.08677 108.0337
5  106.9012 2.423994 102.33739 111.4650
6  106.7956 2.385944 102.49957 111.0916
7  107.2359 2.374171 103.02528 111.4464
8  107.7839 2.341421 103.81822 111.7496
9  106.3046 2.435482 101.66212 110.9470
10 105.1816 2.543622  99.83997 110.5233
11 100.7947 2.390114  96.46876 105.1206
12 100.1048 2.241052  96.98011 103.2294
13 101.4631 2.170520  99.06947 103.8567
14 104.0789 2.298331 100.45474 107.7031
15 108.4667 2.578891 102.91011 114.0233
16 108.3396 2.487840 103.35022 113.3291
17 108.3540 2.850434 101.28361 115.4243
18 106.9582 2.310486 103.23521 110.6813
19 108.4100 2.362745 104.28362 112.5364
20 111.5204 2.515582 106.35382 116.6871
> 
> print( predict( fitsur3, se.pred = TRUE, interval = "prediction",
+    level = 0.975 ) )
   demand.pred demand.se.pred demand.lwr demand.upr supply.pred supply.se.pred
1     98.11947       2.133052   93.11734   103.1216    98.64916       2.670082
2     99.89770       2.129027   94.90501   104.8904    99.63857       2.689736
3     99.85619       2.120457   94.88360   104.8288    99.79512       2.677337
4     99.99986       2.130883   95.00282   104.9969   100.02529       2.690116
5    101.98680       2.109848   97.03909   106.9345   101.70511       2.674236
6    101.82481       2.102319   96.89475   106.7549   101.69927       2.664168
7    102.15961       2.105659   97.22172   107.0975   101.71408       2.662378
8    102.50126       2.135479   97.49344   107.5091   103.22738       2.723409
9    101.50532       2.117942   96.53862   106.4720   102.18897       2.691655
10   100.70074       2.199993   95.54163   105.8598   100.30703       2.779109
11    96.57113       2.227430   91.34768   101.7946    97.30357       2.797386
12    95.68111       2.216328   90.48370   100.8785    96.10646       2.806543
13    96.75209       2.191781   91.61224   101.8919    97.33336       2.768697
14    99.34954       2.109627   94.40235   104.2967    98.93178       2.687681
15   103.55888       2.168792   98.47294   108.6448   102.46540       2.707316
16   103.29390       2.128997   98.30128   108.2865   103.66086       2.694605
17   103.83725       2.388911   98.23512   109.4394   103.32264       2.987666
18   101.77264       2.120896   96.79902   106.7463   102.69266       2.686750
19   103.03428       2.155844   97.97871   108.0899   102.61883       2.713132
20   105.56143       2.388696   99.95980   111.1631   104.57846       2.968690
   supply.lwr supply.upr
1    92.38766   104.9106
2    93.33099   105.9462
3    93.51661   106.0736
4    93.71682   106.3338
5    95.43387   107.9763
6    95.45164   107.9469
7    95.47065   107.9575
8    96.84083   109.6139
9    95.87689   108.5011
10   93.78986   106.8242
11   90.74354   103.8636
12   89.52495   102.6880
13   90.84061   103.8261
14   92.62901   105.2345
15   96.11659   108.8142
16   97.34186   109.9799
17   96.31640   110.3289
18   96.39208   108.9932
19   96.25638   108.9813
20   97.61671   111.5402
> print( predict( fitsur3$eq[[ 2 ]], se.pred = TRUE, interval = "prediction",
+    level = 0.975 ) )
         fit  se.pred      lwr      upr
1   98.64916 2.670082 92.38766 104.9106
2   99.63857 2.689736 93.33099 105.9462
3   99.79512 2.677337 93.51661 106.0736
4  100.02529 2.690116 93.71682 106.3338
5  101.70511 2.674236 95.43387 107.9763
6  101.69927 2.664168 95.45164 107.9469
7  101.71408 2.662378 95.47065 107.9575
8  103.22738 2.723409 96.84083 109.6139
9  102.18897 2.691655 95.87689 108.5011
10 100.30703 2.779109 93.78986 106.8242
11  97.30357 2.797386 90.74354 103.8636
12  96.10646 2.806543 89.52495 102.6880
13  97.33336 2.768697 90.84061 103.8261
14  98.93178 2.687681 92.62901 105.2345
15 102.46540 2.707316 96.11659 108.8142
16 103.66086 2.694605 97.34186 109.9799
17 103.32264 2.987666 96.31640 110.3289
18 102.69266 2.686750 96.39208 108.9932
19 102.61883 2.713132 96.25638 108.9813
20 104.57846 2.968690 97.61671 111.5402
> 
> print( predict( fitsur4r3, se.fit = TRUE, interval = "confidence",
+    level = 0.25 ) )
   demand.pred demand.se.fit demand.lwr demand.upr supply.pred supply.se.fit
1     97.55095     0.4737708   97.39879   97.70310    98.22038     0.5708194
2     99.90843     0.5582771   99.72914  100.08773    99.82542     0.6985615
3     99.81502     0.5234839   99.64689   99.98314    99.93144     0.6514511
4    100.04469     0.5668127   99.86265  100.22672   100.30795     0.7005657
5    102.11060     0.4756939  101.95783  102.26337   101.81170     0.6200448
6    101.99034     0.4428282  101.84812  102.13255   101.92540     0.5737393
7    102.47942     0.4404810  102.33795  102.62088   102.07970     0.5590285
8    103.08550     0.5316666  102.91475  103.25625   104.32487     0.6459714
9    101.44686     0.5196829  101.27996  101.61376   102.22005     0.6924936
10   100.20125     0.7743770   99.95256  100.44995    99.33709     0.9385592
11    95.29995     0.6119672   95.10341   95.49649    95.69531     0.7321967
12    94.52053     0.5245277   94.35208   94.68899    94.69931     0.6866087
13    96.03068     0.6033512   95.83691   96.22445    96.62035     0.7909648
14    98.95807     0.4436440   98.81559   99.10055    98.24070     0.5802077
15   103.86315     0.6429018  103.65668  104.06962   102.35781     0.7585678
16   103.71601     0.4938945  103.55740  103.87463   104.16673     0.6342366
17   103.75096     1.1905521  103.36860  104.13332   102.60856     1.4562053
18   102.16474     0.5104476  102.00081  102.32868   103.43160     0.6218415
19   103.78302     0.5697120  103.60006  103.96599   103.48708     0.7144057
20   107.24383     0.9727492  106.93142  107.55624   106.67254     1.1829576
   supply.lwr supply.upr
1    98.03705   98.40370
2    99.60107  100.04977
3    99.72222  100.14066
4   100.08295  100.53294
5   101.61257  102.01083
6   101.74114  102.10967
7   101.90016  102.25924
8   104.11741  104.53233
9   101.99765  102.44245
10   99.03567   99.63852
11   95.46016   95.93046
12   94.47880   94.91982
13   96.36633   96.87438
14   98.05437   98.42704
15  102.11419  102.60143
16  103.96304  104.37042
17  102.14089  103.07624
18  103.23189  103.63131
19  103.25764  103.71652
20  106.29262  107.05246
> print( predict( fitsur4r3$eq[[ 1 ]], se.fit = TRUE, interval = "confidence",
+    level = 0.25 ) )
         fit    se.fit       lwr       upr
1   97.55095 0.4737708  97.39879  97.70310
2   99.90843 0.5582771  99.72914 100.08773
3   99.81502 0.5234839  99.64689  99.98314
4  100.04469 0.5668127  99.86265 100.22672
5  102.11060 0.4756939 101.95783 102.26337
6  101.99034 0.4428282 101.84812 102.13255
7  102.47942 0.4404810 102.33795 102.62088
8  103.08550 0.5316666 102.91475 103.25625
9  101.44686 0.5196829 101.27996 101.61376
10 100.20125 0.7743770  99.95256 100.44995
11  95.29995 0.6119672  95.10341  95.49649
12  94.52053 0.5245277  94.35208  94.68899
13  96.03068 0.6033512  95.83691  96.22445
14  98.95807 0.4436440  98.81559  99.10055
15 103.86315 0.6429018 103.65668 104.06962
16 103.71601 0.4938945 103.55740 103.87463
17 103.75096 1.1905521 103.36860 104.13332
18 102.16474 0.5104476 102.00081 102.32868
19 103.78302 0.5697120 103.60006 103.96599
20 107.24383 0.9727492 106.93142 107.55624
> 
> print( predict( fitsur4we, se.fit = TRUE, interval = "confidence",
+    level = 0.25 ) )
   demand.pred demand.se.fit demand.lwr demand.upr supply.pred supply.se.fit
1     97.47725     0.4449568   97.33435   97.62016    98.15951     0.5188164
2     99.72521     0.5143438   99.56002   99.89040    99.60729     0.6357442
3     99.66227     0.4818265   99.50753   99.81701    99.75514     0.5912152
4     99.85458     0.5225532   99.68676  100.02240   100.08472     0.6362371
5    102.21142     0.4376967  102.07085  102.35199   101.95926     0.5679449
6    102.03240     0.4079305  101.90139  102.16341   101.99892     0.5233953
7    102.46797     0.4090126  102.33662  102.59933   102.07247     0.5082679
8    102.94162     0.5032413  102.78000  103.10324   104.19129     0.6030708
9    101.59582     0.4789876  101.44199  101.74966   102.44497     0.6312674
10   100.52992     0.7239875  100.29741  100.76244    99.74048     0.8557677
11    95.46585     0.6120242   95.26929   95.66241    95.89558     0.6940869
12    94.44995     0.5196376   94.28306   94.61683    94.57684     0.6765328
13    95.82845     0.5645588   95.64713   96.00976    96.34132     0.7476109
14    98.97127     0.4138265   98.83837   99.10418    98.21622     0.5402203
15   104.10834     0.5923922  103.91809  104.29860   102.63393     0.6895114
16   103.82903     0.4583169  103.68184  103.97623   104.32244     0.5808409
17   104.32903     1.0999816  103.97576  104.68230   103.32340     1.3341998
18   102.03287     0.4769818  101.87968  102.18605   103.27641     0.5644859
19   103.61296     0.5452111  103.43786  103.78806   103.24102     0.6507778
20   106.83777     0.9578108  106.53016  107.14538   106.12279     1.0906597
   supply.lwr supply.upr
1    97.99289   98.32613
2    99.40311   99.81146
3    99.56527   99.94501
4    99.88039  100.28906
5   101.77686  102.14166
6   101.83083  102.16702
7   101.90924  102.23571
8   103.99761  104.38498
9   102.24223  102.64771
10   99.46564  100.01531
11   95.67266   96.11849
12   94.35956   94.79411
13   96.10121   96.58142
14   98.04272   98.38972
15  102.41248  102.85537
16  104.13589  104.50898
17  102.89491  103.75189
18  103.09512  103.45770
19  103.03202  103.45003
20  105.77252  106.47307
> print( predict( fitsur4we$eq[[ 2 ]], se.fit = TRUE, interval = "confidence",
+    level = 0.25 ) )
         fit    se.fit       lwr       upr
1   98.15951 0.5188164  97.99289  98.32613
2   99.60729 0.6357442  99.40311  99.81146
3   99.75514 0.5912152  99.56527  99.94501
4  100.08472 0.6362371  99.88039 100.28906
5  101.95926 0.5679449 101.77686 102.14166
6  101.99892 0.5233953 101.83083 102.16702
7  102.07247 0.5082679 101.90924 102.23571
8  104.19129 0.6030708 103.99761 104.38498
9  102.44497 0.6312674 102.24223 102.64771
10  99.74048 0.8557677  99.46564 100.01531
11  95.89558 0.6940869  95.67266  96.11849
12  94.57684 0.6765328  94.35956  94.79411
13  96.34132 0.7476109  96.10121  96.58142
14  98.21622 0.5402203  98.04272  98.38972
15 102.63393 0.6895114 102.41248 102.85537
16 104.32244 0.5808409 104.13589 104.50898
17 103.32340 1.3341998 102.89491 103.75189
18 103.27641 0.5644859 103.09512 103.45770
19 103.24102 0.6507778 103.03202 103.45003
20 106.12279 1.0906597 105.77252 106.47307
> 
> print( predict( fitsur5, se.fit = TRUE, se.pred = TRUE,
+    interval = "prediction", level = 0.5, newdata = predictData ) )
   demand.pred demand.se.fit demand.se.pred demand.lwr demand.upr supply.pred
1     103.1615     0.9110027       2.143328  101.70065   104.6223    95.95365
2     105.8564     0.7856275       2.093117  104.42980   107.2830    97.31936
3     105.7398     0.8241551       2.107881  104.30313   107.1764    97.48367
4     106.0124     0.7795949       2.090861  104.58730   107.4374    97.79191
5     108.2287     1.2325290       2.298490  106.66210   109.7952    99.78613
6     108.1154     1.1427001       2.251598  106.58074   109.6500    99.79821
7     108.6860     1.0761948       2.218586  107.17389   110.1981    99.84101
8     109.4180     0.9185636       2.146553  107.95498   110.8810   101.87962
9     107.4634     1.2951603       2.332674  105.87355   109.0533   100.30384
10    105.9938     1.5684125       2.494764  104.29343   107.6941    97.71359
11    100.5376     1.2924741       2.331184   98.94871   102.1264    93.84995
12     99.7490     0.9207918       2.147507   98.28534   101.2127    92.42642
13    101.4984     0.7200549       2.069398  100.08797   102.9088    94.10422
14    104.7128     1.0541139       2.207960  103.20794   106.2177    96.05294
15    110.1473     1.4853559       2.443402  108.48193   111.8126   100.52351
16    110.0313     1.2837966       2.326384  108.44570   111.6169   102.14078
17    109.8960     2.0131407       2.795830  107.99043   111.8015   101.37994
18    108.3770     0.9061542       2.141272  106.91759   109.8364   100.99268
19    110.2130     0.9114301       2.143510  108.75208   111.6740   100.92422
20    114.1974     0.8976719       2.137696  112.74046   115.6544   103.64408
   supply.se.fit supply.se.pred supply.lwr supply.upr
1      0.9156693       2.679649   94.12730   97.78001
2      0.7146319       2.617779   95.53517   99.10354
3      0.7604870       2.630667   95.69071   99.27664
4      0.7080207       2.615982   96.00895   99.57487
5      1.2131205       2.795305   97.88095  101.69131
6      1.1002909       2.748219   97.92512  101.67129
7      0.9818519       2.702980   97.99875  101.68326
8      0.8248414       2.649987  100.07349  103.68576
9      1.3394679       2.852410   98.35974  102.24794
10     1.6310828       3.000416   95.66862   99.75857
11     1.3746336       2.869091   91.89448   95.80542
12     1.0246954       2.718836   90.57336   94.27948
13     0.8305953       2.651784   92.29686   95.91158
14     1.0325512       2.721806   94.19786   97.90803
15     1.4335562       2.897784   98.54849  102.49854
16     1.2489979       2.811061  100.22486  104.05670
17     2.1632839       3.319919   99.11720  103.64267
18     0.8089887       2.645096   99.18988  102.79548
19     0.7116083       2.616955   99.14060  102.70784
20     0.5719738       2.582484  101.88396  105.40421
> print( predict( fitsur5$eq[[ 2 ]], se.fit = TRUE, se.pred = TRUE,
+    interval = "prediction", level = 0.5, newdata = predictData ) )
         fit    se.fit  se.pred       lwr       upr
1   95.95365 0.9156693 2.679649  94.12730  97.78001
2   97.31936 0.7146319 2.617779  95.53517  99.10354
3   97.48367 0.7604870 2.630667  95.69071  99.27664
4   97.79191 0.7080207 2.615982  96.00895  99.57487
5   99.78613 1.2131205 2.795305  97.88095 101.69131
6   99.79821 1.1002909 2.748219  97.92512 101.67129
7   99.84101 0.9818519 2.702980  97.99875 101.68326
8  101.87962 0.8248414 2.649987 100.07349 103.68576
9  100.30384 1.3394679 2.852410  98.35974 102.24794
10  97.71359 1.6310828 3.000416  95.66862  99.75857
11  93.84995 1.3746336 2.869091  91.89448  95.80542
12  92.42642 1.0246954 2.718836  90.57336  94.27948
13  94.10422 0.8305953 2.651784  92.29686  95.91158
14  96.05294 1.0325512 2.721806  94.19786  97.90803
15 100.52351 1.4335562 2.897784  98.54849 102.49854
16 102.14078 1.2489979 2.811061 100.22486 104.05670
17 101.37994 2.1632839 3.319919  99.11720 103.64267
18 100.99268 0.8089887 2.645096  99.18988 102.79548
19 100.92422 0.7116083 2.616955  99.14060 102.70784
20 103.64408 0.5719738 2.582484 101.88396 105.40421
> 
> print( predict( fitsuri1r3, se.fit = TRUE, se.pred = TRUE,
+    interval = "confidence", level = 0.99 ) )
   demand.pred demand.se.fit demand.se.pred demand.lwr demand.upr supply.pred
1     97.68981     0.6528823       2.087387   95.79761   99.58201   100.19968
2     99.94844     0.5780071       2.065193   98.27324  101.62364   105.65697
3     99.85911     0.5480128       2.057000   98.27084  101.44738   104.26398
4    100.07898     0.5826211       2.066489   98.39041  101.76755   104.93581
5    102.06079     0.5085694       2.046845  100.58683  103.53474    99.21405
6    101.94515     0.4740560       2.038543  100.57122  103.31907   100.10923
7    102.41352     0.4963924       2.043853  100.97486  103.85218   102.33216
8    102.99351     0.6149083       2.075823  101.21136  104.77565   102.61002
9    101.42499     0.5311104       2.052561   99.88571  102.96427    94.89785
10   100.23241     0.7850496       2.132424   97.95715  102.50766    92.80994
11    95.53408     0.9711055       2.207708   92.71959   98.34856    92.09503
12    94.78557     0.9957906       2.218677   91.89954   97.67160    98.34149
13    96.23199     0.8804508       2.169360   93.68024   98.78374   101.57326
14    99.03892     0.5210242       2.049975   97.52887  100.54897    99.80990
15   103.74132     0.7520437       2.120495  101.56173  105.92092    97.45777
16   103.59945     0.6224171       2.078060  101.79554  105.40336    96.71687
17   103.63597     1.2408917       2.338962  100.03958  107.23236    87.55226
18   102.11116     0.5463766       2.056564  100.52763  103.69468   100.55529
19   103.66182     0.6956788       2.101166  101.64559  105.67806   105.45107
20   106.97702     1.2989894       2.370296  103.21225  110.74179   113.79838
   supply.se.fit supply.se.pred supply.lwr supply.upr
1      0.5990868       1.722110   98.44988  101.94948
2      0.6041400       1.723874  103.89241  107.42153
3      0.5393621       1.702254  102.68862  105.83934
4      0.5360938       1.701221  103.37000  106.50162
5      0.4855356       1.685972   97.79590  100.63219
6      0.4475653       1.675432   98.80199  101.41647
7      0.4441414       1.674520  101.03492  103.62940
8      0.5217608       1.696759  101.08607  104.13397
9      0.5424239       1.703227   93.31354   96.48215
10     0.5787364       1.715136   91.11958   94.50030
11     0.8120512       1.807259   89.72321   94.46686
12     0.8646445       1.831493   95.81605  100.86693
13     0.7469359       1.778952   99.39163  103.75490
14     0.5073065       1.692370   98.32817  101.29163
15     0.5093932       1.692997   95.96994   98.94559
16     0.5955981       1.720899   94.97725   98.45648
17     0.9753798       1.886299   84.70339   90.40113
18     0.5002994       1.690283   99.09402  102.01655
19     0.6493596       1.740237  103.55443  107.34771
20     1.1241221       1.967335  110.51506  117.08169
> print( predict( fitsuri1r3$eq[[ 1 ]], se.fit = TRUE, se.pred = TRUE,
+    interval = "confidence", level = 0.99 ) )
         fit    se.fit  se.pred       lwr       upr
1   97.68981 0.6528823 2.087387  95.79761  99.58201
2   99.94844 0.5780071 2.065193  98.27324 101.62364
3   99.85911 0.5480128 2.057000  98.27084 101.44738
4  100.07898 0.5826211 2.066489  98.39041 101.76755
5  102.06079 0.5085694 2.046845 100.58683 103.53474
6  101.94515 0.4740560 2.038543 100.57122 103.31907
7  102.41352 0.4963924 2.043853 100.97486 103.85218
8  102.99351 0.6149083 2.075823 101.21136 104.77565
9  101.42499 0.5311104 2.052561  99.88571 102.96427
10 100.23241 0.7850496 2.132424  97.95715 102.50766
11  95.53408 0.9711055 2.207708  92.71959  98.34856
12  94.78557 0.9957906 2.218677  91.89954  97.67160
13  96.23199 0.8804508 2.169360  93.68024  98.78374
14  99.03892 0.5210242 2.049975  97.52887 100.54897
15 103.74132 0.7520437 2.120495 101.56173 105.92092
16 103.59945 0.6224171 2.078060 101.79554 105.40336
17 103.63597 1.2408917 2.338962 100.03958 107.23236
18 102.11116 0.5463766 2.056564 100.52763 103.69468
19 103.66182 0.6956788 2.101166 101.64559 105.67806
20 106.97702 1.2989894 2.370296 103.21225 110.74179
> 
> print( predict( fitsuri2, se.fit = TRUE, interval = "prediction",
+    level = 0.9, newdata = predictData ) )
   demand.pred demand.se.fit demand.lwr demand.upr supply.pred supply.se.fit
1     104.2639     0.9600976  100.53450   107.9933    96.09931      1.371751
2     106.6591     1.0111280  102.89135   110.4268    99.72668      1.690549
3     106.6186     1.0324135  102.83439   110.4028    99.75549      1.612504
4     106.7964     1.0189799  103.02258   110.5702   100.80648      1.763990
5     109.7009     1.5471986  105.44450   113.9574    99.19010      2.002509
6     109.4448     1.4676636  105.26966   113.6199   100.28163      1.944290
7     109.8776     1.4645454  105.70560   114.0496   102.06063      2.124786
8     110.2763     1.4227702  106.14581   114.4067   103.15173      2.601586
9     109.0626     1.5429445  104.81059   113.3146    99.85697      1.799603
10    108.0507     1.6994378  103.63140   112.4700    99.14575      1.348976
11    102.2580     1.2986413   98.24616   106.2698    98.60561      2.251152
12    100.8983     0.9386920   97.18453   104.6121   102.00789      3.098855
13    102.3046     0.7306356   98.72702   105.8822   104.53926      3.007551
14    106.0106     1.1638967  102.11878   109.9023   104.86918      2.265104
15    111.9516     1.8956735  107.30971   116.5936   105.38244      2.201574
16    111.5127     1.7325202  107.05683   115.9686   105.87562      2.399911
17    112.5199     2.3164886  107.36084   117.6789   102.13864      2.020826
18    109.2767     1.3161922  105.24854   113.3048   108.77645      2.749305
19    110.9979     1.4969140  106.79319   115.2026   111.91123      3.729454
20    114.3575     1.9179678  109.68945   119.0255   117.15703      5.621925
   supply.lwr supply.upr
1    86.18146   106.0172
2    89.66909   109.7843
3    89.73461   109.7764
4    90.71289   110.9001
5    88.97006   109.4101
6    90.09378   110.4695
7    91.77024   112.3510
8    92.55288   113.7506
9    89.74543   109.9685
10   89.23683   109.0547
11   88.23869   108.9725
12   91.03335   112.9824
13   93.63760   115.4409
14   94.49357   115.2448
15   95.04600   115.7189
16   95.41372   116.3375
17   91.90830   112.3690
18   98.07152   119.4814
19  100.38943   123.4330
20  103.61626   130.6978
> print( predict( fitsuri2$eq[[ 2 ]], se.fit = TRUE, interval = "prediction",
+    level = 0.9, newdata = predictData ) )
         fit   se.fit       lwr      upr
1   96.09931 1.371751  86.18146 106.0172
2   99.72668 1.690549  89.66909 109.7843
3   99.75549 1.612504  89.73461 109.7764
4  100.80648 1.763990  90.71289 110.9001
5   99.19010 2.002509  88.97006 109.4101
6  100.28163 1.944290  90.09378 110.4695
7  102.06063 2.124786  91.77024 112.3510
8  103.15173 2.601586  92.55288 113.7506
9   99.85697 1.799603  89.74543 109.9685
10  99.14575 1.348976  89.23683 109.0547
11  98.60561 2.251152  88.23869 108.9725
12 102.00789 3.098855  91.03335 112.9824
13 104.53926 3.007551  93.63760 115.4409
14 104.86918 2.265104  94.49357 115.2448
15 105.38244 2.201574  95.04600 115.7189
16 105.87562 2.399911  95.41372 116.3375
17 102.13864 2.020826  91.90830 112.3690
18 108.77645 2.749305  98.07152 119.4814
19 111.91123 3.729454 100.38943 123.4330
20 117.15703 5.621925 103.61626 130.6978
> 
> print( predict( fitsuri2w, se.fit = TRUE, interval = "prediction",
+    level = 0.9, newdata = predictData ) )
   demand.pred demand.se.fit demand.lwr demand.upr supply.pred supply.se.fit
1     104.2638     0.9600942  100.53444   107.9932    96.09933      1.371746
2     106.6590     1.0111228  102.89129   110.4268    99.72672      1.690550
3     106.6185     1.0324085  102.83433   110.4027    99.75553      1.612504
4     106.7963     1.0189746  103.02253   110.5701   100.80652      1.763990
5     109.7008     1.5471919  105.44439   113.9572    99.19011      2.002510
6     109.4447     1.4676569  105.26957   113.6198   100.28165      1.944289
7     109.8775     1.4645381  105.70551   114.0494   102.06066      2.124784
8     110.2762     1.4227620  106.14574   114.4066   103.15176      2.601583
9     109.0625     1.5429384  104.81048   113.3145    99.85697      1.799600
10    108.0506     1.6994326  103.63127   112.4699    99.14574      1.348972
11    102.2579     1.2986376   98.24607   106.2697    98.60561      2.251147
12    100.8982     0.9386886   97.18449   104.6120   102.00792      3.098855
13    102.3046     0.7306326   98.72699   105.8821   104.53931      3.007554
14    106.0105     1.1638925  102.11871   109.9022   104.86922      2.265106
15    111.9515     1.8956653  107.30958   116.5934   105.38246      2.201567
16    111.5126     1.7325119  107.05672   115.9685   105.87565      2.399903
17    112.5197     2.3164806  107.36066   117.6787   102.13862      2.020817
18    109.2766     1.3161850  105.24847   113.3047   108.77650      2.749302
19    110.9978     1.4969049  106.79312   115.2025   111.91131      3.729452
20    114.3574     1.9179541  109.68940   119.0254   117.15715      5.621922
   supply.lwr supply.upr
1    86.18150   106.0172
2    89.66915   109.7843
3    89.73467   109.7764
4    90.71295   110.9001
5    88.97009   109.4101
6    90.09382   110.4695
7    91.77029   112.3510
8    92.55294   113.7506
9    89.74544   109.9685
10   89.23684   109.0546
11   88.23870   108.9725
12   91.03340   112.9824
13   93.63766   115.4410
14   94.49362   115.2448
15   95.04604   115.7189
16   95.41376   116.3375
17   91.90830   112.3689
18   98.07159   119.4814
19  100.38952   123.4331
20  103.61640   130.6979
> print( predict( fitsuri2w$eq[[ 2 ]], se.fit = TRUE, interval = "prediction",
+    level = 0.9, newdata = predictData ) )
         fit   se.fit       lwr      upr
1   96.09933 1.371746  86.18150 106.0172
2   99.72672 1.690550  89.66915 109.7843
3   99.75553 1.612504  89.73467 109.7764
4  100.80652 1.763990  90.71295 110.9001
5   99.19011 2.002510  88.97009 109.4101
6  100.28165 1.944289  90.09382 110.4695
7  102.06066 2.124784  91.77029 112.3510
8  103.15176 2.601583  92.55294 113.7506
9   99.85697 1.799600  89.74544 109.9685
10  99.14574 1.348972  89.23684 109.0546
11  98.60561 2.251147  88.23870 108.9725
12 102.00792 3.098855  91.03340 112.9824
13 104.53931 3.007554  93.63766 115.4410
14 104.86922 2.265106  94.49362 115.2448
15 105.38246 2.201567  95.04604 115.7189
16 105.87565 2.399903  95.41376 116.3375
17 102.13862 2.020817  91.90830 112.3689
18 108.77650 2.749302  98.07159 119.4814
19 111.91131 3.729452 100.38952 123.4331
20 117.15715 5.621922 103.61640 130.6979
> 
> print( predict( fitsuri3e, interval = "prediction", level = 0.925 ) )
   demand.pred demand.lwr demand.upr supply.pred supply.lwr supply.upr
1     97.35227   93.52490  101.17963    93.39107   82.45472   104.3274
2     99.22821   95.43523  103.02120    96.68196   85.97775   107.3862
3     99.25451   95.47520  103.03382    96.74030   86.03381   107.4468
4     99.33451   95.53953  103.12948    97.74013   87.04832   108.4319
5    102.46794   98.70586  106.23001    96.08641   85.13621   107.0366
6    102.12454   98.37686  105.87222    97.15126   86.30257   108.0000
7    102.39520   98.63990  106.15051    98.83740   88.05764   109.6172
8    102.47607   98.67219  106.27995    99.78123   88.85468   110.7078
9    102.00639   98.23507  105.77772    96.85554   85.91630   107.7948
10   101.48423   97.58501  105.38344    96.38878   85.48195   107.2956
11    96.08082   92.07269  100.08895    96.28064   84.85677   107.7045
12    94.41078   90.37237   98.44919    99.60759   87.85258   111.3626
13    95.37577   91.40877   99.34278   101.88673   90.39684   113.3766
14    99.05818   95.29326  102.82309   102.03093   91.07094   112.9909
15   104.73177  100.84403  108.61951   102.15633   91.39801   112.9146
16   104.07953  100.26581  107.89326   102.58644   91.75657   113.4163
17   105.90389  101.64579  110.16198    99.14402   88.07165   110.2164
18   101.62489   97.85015  105.39964   105.49429   94.63509   116.3535
19   103.05506   99.21236  106.89775   108.41630   97.14924   119.6834
20   105.51945  101.25906  109.77985   113.12367  100.65862   125.5887
> print( predict( fitsuri3e$eq[[ 1 ]], interval = "prediction", level = 0.925 ) )
         fit       lwr       upr
1   97.35227  93.52490 101.17963
2   99.22821  95.43523 103.02120
3   99.25451  95.47520 103.03382
4   99.33451  95.53953 103.12948
5  102.46794  98.70586 106.23001
6  102.12454  98.37686 105.87222
7  102.39520  98.63990 106.15051
8  102.47607  98.67219 106.27995
9  102.00639  98.23507 105.77772
10 101.48423  97.58501 105.38344
11  96.08082  92.07269 100.08895
12  94.41078  90.37237  98.44919
13  95.37577  91.40877  99.34278
14  99.05818  95.29326 102.82309
15 104.73177 100.84403 108.61951
16 104.07953 100.26581 107.89326
17 105.90389 101.64579 110.16198
18 101.62489  97.85015 105.39964
19 103.05506  99.21236 106.89775
20 105.51945 101.25906 109.77985
> 
> print( predict( fitsurio4, interval = "confidence", newdata = predictData ) )
   demand.pred demand.lwr demand.upr supply.pred supply.lwr supply.upr
1    102.66571  100.79164   104.5398    95.51258   93.61864   97.40651
2    105.45182  103.82556   107.0781    97.04445   95.54460   98.54429
3    105.30458  103.59743   107.0117    97.16149   95.56654   98.75644
4    105.61363  104.00078   107.2265    97.52116   96.03032   99.01201
5    107.50986  104.95824   110.0615    99.08075   96.53722  101.62428
6    107.45841  105.09311   109.8237    99.17752   96.86654  101.48850
7    108.07980  105.85604   110.3036    99.31229   97.24494  101.37963
8    108.94303  107.06636   110.8197   101.47611   99.73048  103.22174
9    106.70105  104.02125   109.3809    99.51200   96.70557  102.31844
10   105.05727  101.83003   108.2845    96.74557   93.35907  100.13207
11    99.81517   97.21365   102.4167    93.14733   90.37809   95.91657
12    99.27837   97.43323   101.1235    92.10181   90.14418   94.05944
13   101.14974   99.67611   102.6234    93.94216   92.34747   95.53684
14   104.11406  101.93847   106.2897    95.58764   93.50090   97.67439
15   109.26282  106.18861   112.3370    99.68015   96.68513  102.67517
16   109.28485  106.63092   111.9388   101.41976   98.79866  104.04086
17   108.66844  104.51106   112.8258   100.03709   95.52519  104.54899
18   107.89825  106.03464   109.7619   100.63518   98.93402  102.33634
19   109.75862  107.91274   111.6045   100.67112   99.17512  102.16711
20   113.95464  112.32775   115.5815   103.70984  102.49026  104.92942
> print( predict( fitsurio4$eq[[ 2 ]], interval = "confidence",
+    newdata = predictData ) )
         fit       lwr       upr
1   95.51258  93.61864  97.40651
2   97.04445  95.54460  98.54429
3   97.16149  95.56654  98.75644
4   97.52116  96.03032  99.01201
5   99.08075  96.53722 101.62428
6   99.17752  96.86654 101.48850
7   99.31229  97.24494 101.37963
8  101.47611  99.73048 103.22174
9   99.51200  96.70557 102.31844
10  96.74557  93.35907 100.13207
11  93.14733  90.37809  95.91657
12  92.10181  90.14418  94.05944
13  93.94216  92.34747  95.53684
14  95.58764  93.50090  97.67439
15  99.68015  96.68513 102.67517
16 101.41976  98.79866 104.04086
17 100.03709  95.52519 104.54899
18 100.63518  98.93402 102.33634
19 100.67112  99.17512 102.16711
20 103.70984 102.49026 104.92942
> print( predict( fitsuri4, interval = "confidence", newdata = predictData ) )
   demand.pred demand.lwr demand.upr supply.pred supply.lwr supply.upr
1    103.05279  101.32781   104.7778    96.60504   93.93424   99.27585
2    105.48794  103.65583   107.3200    99.36368   96.18652  102.54085
3    105.38768  103.52706   107.2483    99.43131   96.37140  102.49122
4    105.62876  103.77913   107.4784   100.28707   97.10049  103.47365
5    107.70700  104.97163   110.4424    98.88551   94.89881  102.87222
6    107.59205  104.98529   110.1988    99.80077   96.09647  103.50507
7    108.10167  105.47910   110.7242   101.23392   97.56023  104.90761
8    108.74274  106.13844   111.3470   102.02581   97.66719  106.38443
9    107.01891  104.30548   109.7323    99.60958   96.02175  103.19741
10   105.71472  102.73982   108.6896    99.26627   96.56177  101.97078
11   100.70819   98.31982   103.0966    99.25995   95.02587  103.49402
12    99.94238   98.16561   101.7191   102.09329   95.76002  108.42657
13   101.51112  100.15090   102.8713   104.00457   97.93757  110.07157
14   104.48434  102.42232   106.5464   104.10904   99.78342  108.43466
15   109.48477  106.14429   112.8252   104.16344  100.79097  107.53590
16   109.35281  106.27059   112.4350   104.53204  100.87885  108.18523
17   109.32170  105.29033   113.3531   101.66324   97.74475  105.58173
18   107.79608  105.40389   110.1883   107.03536  103.14229  110.92843
19   109.46234  106.70082   112.2239   109.50072  104.41473  114.58672
20   113.04799  109.35130   116.7447   113.43154  106.31008  120.55300
> print( predict( fitsuri4$eq[[ 2 ]], interval = "confidence",
+    newdata = predictData ) )
         fit       lwr       upr
1   96.60504  93.93424  99.27585
2   99.36368  96.18652 102.54085
3   99.43131  96.37140 102.49122
4  100.28707  97.10049 103.47365
5   98.88551  94.89881 102.87222
6   99.80077  96.09647 103.50507
7  101.23392  97.56023 104.90761
8  102.02581  97.66719 106.38443
9   99.60958  96.02175 103.19741
10  99.26627  96.56177 101.97078
11  99.25995  95.02587 103.49402
12 102.09329  95.76002 108.42657
13 104.00457  97.93757 110.07157
14 104.10904  99.78342 108.43466
15 104.16344 100.79097 107.53590
16 104.53204 100.87885 108.18523
17 101.66324  97.74475 105.58173
18 107.03536 103.14229 110.92843
19 109.50072 104.41473 114.58672
20 113.43154 106.31008 120.55300
> 
> print( predict( fitsurio5r2 ) )
   demand.pred supply.pred
1     97.83047    98.45809
2    100.64318   100.70216
3    100.42613   100.64203
4    100.80798   101.20197
5    101.70992   101.30026
6    101.82633   101.69612
7    102.53421   102.15945
8    103.67852   104.93910
9    100.84811   101.39156
10    98.86986    97.74386
11    94.59944    94.79519
12    94.77107    95.01703
13    96.82118    97.58181
14    98.89422    98.24894
15   102.88880   101.29338
16   103.27477   103.60359
17   101.43140    99.83964
18   102.70430   104.03975
19   104.48562   104.44111
20   108.91847   108.86897
> print( predict( fitsurio5r2$eq[[ 1 ]] ) )
         fit
1   97.83047
2  100.64318
3  100.42613
4  100.80798
5  101.70992
6  101.82633
7  102.53421
8  103.67852
9  100.84811
10  98.86986
11  94.59944
12  94.77107
13  96.82118
14  98.89422
15 102.88880
16 103.27477
17 101.43140
18 102.70430
19 104.48562
20 108.91847
> print( predict( fitsuri5r2 ) )
   demand.pred supply.pred
1     97.76508    94.56652
2     99.78489    97.06224
3     99.73511    97.15356
4     99.90099    97.97098
5    102.11884    96.52936
6    101.94133    97.42683
7    102.32472    98.79053
8    102.72329    99.46433
9    101.57021    97.33776
10   100.64404    97.19326
11    95.99280    97.54256
12    95.00936   100.32908
13    96.23203   102.04209
14    99.14691   101.99271
15   103.88173   101.72606
16   103.59476   102.04363
17   104.16489    99.40034
18   101.89879   104.56514
19   103.32810   106.86804
20   106.20614   110.37598
> print( predict( fitsuri5r2$eq[[ 1 ]] ) )
         fit
1   97.76508
2   99.78489
3   99.73511
4   99.90099
5  102.11884
6  101.94133
7  102.32472
8  102.72329
9  101.57021
10 100.64404
11  95.99280
12  95.00936
13  96.23203
14  99.14691
15 103.88173
16 103.59476
17 104.16489
18 101.89879
19 103.32810
20 106.20614
> 
> # predict just one observation
> smallData <- data.frame( price = 130, income = 150, farmPrice = 120,
+    trend = 25 )
> 
> print( predict( fitsur1e2, newdata = smallData ) )
  demand.pred supply.pred
1    108.1584    114.8569
> print( predict( fitsur1e2$eq[[ 1 ]], newdata = smallData ) )
       fit
1 108.1584
> 
> print( predict( fitsur2e, se.fit = TRUE, level = 0.9,
+    newdata = smallData ) )
  demand.pred demand.se.fit supply.pred supply.se.fit
1    107.6441      2.211370    112.8674      3.001513
> print( predict( fitsur2e$eq[[ 1 ]], se.pred = TRUE, level = 0.99,
+    newdata = smallData ) )
       fit  se.pred
1 107.6441 3.026452
> 
> print( predict( fitsur3, interval = "prediction", level = 0.975,
+    newdata = smallData ) )
  demand.pred demand.lwr demand.upr supply.pred supply.lwr supply.upr
1    107.7165   100.3179   115.1151    112.9588   103.0460   122.8715
> print( predict( fitsur3$eq[[ 1 ]], interval = "confidence", level = 0.8,
+    newdata = smallData ) )
       fit      lwr      upr
1 107.7165 104.5847 110.8484
> 
> print( predict( fitsur4r3, se.fit = TRUE, interval = "confidence",
+    level = 0.999, newdata = smallData ) )
  demand.pred demand.se.fit demand.lwr demand.upr supply.pred supply.se.fit
1    110.7122      2.057118   103.3248   118.0996    118.7438      2.224746
  supply.lwr supply.upr
1   110.7544   126.7332
> print( predict( fitsur4r3$eq[[ 2 ]], se.pred = TRUE, interval = "prediction",
+    level = 0.75, newdata = smallData ) )
       fit  se.pred      lwr      upr
1 118.7438 3.410607 114.7542 122.7334
> 
> print( predict( fitsur5, se.fit = TRUE, interval = "prediction",
+    newdata = smallData ) )
  demand.pred demand.se.fit demand.lwr demand.upr supply.pred supply.se.fit
1    109.7521      2.151771   103.8703   115.6338    117.7047      2.291379
  supply.lwr supply.upr
1   110.7927   124.6168
> print( predict( fitsur5$eq[[ 1 ]], se.pred = TRUE, interval = "confidence",
+    newdata = smallData ) )
       fit  se.pred      lwr      upr
1 109.7521 2.897248 105.3837 114.1204
> 
> print( predict( fitsurio5r2, se.fit = TRUE, se.pred = TRUE,
+    interval = "prediction", level = 0.5, newdata = smallData ) )
  demand.pred demand.se.fit demand.se.pred demand.lwr demand.upr supply.pred
1    114.7377      1.978581       3.089940   112.6317   116.8437    123.1497
  supply.se.fit supply.se.pred supply.lwr supply.upr
1      2.170672       3.817119   120.5481   125.7513
> print( predict( fitsurio5r2$eq[[ 1 ]], se.fit = TRUE, se.pred = TRUE,
+    interval = "confidence", level = 0.25, newdata = smallData ) )
       fit   se.fit  se.pred      lwr      upr
1 114.7377 1.978581 3.089940 114.1023 115.3731
> print( predict( fitsuri5r2, se.fit = TRUE, se.pred = TRUE,
+    interval = "prediction", level = 0.5, newdata = smallData ) )
  demand.pred demand.se.fit demand.se.pred demand.lwr demand.upr supply.pred
1    108.6960      2.348327       3.060141   106.6103   110.7816    112.7221
  supply.se.fit supply.se.pred supply.lwr supply.upr
1      3.910262       6.871101    108.039   117.4052
> print( predict( fitsuri5r2$eq[[ 1 ]], se.fit = TRUE, se.pred = TRUE,
+    interval = "confidence", level = 0.25, newdata = smallData ) )
       fit   se.fit  se.pred      lwr      upr
1 108.6960 2.348327 3.060141 107.9418 109.4501
> 
> print( predict( fitsuri5wr2, se.fit = TRUE, se.pred = TRUE,
+    interval = "prediction", level = 0.5, newdata = smallData ) )
  demand.pred demand.se.fit demand.se.pred demand.lwr demand.upr supply.pred
1    108.6960      2.348327       3.060141   106.6103   110.7816    112.7221
  supply.se.fit supply.se.pred supply.lwr supply.upr
1      3.910262       6.871101    108.039   117.4052
> print( predict( fitsuri5wr2$eq[[ 1 ]], se.fit = TRUE, se.pred = TRUE,
+    interval = "confidence", level = 0.25, newdata = smallData ) )
       fit   se.fit  se.pred      lwr      upr
1 108.6960 2.348327 3.060141 107.9418 109.4501
> 
> 
> ## ************ correlation of predicted values ***************
> print( correlation.systemfit( fitsur1e2, 2, 1 ) )
           [,1]
 [1,] 0.8485660
 [2,] 0.8560380
 [3,] 0.8638628
 [4,] 0.8822314
 [5,] 0.8436685
 [6,] 0.8607040
 [7,] 0.8745412
 [8,] 0.8766342
 [9,] 0.8838862
[10,] 0.9182657
[11,] 0.9027022
[12,] 0.8836522
[13,] 0.8795027
[14,] 0.8625379
[15,] 0.8962599
[16,] 0.8974128
[17,] 0.9137858
[18,] 0.8390748
[19,] 0.8672603
[20,] 0.9015226
> 
> print( correlation.systemfit( fitsur2e, 1, 2 ) )
           [,1]
 [1,] 0.9422013
 [2,] 0.9437103
 [3,] 0.9417272
 [4,] 0.9412731
 [5,] 0.9019717
 [6,] 0.9091425
 [7,] 0.9173484
 [8,] 0.9027934
 [9,] 0.9097189
[10,] 0.9406887
[11,] 0.9232462
[12,] 0.9019529
[13,] 0.9006397
[14,] 0.8928504
[15,] 0.9245092
[16,] 0.9522689
[17,] 0.9437752
[18,] 0.9345497
[19,] 0.9303536
[20,] 0.9380609
> 
> print( correlation.systemfit( fitsur3, 2, 1 ) )
           [,1]
 [1,] 0.9387029
 [2,] 0.9429607
 [3,] 0.9406041
 [4,] 0.9403742
 [5,] 0.9021545
 [6,] 0.9091079
 [7,] 0.9177459
 [8,] 0.9026245
 [9,] 0.9097962
[10,] 0.9407663
[11,] 0.9224736
[12,] 0.9001578
[13,] 0.8993669
[14,] 0.8923510
[15,] 0.9228085
[16,] 0.9515569
[17,] 0.9430347
[18,] 0.9359979
[19,] 0.9285058
[20,] 0.9368339
> 
> print( correlation.systemfit( fitsur3w, 2, 1 ) )
           [,1]
 [1,] 0.9401123
 [2,] 0.9460377
 [3,] 0.9436443
 [4,] 0.9435189
 [5,] 0.9075066
 [6,] 0.9140830
 [7,] 0.9224215
 [8,] 0.9071150
 [9,] 0.9141287
[10,] 0.9442820
[11,] 0.9261432
[12,] 0.9038078
[13,] 0.9034740
[14,] 0.8971980
[15,] 0.9255264
[16,] 0.9538435
[17,] 0.9459752
[18,] 0.9397690
[19,] 0.9316222
[20,] 0.9397124
> 
> print( correlation.systemfit( fitsur4r3, 1, 2 ) )
           [,1]
 [1,] 0.9630198
 [2,] 0.9711530
 [3,] 0.9714678
 [4,] 0.9730602
 [5,] 0.9398075
 [6,] 0.9435238
 [7,] 0.9467698
 [8,] 0.9422418
 [9,] 0.9469796
[10,] 0.9729023
[11,] 0.9095400
[12,] 0.8582610
[13,] 0.9143965
[14,] 0.9233580
[15,] 0.9773693
[16,] 0.9635882
[17,] 0.9777182
[18,] 0.9686581
[19,] 0.9455016
[20,] 0.9405856
> 
> print( correlation.systemfit( fitsur5, 2, 1 ) )
           [,1]
 [1,] 0.9377734
 [2,] 0.9476607
 [3,] 0.9479962
 [4,] 0.9511636
 [5,] 0.8919430
 [6,] 0.8974013
 [7,] 0.9026566
 [8,] 0.9003241
 [9,] 0.9065282
[10,] 0.9521993
[11,] 0.8534480
[12,] 0.7839904
[13,] 0.8579817
[14,] 0.8674667
[15,] 0.9609012
[16,] 0.9352173
[17,] 0.9614592
[18,] 0.9436563
[19,] 0.9069847
[20,] 0.9039867
> 
> print( correlation.systemfit( fitsuri1r3, 1, 2 ) )
            [,1]
 [1,] -0.6618928
 [2,] -0.6556130
 [3,] -0.6637900
 [4,] -0.6891646
 [5,] -0.6285091
 [6,] -0.6638664
 [7,] -0.6958262
 [8,] -0.6752759
 [9,] -0.7223071
[10,] -0.7567863
[11,] -0.7589234
[12,] -0.7316188
[13,] -0.7095153
[14,] -0.6694892
[15,] -0.7278317
[16,] -0.7372204
[17,] -0.7410747
[18,] -0.5829414
[19,] -0.6841408
[20,] -0.7463849
> 
> print( correlation.systemfit( fitsuri2, 2, 1 ) )
           [,1]
 [1,] 0.3599829
 [2,] 0.3369542
 [3,] 0.3365327
 [4,] 0.3361309
 [5,] 0.2862848
 [6,] 0.2987122
 [7,] 0.3168647
 [8,] 0.2745544
 [9,] 0.3221139
[10,] 0.3181788
[11,] 0.3336895
[12,] 0.3337616
[13,] 0.3177466
[14,] 0.2856785
[15,] 0.3582452
[16,] 0.4319029
[17,] 0.3668372
[18,] 0.3619560
[19,] 0.3333701
[20,] 0.3352304
> 
> print( correlation.systemfit( fitsuri2w, 1, 2 ) )
           [,1]
 [1,] 0.3599662
 [2,] 0.3369382
 [3,] 0.3365160
 [4,] 0.3361137
 [5,] 0.2862645
 [6,] 0.2986912
 [7,] 0.3168418
 [8,] 0.2745349
 [9,] 0.3220938
[10,] 0.3181588
[11,] 0.3336657
[12,] 0.3337396
[13,] 0.3177261
[14,] 0.2856584
[15,] 0.3582278
[16,] 0.4318822
[17,] 0.3668208
[18,] 0.3619342
[19,] 0.3333498
[20,] 0.3352088
> 
> print( correlation.systemfit( fitsuri3e, 1, 2 ) )
           [,1]
 [1,] 0.3680804
 [2,] 0.3445909
 [3,] 0.3441238
 [4,] 0.3435988
 [5,] 0.2919484
 [6,] 0.3046339
 [7,] 0.3229123
 [8,] 0.2799944
 [9,] 0.3288034
[10,] 0.3245890
[11,] 0.3398356
[12,] 0.3404840
[13,] 0.3243782
[14,] 0.2914308
[15,] 0.3661396
[16,] 0.4409386
[17,] 0.3750968
[18,] 0.3691181
[19,] 0.3401263
[20,] 0.3416518
> 
> print( correlation.systemfit( fitsurio4, 2, 1 ) )
           [,1]
 [1,] 0.9606962
 [2,] 0.9712586
 [3,] 0.9712802
 [4,] 0.9728105
 [5,] 0.9399326
 [6,] 0.9435725
 [7,] 0.9467190
 [8,] 0.9387979
 [9,] 0.9467639
[10,] 0.9718510
[11,] 0.9035596
[12,] 0.8613357
[13,] 0.9165833
[14,] 0.9224099
[15,] 0.9763197
[16,] 0.9641158
[17,] 0.9775185
[18,] 0.9671957
[19,] 0.9416307
[20,] 0.9344923
> print( correlation.systemfit( fitsuri4, 2, 1 ) )
            [,1]
 [1,] 0.03841487
 [2,] 0.12131017
 [3,] 0.09748442
 [4,] 0.13811238
 [5,] 0.12952591
 [6,] 0.09368318
 [7,] 0.06302933
 [8,] 0.10559366
 [9,] 0.21802737
[10,] 0.40422759
[11,] 0.10742619
[12,] 0.03371123
[13,] 0.07596088
[14,] 0.07008487
[15,] 0.06800336
[16,] 0.12631642
[17,] 0.38589672
[18,] 0.27150786
[19,] 0.28497398
[20,] 0.39671129
> 
> print( correlation.systemfit( fitsurio5r2, 1, 2 ) )
           [,1]
 [1,] 0.9861686
 [2,] 0.9907457
 [3,] 0.9908554
 [4,] 0.9912041
 [5,] 0.9813227
 [6,] 0.9828856
 [7,] 0.9840524
 [8,] 0.9798257
 [9,] 0.9824484
[10,] 0.9907896
[11,] 0.9681876
[12,] 0.9474029
[13,] 0.9700484
[14,] 0.9747722
[15,] 0.9911646
[16,] 0.9885089
[17,] 0.9920856
[18,] 0.9897372
[19,] 0.9816187
[20,] 0.9781961
> print( correlation.systemfit( fitsuri5r2, 1, 2 ) )
            [,1]
 [1,] 0.04403655
 [2,] 0.12786570
 [3,] 0.10447864
 [4,] 0.14511428
 [5,] 0.13747126
 [6,] 0.10207739
 [7,] 0.07193206
 [8,] 0.11241170
 [9,] 0.22522467
[10,] 0.40967370
[11,] 0.11452371
[12,] 0.04095071
[13,] 0.08336613
[14,] 0.07778180
[15,] 0.07504710
[16,] 0.13440166
[17,] 0.38999842
[18,] 0.27888805
[19,] 0.28966167
[20,] 0.40046642
> 
> 
> ## ************ Log-Likelihood values ***************
> print( logLik( fitsur1e2 ) )
'log Lik.' -50.90293 (df=10)
> 
> print( logLik( fitsur2e ) )
'log Lik.' -51.97191 (df=9)
> 
> print( logLik( fitsur3 ) )
'log Lik.' -52.20977 (df=9)
> 
> print( logLik( fitsur4r3 ) )
'log Lik.' -58.43873 (df=8)
> 
> print( logLik( fitsur5 ) )
'log Lik.' -58.54187 (df=8)
> 
> print( logLik( fitsur5w ) )
'log Lik.' -58.51872 (df=8)
> 
> print( logLik( fitsuri1r3 ) )
'log Lik.' -67.7771 (df=10)
> 
> print( logLik( fitsuri2 ) )
'log Lik.' -99.92612 (df=9)
> 
> print( logLik( fitsuri3e ) )
'log Lik.' -99.92491 (df=9)
> 
> print( logLik( fitsurio4 ) )
'log Lik.' -58.45927 (df=8)
> print( logLik( fitsuri4 ) )
'log Lik.' -100.8756 (df=8)
> 
> print( logLik( fitsuri4w ) )
'log Lik.' -100.8756 (df=8)
> 
> print( logLik( fitsurio5r2 ) )
'log Lik.' -59.80036 (df=8)
> print( logLik( fitsuri5r2 ) )
'log Lik.' -100.8771 (df=8)
> 
> 
> ## *********** likelihood ratio tests *************
> # testing first restriction
> # non-iterating, methodRCov = 1
> print( lrtest( fitsur2, fitsur1 ) )
Likelihood ratio test

Model 1: fitsur2
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)
1   9 -52.210                     
2  10 -51.614  1 1.1906     0.2752
> print( lrtest( fitsur3, fitsur1 ) )
Likelihood ratio test

Model 1: fitsur3
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)
1   9 -52.210                     
2  10 -51.614  1 1.1906     0.2752
> # non-iterating, methodRCov = 0
> print( lrtest( fitsur2e, fitsur1e ) )
Likelihood ratio test

Model 1: fitsur2e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)
1   9 -51.972                     
2  10 -51.622  1 0.7003     0.4027
> print( lrtest( fitsur3e, fitsur1e ) )
Likelihood ratio test

Model 1: fitsur3e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)
1   9 -51.972                     
2  10 -51.622  1 0.7003     0.4027
> # iterating, methodRCov = 1
> print( lrtest( fitsuri2, fitsuri1 ) )
Likelihood ratio test

Model 1: fitsuri2
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   9 -99.926                         
2  10 -67.772  1 64.307  1.064e-15 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsuri3, fitsuri1 ) )
Likelihood ratio test

Model 1: fitsuri3
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   9 -99.926                         
2  10 -67.772  1 64.307  1.064e-15 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> # iterating, methodRCov = 0
> print( lrtest( fitsuri2e, fitsuri1e ) )
Likelihood ratio test

Model 1: fitsuri2e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   9 -99.925                         
2  10 -67.768  1 64.314  1.061e-15 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsuri3e, fitsuri1e ) )
Likelihood ratio test

Model 1: fitsuri3e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   9 -99.925                         
2  10 -67.768  1 64.314  1.061e-15 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> # non-iterating, methodRCov = 1, WSUR
> print( lrtest( fitsur3w, fitsur1w ) )
Likelihood ratio test

Model 1: fitsur3w
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)
1   9 -52.051                     
2  10 -51.614  1 0.8728     0.3502
> 
> # testing second restriction
> # non-iterating, methodRCov = 1
> print( lrtest( fitsur4, fitsur2 ) )
Likelihood ratio test

Model 1: fitsur4
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.542                         
2   9 -52.210  1 12.664  0.0003727 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsur4, fitsur3 ) )
Likelihood ratio test

Model 1: fitsur4
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.542                         
2   9 -52.210  1 12.664  0.0003727 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsur5, fitsur2 ) )
Likelihood ratio test

Model 1: fitsur5
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.542                         
2   9 -52.210  1 12.664  0.0003727 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsur5, fitsur3 ) )
Likelihood ratio test

Model 1: fitsur5
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.542                         
2   9 -52.210  1 12.664  0.0003727 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> # non-iterating, methodRCov = 0
> print( lrtest( fitsur4e, fitsur2e ) )
Likelihood ratio test

Model 1: fitsur4e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.579                         
2   9 -51.972  1 13.215  0.0002778 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsur4e, fitsur3e ) )
Likelihood ratio test

Model 1: fitsur4e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.579                         
2   9 -51.972  1 13.215  0.0002778 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsur5e, fitsur2e ) )
Likelihood ratio test

Model 1: fitsur5e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.579                         
2   9 -51.972  1 13.215  0.0002778 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsur5e, fitsur3e ) )
Likelihood ratio test

Model 1: fitsur5e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.579                         
2   9 -51.972  1 13.215  0.0002778 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> # iterating, methodRCov = 1
> print( lrtest( fitsurio4, fitsuri2 ) )
Likelihood ratio test

Model 1: fitsurio4
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.459                         
2   9 -99.926  1 82.934  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio4, fitsuri2) 
> print( lrtest( fitsurio4, fitsuri3 ) )
Likelihood ratio test

Model 1: fitsurio4
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.459                         
2   9 -99.926  1 82.934  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio4, fitsuri3) 
> print( lrtest( fitsurio5, fitsuri2 ) )
Likelihood ratio test

Model 1: fitsurio5
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.459                         
2   9 -99.926  1 82.934  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio5, fitsuri2) 
> print( lrtest( fitsurio5, fitsuri3 ) )
Likelihood ratio test

Model 1: fitsurio5
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.459                         
2   9 -99.926  1 82.934  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio5, fitsuri3) 
>    # corrected
> print( lrtest( fitsuri2, fitsuri4 ) )
Likelihood ratio test

Model 1: fitsuri2
Model 2: object_2
  #Df   LogLik Df Chisq Pr(>Chisq)
1   9  -99.926                    
2   8 -100.876 -1 1.899     0.1682
> print( lrtest( fitsuri3, fitsuri4 ) )
Likelihood ratio test

Model 1: fitsuri3
Model 2: object_2
  #Df   LogLik Df Chisq Pr(>Chisq)
1   9  -99.926                    
2   8 -100.876 -1 1.899     0.1682
> print( lrtest( fitsuri2, fitsuri5 ) )
Likelihood ratio test

Model 1: fitsuri2
Model 2: object_2
  #Df   LogLik Df Chisq Pr(>Chisq)
1   9  -99.926                    
2   8 -100.876 -1 1.899     0.1682
> print( lrtest( fitsuri3, fitsuri5 ) )
Likelihood ratio test

Model 1: fitsuri3
Model 2: object_2
  #Df   LogLik Df Chisq Pr(>Chisq)
1   9  -99.926                    
2   8 -100.876 -1 1.899     0.1682
> 
> # iterating, methodRCov = 0
> print( lrtest( fitsurio4e, fitsuri2e ) )
Likelihood ratio test

Model 1: fitsurio4e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.438                         
2   9 -99.925  1 82.973  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio4e, fitsuri2e) 
> print( lrtest( fitsurio4e, fitsuri3e ) )
Likelihood ratio test

Model 1: fitsurio4e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.438                         
2   9 -99.925  1 82.973  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio4e, fitsuri3e) 
> print( lrtest( fitsurio5e, fitsuri2e ) )
Likelihood ratio test

Model 1: fitsurio5e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.438                         
2   9 -99.925  1 82.973  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio5e, fitsuri2e) 
> print( lrtest( fitsurio5e, fitsuri3e ) )
Likelihood ratio test

Model 1: fitsurio5e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.438                         
2   9 -99.925  1 82.973  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio5e, fitsuri3e) 
>    # corrected
> print( lrtest( fitsuri2e, fitsuri4e ) )
Likelihood ratio test

Model 1: fitsuri2e
Model 2: object_2
  #Df   LogLik Df  Chisq Pr(>Chisq)
1   9  -99.925                     
2   8 -100.873 -1 1.8962     0.1685
> print( lrtest( fitsuri3e, fitsuri4e ) )
Likelihood ratio test

Model 1: fitsuri3e
Model 2: object_2
  #Df   LogLik Df  Chisq Pr(>Chisq)
1   9  -99.925                     
2   8 -100.873 -1 1.8962     0.1685
> print( lrtest( fitsuri2e, fitsuri5e ) )
Likelihood ratio test

Model 1: fitsuri2e
Model 2: object_2
  #Df   LogLik Df  Chisq Pr(>Chisq)
1   9  -99.925                     
2   8 -100.873 -1 1.8962     0.1685
> print( lrtest( fitsuri3e, fitsuri5e ) )
Likelihood ratio test

Model 1: fitsuri3e
Model 2: object_2
  #Df   LogLik Df  Chisq Pr(>Chisq)
1   9  -99.925                     
2   8 -100.873 -1 1.8962     0.1685
> 
> # non-iterating, methodRCov = 0, WSUR
> print( lrtest( fitsur4we, fitsur2we ) )
Likelihood ratio test

Model 1: fitsur4we
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.556                         
2   9 -51.802  1 13.508  0.0002375 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> # iterating, methodRCov = 1, WSUR
> print( lrtest( fitsuri2w, fitsuri4w ) )
Likelihood ratio test

Model 1: fitsuri2w
Model 2: object_2
  #Df   LogLik Df Chisq Pr(>Chisq)
1   9  -99.926                    
2   8 -100.876 -1 1.899     0.1682
> 
> # testing both of the restrictions
> # non-iterating, methodRCov = 1
> print( lrtest( fitsur4, fitsur1 ) )
Likelihood ratio test

Model 1: fitsur4
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.542                         
2  10 -51.614  2 13.855  0.0009805 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsur5, fitsur1 ) )
Likelihood ratio test

Model 1: fitsur5
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.542                         
2  10 -51.614  2 13.855  0.0009805 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> # non-iterating, methodRCov = 0
> print( lrtest( fitsur4e, fitsur1e ) )
Likelihood ratio test

Model 1: fitsur4e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.579                         
2  10 -51.622  2 13.915  0.0009515 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsur5e, fitsur1e ) )
Likelihood ratio test

Model 1: fitsur5e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.579                         
2  10 -51.622  2 13.915  0.0009515 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> # iterating, methodRCov = 1
> print( lrtest( fitsurio4, fitsuri1 ) )
Likelihood ratio test

Model 1: fitsurio4
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.459                         
2  10 -67.772  2 18.626  9.023e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio4, fitsuri1) 
> print( lrtest( fitsurio5, fitsuri1 ) )
Likelihood ratio test

Model 1: fitsurio5
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.459                         
2  10 -67.772  2 18.626  9.023e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio5, fitsuri1) 
>    # corrected
> print( lrtest( fitsuri1, fitsuri4 ) )
Likelihood ratio test

Model 1: fitsuri1
Model 2: object_2
  #Df   LogLik Df  Chisq Pr(>Chisq)    
1  10  -67.772                         
2   8 -100.876 -2 66.206  4.202e-15 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsuri1, fitsuri5 ) )
Likelihood ratio test

Model 1: fitsuri1
Model 2: object_2
  #Df   LogLik Df  Chisq Pr(>Chisq)    
1  10  -67.772                         
2   8 -100.876 -2 66.206  4.202e-15 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> # iterating, methodRCov = 0
> print( lrtest( fitsurio4e, fitsuri1e ) )
Likelihood ratio test

Model 1: fitsurio4e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.438                         
2  10 -67.768  2 18.660  8.874e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio4e, fitsuri1e) 
> print( lrtest( fitsurio5e, fitsuri1e ) )
Likelihood ratio test

Model 1: fitsurio5e
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)    
1   8 -58.438                         
2  10 -67.768  2 18.660  8.874e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
Warning message:
model '2' has a smaller log-likelihood value than the more restricted model '1' in: lrtest.systemfit(fitsurio5e, fitsuri1e) 
>    # corrected
> print( lrtest( fitsuri1e, fitsuri4e ) )
Likelihood ratio test

Model 1: fitsuri1e
Model 2: object_2
  #Df   LogLik Df Chisq Pr(>Chisq)    
1  10  -67.768                        
2   8 -100.873 -2 66.21  4.195e-15 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> print( lrtest( fitsuri1e, fitsuri5e ) )
Likelihood ratio test

Model 1: fitsuri1e
Model 2: object_2
  #Df   LogLik Df Chisq Pr(>Chisq)    
1  10  -67.768                        
2   8 -100.873 -2 66.21  4.195e-15 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> # non-iterating, methodRCov = 1, WSUR
> print( lrtest( fitsur5w, fitsur1w ) )
Likelihood ratio test

Model 1: fitsur5w
Model 2: object_2
  #Df  LogLik Df  Chisq Pr(>Chisq)   
1   8 -58.519                        
2  10 -51.614  2 13.809   0.001003 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> 
> ## ************** F tests ****************
> # testing first restriction
> print( linear.hypothesis( fitsur1, restrm ) )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     33                 
2     34 -1 1.2404 0.2734
> linear.hypothesis( fitsur1, restrict )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     33                 
2     34 -1 1.2404 0.2734
> 
> print( linear.hypothesis( fitsur1r2, restrm ) )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1r2
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     33                 
2     34 -1 1.6496 0.2080
> linear.hypothesis( fitsur1r2, restrict )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1r2
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     33                 
2     34 -1 1.6496 0.2080
> 
> print( linear.hypothesis( fitsuri1e2, restrm ) )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsuri1e2
Model 2: restricted model

  Res.Df Df      F    Pr(>F)    
1     33                        
2     34 -1 139.68 2.107e-13 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1e2, restrict )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsuri1e2
Model 2: restricted model

  Res.Df Df      F    Pr(>F)    
1     33                        
2     34 -1 139.68 2.107e-13 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsuri1r3, restrm ) )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsuri1r3
Model 2: restricted model

  Res.Df Df      F    Pr(>F)    
1     33                        
2     34 -1 140.82 1.888e-13 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1r3, restrict )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsuri1r3
Model 2: restricted model

  Res.Df Df      F    Pr(>F)    
1     33                        
2     34 -1 140.82 1.888e-13 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsur1we2, restrm ) )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1we2
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     33                 
2     34 -1 1.6496 0.2080
> linear.hypothesis( fitsur1we2, restrict )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1we2
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     33                 
2     34 -1 1.6496 0.2080
> 
> print( linear.hypothesis( fitsuri1wr3, restrm ) )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsuri1wr3
Model 2: restricted model

  Res.Df Df      F    Pr(>F)    
1     33                        
2     34 -1 140.82 1.888e-13 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1wr3, restrict )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsuri1wr3
Model 2: restricted model

  Res.Df Df      F    Pr(>F)    
1     33                        
2     34 -1 140.82 1.888e-13 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> # testing second restriction
> restrOnly2m <- matrix(0,1,7)
> restrOnly2q <- 0.5
> restrOnly2m[1,2] <- -1
> restrOnly2m[1,5] <-  1
> restrictOnly2 <- "- demand_price + supply_price = 0.5"
> restrictOnly2i <- "- demand_price + supply_income = 0.5"
> # first restriction not imposed 
> print( linear.hypothesis( fitsur1e2, restrOnly2m, restrOnly2q ) )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur1e2
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     33                 
2     34 -1 2.3589 0.1341
> linear.hypothesis( fitsur1e2, restrictOnly2 )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur1e2
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     33                 
2     34 -1 2.3589 0.1341
> 
> print( linear.hypothesis( fitsuri1, restrOnly2m, restrOnly2q ) )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri1
Model 2: restricted model

  Res.Df Df      F   Pr(>F)   
1     33                      
2     34 -1 12.206 0.001379 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1, restrictOnly2i )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri1
Model 2: restricted model

  Res.Df Df      F   Pr(>F)   
1     33                      
2     34 -1 12.206 0.001379 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> # first restriction imposed
> print( linear.hypothesis( fitsur2, restrOnly2m, restrOnly2q ) )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur2
Model 2: restricted model

  Res.Df Df      F  Pr(>F)  
1     34                    
2     35 -1 5.5006 0.02498 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsur2, restrictOnly2 )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur2
Model 2: restricted model

  Res.Df Df      F  Pr(>F)  
1     34                    
2     35 -1 5.5006 0.02498 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsur3, restrOnly2m, restrOnly2q ) )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur3
Model 2: restricted model

  Res.Df Df      F  Pr(>F)  
1     34                    
2     35 -1 5.5006 0.02498 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsur3, restrictOnly2 )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur3
Model 2: restricted model

  Res.Df Df      F  Pr(>F)  
1     34                    
2     35 -1 5.5006 0.02498 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsuri2e, restrOnly2m, restrOnly2q ) )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri2e
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     34                 
2     35 -1 2.3495 0.1346
> linear.hypothesis( fitsuri2e, restrictOnly2i )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri2e
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     34                 
2     35 -1 2.3495 0.1346
> 
> print( linear.hypothesis( fitsuri3e, restrOnly2m, restrOnly2q ) )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri3e
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     34                 
2     35 -1 2.3495 0.1346
> linear.hypothesis( fitsuri3e, restrictOnly2i )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri3e
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     34                 
2     35 -1 2.3495 0.1346
> 
> print( linear.hypothesis( fitsur2we, restrOnly2m, restrOnly2q ) )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur2we
Model 2: restricted model

  Res.Df Df      F  Pr(>F)  
1     34                    
2     35 -1 6.2567 0.01735 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsur2we, restrictOnly2 )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur2we
Model 2: restricted model

  Res.Df Df      F  Pr(>F)  
1     34                    
2     35 -1 6.2567 0.01735 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsuri3we, restrOnly2m, restrOnly2q ) )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri3we
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     34                 
2     35 -1 2.3496 0.1346
> linear.hypothesis( fitsuri3we, restrictOnly2i )
Linear hypothesis test (F-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri3we
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     34                 
2     35 -1 2.3496 0.1346
> 
> # testing both of the restrictions
> print( linear.hypothesis( fitsur1r3, restr2m, restr2q ) )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_price = 0.5

Model 1: fitsur1r3
Model 2: restricted model

  Res.Df Df      F  Pr(>F)  
1     33                    
2     35 -2 2.6017 0.08929 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsur1r3, restrict2 )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_price = 0.5

Model 1: fitsur1r3
Model 2: restricted model

  Res.Df Df      F  Pr(>F)  
1     33                    
2     35 -2 2.6017 0.08929 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsuri1e2, restr2m, restr2q ) )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_income = 0.5

Model 1: fitsuri1e2
Model 2: restricted model

  Res.Df Df      F    Pr(>F)    
1     33                        
2     35 -2 89.085 4.996e-14 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1e2, restrict2i )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_income = 0.5

Model 1: fitsuri1e2
Model 2: restricted model

  Res.Df Df      F    Pr(>F)    
1     33                        
2     35 -2 89.085 4.996e-14 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsur1w, restr2m, restr2q ) )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_price = 0.5

Model 1: fitsur1w
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     33                 
2     35 -2 1.8045 0.1804
> linear.hypothesis( fitsur1w, restrict2 )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_price = 0.5

Model 1: fitsur1w
Model 2: restricted model

  Res.Df Df      F Pr(>F)
1     33                 
2     35 -2 1.8045 0.1804
> 
> print( linear.hypothesis( fitsuri1wr3, restr2m, restr2q ) )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_income = 0.5

Model 1: fitsuri1wr3
Model 2: restricted model

  Res.Df Df      F    Pr(>F)    
1     33                        
2     35 -2 89.564 4.641e-14 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1wr3, restrict2i )
Linear hypothesis test (F-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_income = 0.5

Model 1: fitsuri1wr3
Model 2: restricted model

  Res.Df Df      F    Pr(>F)    
1     33                        
2     35 -2 89.564 4.641e-14 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> 
> ## ************** Wald tests ****************
> # testing first restriction
> print( linear.hypothesis( fitsur1, restrm, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     33                     
2     34 -1 0.8106     0.3679
> linear.hypothesis( fitsur1, restrict, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     33                     
2     34 -1 0.8106     0.3679
> 
> print( linear.hypothesis( fitsur1r2, restrm, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1r2
Model 2: restricted model

  Res.Df Df Chisq Pr(>Chisq)
1     33                    
2     34 -1 1.116     0.2908
> linear.hypothesis( fitsur1r2, restrict, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1r2
Model 2: restricted model

  Res.Df Df Chisq Pr(>Chisq)
1     33                    
2     34 -1 1.116     0.2908
> 
> print( linear.hypothesis( fitsuri1e2, restrm, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsuri1e2
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)    
1     33                         
2     34 -1 147.44  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1e2, restrict, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsuri1e2
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)    
1     33                         
2     34 -1 147.44  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsuri1r3, restrm, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsuri1r3
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)    
1     33                         
2     34 -1 147.32  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1r3, restrict, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsuri1r3
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)    
1     33                         
2     34 -1 147.32  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsur1w, restrm, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1w
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     33                     
2     34 -1 0.8106     0.3679
> linear.hypothesis( fitsur1w, restrict, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0

Model 1: fitsur1w
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     33                     
2     34 -1 0.8106     0.3679
> 
> # testing second restriction
> # first restriction not imposed
> print( linear.hypothesis( fitsur1e2, restrOnly2m, restrOnly2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur1e2
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     33                     
2     34 -1 1.5959     0.2065
> linear.hypothesis( fitsur1e2, restrictOnly2, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur1e2
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     33                     
2     34 -1 1.5959     0.2065
> 
> print( linear.hypothesis( fitsuri1, restrOnly2m, restrOnly2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri1
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)    
1     33                         
2     34 -1 12.213  0.0004745 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1, restrictOnly2i, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri1
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)    
1     33                         
2     34 -1 12.213  0.0004745 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> # first restriction imposed
> print( linear.hypothesis( fitsur2, restrOnly2m, restrOnly2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur2
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)  
1     34                       
2     35 -1 3.9457    0.04699 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsur2, restrictOnly2, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur2
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)  
1     34                       
2     35 -1 3.9457    0.04699 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsur3, restrOnly2m, restrOnly2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur3
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)  
1     34                       
2     35 -1 3.9457    0.04699 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsur3, restrictOnly2, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur3
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)  
1     34                       
2     35 -1 3.9457    0.04699 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsuri2e, restrOnly2m, restrOnly2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri2e
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)  
1     34                       
2     35 -1 2.7641     0.0964 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri2e, restrictOnly2i, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri2e
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)  
1     34                       
2     35 -1 2.7641     0.0964 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsuri3e, restrOnly2m, restrOnly2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri3e
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)  
1     34                       
2     35 -1 2.7641     0.0964 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri3e, restrictOnly2i, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri3e
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)  
1     34                       
2     35 -1 2.7641     0.0964 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsuri2w, restrOnly2m, restrOnly2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri2w
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     34                     
2     35 -1 2.1954     0.1384
> linear.hypothesis( fitsuri2w, restrictOnly2i, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_income = 0.5

Model 1: fitsuri2w
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     34                     
2     35 -1 2.1954     0.1384
> 
> print( linear.hypothesis( fitsur3w, restrOnly2m, restrOnly2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur3w
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)  
1     34                       
2     35 -1 4.2575    0.03908 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsur3w, restrictOnly2, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
-demand_price + supply_price = 0.5

Model 1: fitsur3w
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)  
1     34                       
2     35 -1 4.2575    0.03908 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> 
> # testing both of the restrictions
> print( linear.hypothesis( fitsur1r3, restr2m, restr2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_price = 0.5

Model 1: fitsur1r3
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     33                     
2     35 -2 3.5059     0.1733
> linear.hypothesis( fitsur1r3, restrict2, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_price = 0.5

Model 1: fitsur1r3
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     33                     
2     35 -2 3.5059     0.1733
> 
> print( linear.hypothesis( fitsuri1e2, restr2m, restr2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_income = 0.5

Model 1: fitsuri1e2
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)    
1     33                         
2     35 -2 188.07  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1e2, restrict2i, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_income = 0.5

Model 1: fitsuri1e2
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)    
1     33                         
2     35 -2 188.07  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> print( linear.hypothesis( fitsur1we2, restr2m, restr2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_price = 0.5

Model 1: fitsur1we2
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     33                     
2     35 -2 3.6574     0.1606
> linear.hypothesis( fitsur1we2, restrict2, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_price = 0.5

Model 1: fitsur1we2
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)
1     33                     
2     35 -2 3.6574     0.1606
> 
> print( linear.hypothesis( fitsuri1wr3, restr2m, restr2q, test = "Chisq" ) )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_income = 0.5

Model 1: fitsuri1wr3
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)    
1     33                         
2     35 -2 187.39  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> linear.hypothesis( fitsuri1wr3, restrict2i, test = "Chisq" )
Linear hypothesis test (Wald-test)

Hypothesis:
demand_income - supply_trend = 0
-demand_price + supply_income = 0.5

Model 1: fitsuri1wr3
Model 2: restricted model

  Res.Df Df  Chisq Pr(>Chisq)    
1     33                         
2     35 -2 187.39  < 2.2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> 
> ## ****************** model frame **************************
> print( mf <- model.frame( fitsur1e2 ) )
   consump   price income farmPrice trend
1   98.485 100.323   87.4      98.0     1
2   99.187 104.264   97.6      99.1     2
3  102.163 103.435   96.7      99.1     3
4  101.504 104.506   98.2      98.1     4
5  104.240  98.001   99.8     110.8     5
6  103.243  99.456  100.5     108.2     6
7  103.993 101.066  103.2     105.6     7
8   99.900 104.763  107.8     109.8     8
9  100.350  96.446   96.6     108.7     9
10 102.820  91.228   88.9     100.6    10
11  95.435  93.085   75.1      81.0    11
12  92.424  98.801   76.9      68.6    12
13  94.535 102.908   84.6      70.9    13
14  98.757  98.756   90.6      81.4    14
15 105.797  95.119  103.1     102.3    15
16 100.225  98.451  105.1     105.0    16
17 103.522  86.498   96.4     110.5    17
18  99.929 104.016  104.4      92.5    18
19 105.223 105.769  110.7      89.3    19
20 106.232 113.490  127.1      93.0    20
> print( mf1 <- model.frame( fitsur1e2$eq[[ 1 ]] ) )
   consump   price income
1   98.485 100.323   87.4
2   99.187 104.264   97.6
3  102.163 103.435   96.7
4  101.504 104.506   98.2
5  104.240  98.001   99.8
6  103.243  99.456  100.5
7  103.993 101.066  103.2
8   99.900 104.763  107.8
9  100.350  96.446   96.6
10 102.820  91.228   88.9
11  95.435  93.085   75.1
12  92.424  98.801   76.9
13  94.535 102.908   84.6
14  98.757  98.756   90.6
15 105.797  95.119  103.1
16 100.225  98.451  105.1
17 103.522  86.498   96.4
18  99.929 104.016  104.4
19 105.223 105.769  110.7
20 106.232 113.490  127.1
> print( attributes( mf1 )$terms )
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 
> print( mf2 <- model.frame( fitsur1e2$eq[[ 2 ]] ) )
   consump   price farmPrice trend
1   98.485 100.323      98.0     1
2   99.187 104.264      99.1     2
3  102.163 103.435      99.1     3
4  101.504 104.506      98.1     4
5  104.240  98.001     110.8     5
6  103.243  99.456     108.2     6
7  103.993 101.066     105.6     7
8   99.900 104.763     109.8     8
9  100.350  96.446     108.7     9
10 102.820  91.228     100.6    10
11  95.435  93.085      81.0    11
12  92.424  98.801      68.6    12
13  94.535 102.908      70.9    13
14  98.757  98.756      81.4    14
15 105.797  95.119     102.3    15
16 100.225  98.451     105.0    16
17 103.522  86.498     110.5    17
18  99.929 104.016      92.5    18
19 105.223 105.769      89.3    19
20 106.232 113.490      93.0    20
> print( attributes( mf2 )$terms )
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 
> 
> print( all.equal( mf, model.frame( fitsur1w ) ) )
[1] TRUE
> print( all.equal( mf1, model.frame( fitsur1w$eq[[ 1 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsur2e ) ) )
[1] TRUE
> print( all.equal( mf1, model.frame( fitsur2e$eq[[ 1 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsur3 ) ) )
[1] TRUE
> print( all.equal( mf2, model.frame( fitsur3$eq[[ 2 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsur4r3 ) ) )
[1] TRUE
> print( all.equal( mf1, model.frame( fitsur4r3$eq[[ 1 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsur4we ) ) )
[1] TRUE
> print( all.equal( mf2, model.frame( fitsur4we$eq[[ 2 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsur5 ) ) )
[1] TRUE
> print( all.equal( mf2, model.frame( fitsur5$eq[[ 2 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsuri1r3 ) ) )
[1] TRUE
> print( all.equal( mf1, model.frame( fitsuri1r3$eq[[ 1 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsuri2 ) ) )
[1] TRUE
> print( all.equal( mf1, model.frame( fitsuri2$eq[[ 1 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsuri3e ) ) )
[1] TRUE
> print( all.equal( mf1, model.frame( fitsuri3e$eq[[ 1 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsurio4 ) ) )
[1] TRUE
> print( all.equal( mf2, model.frame( fitsurio4$eq[[ 2 ]] ) ) )
[1] TRUE
> print( all.equal( mf, model.frame( fitsuri4 ) ) )
[1] TRUE
> print( all.equal( mf1, model.frame( fitsuri4$eq[[ 1 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsurio5r2 ) ) )
[1] TRUE
> print( all.equal( mf1, model.frame( fitsurio5r2$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mf, model.frame( fitsuri5r2 ) ) )
[1] TRUE
> print( all.equal( mf1, model.frame( fitsuri5r2$eq[[ 1 ]] ) ) )
[1] TRUE
> 
> print( all.equal( mf, model.frame( fitsuri5wr2 ) ) )
[1] TRUE
> print( all.equal( mf1, model.frame( fitsuri5wr2$eq[[ 1 ]] ) ) )
[1] TRUE
> 
> 
> ## **************** model matrix ************************
> # with returnModelMatrix = TRUE
> print( !is.null( fitsur1e2$eq[[ 1 ]]$modelMatrix ) )
[1] TRUE
> print( mm <- model.matrix( fitsur1e2 ) )
          demand_(Intercept) demand_price demand_income supply_(Intercept)
demand_1                   1      100.323          87.4                  0
demand_2                   1      104.264          97.6                  0
demand_3                   1      103.435          96.7                  0
demand_4                   1      104.506          98.2                  0
demand_5                   1       98.001          99.8                  0
demand_6                   1       99.456         100.5                  0
demand_7                   1      101.066         103.2                  0
demand_8                   1      104.763         107.8                  0
demand_9                   1       96.446          96.6                  0
demand_10                  1       91.228          88.9                  0
demand_11                  1       93.085          75.1                  0
demand_12                  1       98.801          76.9                  0
demand_13                  1      102.908          84.6                  0
demand_14                  1       98.756          90.6                  0
demand_15                  1       95.119         103.1                  0
demand_16                  1       98.451         105.1                  0
demand_17                  1       86.498          96.4                  0
demand_18                  1      104.016         104.4                  0
demand_19                  1      105.769         110.7                  0
demand_20                  1      113.490         127.1                  0
supply_1                   0        0.000           0.0                  1
supply_2                   0        0.000           0.0                  1
supply_3                   0        0.000           0.0                  1
supply_4                   0        0.000           0.0                  1
supply_5                   0        0.000           0.0                  1
supply_6                   0        0.000           0.0                  1
supply_7                   0        0.000           0.0                  1
supply_8                   0        0.000           0.0                  1
supply_9                   0        0.000           0.0                  1
supply_10                  0        0.000           0.0                  1
supply_11                  0        0.000           0.0                  1
supply_12                  0        0.000           0.0                  1
supply_13                  0        0.000           0.0                  1
supply_14                  0        0.000           0.0                  1
supply_15                  0        0.000           0.0                  1
supply_16                  0        0.000           0.0                  1
supply_17                  0        0.000           0.0                  1
supply_18                  0        0.000           0.0                  1
supply_19                  0        0.000           0.0                  1
supply_20                  0        0.000           0.0                  1
          supply_price supply_farmPrice supply_trend
demand_1         0.000              0.0            0
demand_2         0.000              0.0            0
demand_3         0.000              0.0            0
demand_4         0.000              0.0            0
demand_5         0.000              0.0            0
demand_6         0.000              0.0            0
demand_7         0.000              0.0            0
demand_8         0.000              0.0            0
demand_9         0.000              0.0            0
demand_10        0.000              0.0            0
demand_11        0.000              0.0            0
demand_12        0.000              0.0            0
demand_13        0.000              0.0            0
demand_14        0.000              0.0            0
demand_15        0.000              0.0            0
demand_16        0.000              0.0            0
demand_17        0.000              0.0            0
demand_18        0.000              0.0            0
demand_19        0.000              0.0            0
demand_20        0.000              0.0            0
supply_1       100.323             98.0            1
supply_2       104.264             99.1            2
supply_3       103.435             99.1            3
supply_4       104.506             98.1            4
supply_5        98.001            110.8            5
supply_6        99.456            108.2            6
supply_7       101.066            105.6            7
supply_8       104.763            109.8            8
supply_9        96.446            108.7            9
supply_10       91.228            100.6           10
supply_11       93.085             81.0           11
supply_12       98.801             68.6           12
supply_13      102.908             70.9           13
supply_14       98.756             81.4           14
supply_15       95.119            102.3           15
supply_16       98.451            105.0           16
supply_17       86.498            110.5           17
supply_18      104.016             92.5           18
supply_19      105.769             89.3           19
supply_20      113.490             93.0           20
> print( mm1 <- model.matrix( fitsur1e2$eq[[ 1 ]] ) )
   (Intercept)   price income
1            1 100.323   87.4
2            1 104.264   97.6
3            1 103.435   96.7
4            1 104.506   98.2
5            1  98.001   99.8
6            1  99.456  100.5
7            1 101.066  103.2
8            1 104.763  107.8
9            1  96.446   96.6
10           1  91.228   88.9
11           1  93.085   75.1
12           1  98.801   76.9
13           1 102.908   84.6
14           1  98.756   90.6
15           1  95.119  103.1
16           1  98.451  105.1
17           1  86.498   96.4
18           1 104.016  104.4
19           1 105.769  110.7
20           1 113.490  127.1
attr(,"assign")
[1] 0 1 2
> print( mm2 <- model.matrix( fitsur1e2$eq[[ 2 ]] ) )
   (Intercept)   price farmPrice trend
1            1 100.323      98.0     1
2            1 104.264      99.1     2
3            1 103.435      99.1     3
4            1 104.506      98.1     4
5            1  98.001     110.8     5
6            1  99.456     108.2     6
7            1 101.066     105.6     7
8            1 104.763     109.8     8
9            1  96.446     108.7     9
10           1  91.228     100.6    10
11           1  93.085      81.0    11
12           1  98.801      68.6    12
13           1 102.908      70.9    13
14           1  98.756      81.4    14
15           1  95.119     102.3    15
16           1  98.451     105.0    16
17           1  86.498     110.5    17
18           1 104.016      92.5    18
19           1 105.769      89.3    19
20           1 113.490      93.0    20
attr(,"assign")
[1] 0 1 2 3
> 
> # with returnModelMatrix = FALSE
> print( all.equal( mm, model.matrix( fitsur1r2 ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur1r2$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur1r2$eq[[ 2 ]] ) ) )
[1] TRUE
> print( !is.null( fitsur1r2$eq[[ 1 ]]$modelMatrix ) )
[1] FALSE
> 
> # with returnModelMatrix = TRUE
> print( !is.null( fitsur2e$eq[[ 1 ]]$modelMatrix ) )
[1] TRUE
> print( all.equal( mm, model.matrix( fitsur2e ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur2e$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur2e$eq[[ 2 ]] ) ) )
[1] TRUE
> 
> # with returnModelMatrix = FALSE
> print( all.equal( mm, model.matrix( fitsur2 ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur2$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur2$eq[[ 2 ]] ) ) )
[1] TRUE
> print( !is.null( fitsur2$eq[[ 1 ]]$modelMatrix ) )
[1] FALSE
> 
> # with returnModelMatrix = TRUE
> print( !is.null( fitsur2we$eq[[ 1 ]]$modelMatrix ) )
[1] TRUE
> print( all.equal( mm, model.matrix( fitsur2we ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur2we$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur2we$eq[[ 2 ]] ) ) )
[1] TRUE
> 
> # with returnModelMatrix = FALSE
> print( all.equal( mm, model.matrix( fitsur2 ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur2$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur2$eq[[ 2 ]] ) ) )
[1] TRUE
> print( !is.null( fitsuri2$eq[[ 1 ]]$modelMatrix ) )
[1] FALSE
> 
> # with returnModelMatrix = TRUE
> print( !is.null( fitsur3e$eq[[ 1 ]]$modelMatrix ) )
[1] TRUE
> print( all.equal( mm, model.matrix( fitsur3e ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur3e$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur3e$eq[[ 2 ]] ) ) )
[1] TRUE
> 
> # with returnModelMatrix = FALSE
> print( all.equal( mm, model.matrix( fitsur3 ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur3$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur3$eq[[ 2 ]] ) ) )
[1] TRUE
> print( !is.null( fitsur3$eq[[ 1 ]]$modelMatrix ) )
[1] FALSE
> 
> # with returnModelMatrix = TRUE
> print( !is.null( fitsur3w$eq[[ 1 ]]$modelMatrix ) )
[1] TRUE
> print( all.equal( mm, model.matrix( fitsur3w ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur3w$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur3w$eq[[ 2 ]] ) ) )
[1] TRUE
> 
> # with returnModelMatrix = FALSE
> print( all.equal( mm, model.matrix( fitsur3 ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur3$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur3$eq[[ 2 ]] ) ) )
[1] TRUE
> print( !is.null( fitsuri3$eq[[ 1 ]]$modelMatrix ) )
[1] FALSE
> 
> # with returnModelMatrix = TRUE
> print( !is.null( fitsur4r3$eq[[ 1 ]]$modelMatrix ) )
[1] TRUE
> print( all.equal( mm, model.matrix( fitsur4r3 ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur4r3$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur4r3$eq[[ 2 ]] ) ) )
[1] TRUE
> 
> # with returnModelMatrix = FALSE
> print( all.equal( mm, model.matrix( fitsur4we ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur4we$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm2, model.matrix( fitsur4we$eq[[ 2 ]] ) ) )
[1] TRUE
> print( !is.null( fitsur4we$eq[[ 1 ]]$modelMatrix ) )
[1] FALSE
> 
> # with returnModelMatrix = TRUE
> print( !is.null( fitsurio5r2$eq[[ 1 ]]$modelMatrix ) )
[1] TRUE
> print( !is.null( fitsur5$eq[[ 1 ]]$modelMatrix ) )
[1] TRUE
> print( all.equal( mm, model.matrix( fitsurio5r2 ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsurio5r2$eq[[ 1 ]] ) ) )
[1] TRUE
> print( all.equal( mm, model.matrix( fitsur5 ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur5$eq[[ 1 ]] ) ) )
[1] TRUE
> #print( all.equal( mm2, model.matrix( fitsuri5r2$eq[[ 2 ]] ) ) )
> 
> # with returnModelMatrix = FALSE
> print( all.equal( mm, model.matrix( fitsurio5 ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsurio5$eq[[ 1 ]] ) ) )
[1] TRUE
> 
> # with returnModelMatrix = FALSE
> print( all.equal( mm, model.matrix( fitsur5w ) ) )
[1] TRUE
> print( all.equal( mm1, model.matrix( fitsur5w$eq[[ 1 ]] ) ) )
[1] TRUE
> #print( all.equal( mm2, model.matrix( fitsuri5r2$eq[[ 1 ]] ) ) )
> print( !is.null( fitsurio5$eq[[ 1 ]]$modelMatrix ) )
[1] FALSE
> print( !is.null( fitsur5w$eq[[ 1 ]]$modelMatrix ) )
[1] FALSE
> 
> 
> ## **************** formulas ************************
> formula( fitsur1e2 )
$demand
consump ~ price + income

$supply
consump ~ price + farmPrice + trend

> formula( fitsur1e2$eq[[ 2 ]] )
consump ~ price + farmPrice + trend
> 
> formula( fitsur2e )
$demand
consump ~ price + income

$supply
consump ~ price + farmPrice + trend

> formula( fitsur2e$eq[[ 1 ]] )
consump ~ price + income
> 
> formula( fitsur2we )
$demand
consump ~ price + income

$supply
consump ~ price + farmPrice + trend

> formula( fitsur2we$eq[[ 1 ]] )
consump ~ price + income
> 
> formula( fitsur3 )
$demand
consump ~ price + income

$supply
consump ~ price + farmPrice + trend

> formula( fitsur3$eq[[ 2 ]] )
consump ~ price + farmPrice + trend
> 
> formula( fitsur4r3 )
$demand
consump ~ price + income

$supply
consump ~ price + farmPrice + trend

> formula( fitsur4r3$eq[[ 1 ]] )
consump ~ price + income
> 
> formula( fitsur5 )
$demand
consump ~ price + income

$supply
consump ~ price + farmPrice + trend

> formula( fitsur5$eq[[ 2 ]] )
consump ~ price + farmPrice + trend
> 
> formula( fitsuri1r3 )
$demand
consump ~ price + income

$supply
price ~ income + farmPrice + trend

> formula( fitsuri1r3$eq[[ 1 ]] )
consump ~ price + income
> 
> formula( fitsuri2 )
$demand
consump ~ price + income

$supply
price ~ income + farmPrice + trend

> formula( fitsuri2$eq[[ 2 ]] )
price ~ income + farmPrice + trend
> 
> formula( fitsuri3e )
$demand
consump ~ price + income

$supply
price ~ income + farmPrice + trend

> formula( fitsuri3e$eq[[ 1 ]] )
consump ~ price + income
> 
> formula( fitsurio4 )
$demand
consump ~ price + income

$supply
consump ~ price + farmPrice + trend

> formula( fitsurio4$eq[[ 2 ]] )
consump ~ price + farmPrice + trend
> formula( fitsuri4 )
$demand
consump ~ price + income

$supply
price ~ income + farmPrice + trend

> formula( fitsuri4$eq[[ 2 ]] )
price ~ income + farmPrice + trend
> 
> formula( fitsurio5r2 )
$demand
consump ~ price + income

$supply
consump ~ price + farmPrice + trend

> formula( fitsurio5r2$eq[[ 1 ]] )
consump ~ price + income
> formula( fitsuri5r2 )
$demand
consump ~ price + income

$supply
price ~ income + farmPrice + trend

> formula( fitsuri5r2$eq[[ 1 ]] )
consump ~ price + income
> 
> formula( fitsuri5wr2 )
$demand
consump ~ price + income

$supply
price ~ income + farmPrice + trend

> formula( fitsuri5wr2$eq[[ 1 ]] )
consump ~ price + income
> 
> 
> ## **************** model terms *******************
> terms( fitsur1e2 )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsur1e2$eq[[ 2 ]] )
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 
> 
> terms( fitsur2e )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsur2e$eq[[ 1 ]] )
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 
> 
> terms( fitsur3 )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsur3$eq[[ 2 ]] )
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 
> 
> terms( fitsur3w )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsur3w$eq[[ 2 ]] )
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 
> 
> terms( fitsur4r3 )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsur4r3$eq[[ 1 ]] )
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 
> 
> terms( fitsur4we )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsur4we$eq[[ 1 ]] )
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 
> 
> terms( fitsur5 )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsur5$eq[[ 2 ]] )
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 
> 
> terms( fitsuri1r3 )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
price ~ income + farmPrice + trend
attr(,"variables")
list(price, income, farmPrice, trend)
attr(,"factors")
          income farmPrice trend
price          0         0     0
income         1         0     0
farmPrice      0         1     0
trend          0         0     1
attr(,"term.labels")
[1] "income"    "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(price, income, farmPrice, trend)
attr(,"dataClasses")
    price    income farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsuri1r3$eq[[ 1 ]] )
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 
> 
> terms( fitsuri2 )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
price ~ income + farmPrice + trend
attr(,"variables")
list(price, income, farmPrice, trend)
attr(,"factors")
          income farmPrice trend
price          0         0     0
income         1         0     0
farmPrice      0         1     0
trend          0         0     1
attr(,"term.labels")
[1] "income"    "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(price, income, farmPrice, trend)
attr(,"dataClasses")
    price    income farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsuri2$eq[[ 2 ]] )
price ~ income + farmPrice + trend
attr(,"variables")
list(price, income, farmPrice, trend)
attr(,"factors")
          income farmPrice trend
price          0         0     0
income         1         0     0
farmPrice      0         1     0
trend          0         0     1
attr(,"term.labels")
[1] "income"    "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(price, income, farmPrice, trend)
attr(,"dataClasses")
    price    income farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 
> 
> terms( fitsuri3e )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
price ~ income + farmPrice + trend
attr(,"variables")
list(price, income, farmPrice, trend)
attr(,"factors")
          income farmPrice trend
price          0         0     0
income         1         0     0
farmPrice      0         1     0
trend          0         0     1
attr(,"term.labels")
[1] "income"    "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(price, income, farmPrice, trend)
attr(,"dataClasses")
    price    income farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsuri3e$eq[[ 1 ]] )
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 
> 
> terms( fitsurio4 )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsurio4$eq[[ 2 ]] )
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 
> terms( fitsuri4 )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
price ~ income + farmPrice + trend
attr(,"variables")
list(price, income, farmPrice, trend)
attr(,"factors")
          income farmPrice trend
price          0         0     0
income         1         0     0
farmPrice      0         1     0
trend          0         0     1
attr(,"term.labels")
[1] "income"    "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(price, income, farmPrice, trend)
attr(,"dataClasses")
    price    income farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsuri4$eq[[ 2 ]] )
price ~ income + farmPrice + trend
attr(,"variables")
list(price, income, farmPrice, trend)
attr(,"factors")
          income farmPrice trend
price          0         0     0
income         1         0     0
farmPrice      0         1     0
trend          0         0     1
attr(,"term.labels")
[1] "income"    "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(price, income, farmPrice, trend)
attr(,"dataClasses")
    price    income farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 
> 
> terms( fitsurio5r2 )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
consump ~ price + farmPrice + trend
attr(,"variables")
list(consump, price, farmPrice, trend)
attr(,"factors")
          price farmPrice trend
consump       0         0     0
price         1         0     0
farmPrice     0         1     0
trend         0         0     1
attr(,"term.labels")
[1] "price"     "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, farmPrice, trend)
attr(,"dataClasses")
  consump     price farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsurio5r2$eq[[ 1 ]] )
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 
> terms( fitsuri5r2 )
$demand
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 

$supply
price ~ income + farmPrice + trend
attr(,"variables")
list(price, income, farmPrice, trend)
attr(,"factors")
          income farmPrice trend
price          0         0     0
income         1         0     0
farmPrice      0         1     0
trend          0         0     1
attr(,"term.labels")
[1] "income"    "farmPrice" "trend"    
attr(,"order")
[1] 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(price, income, farmPrice, trend)
attr(,"dataClasses")
    price    income farmPrice     trend 
"numeric" "numeric" "numeric" "numeric" 

> terms( fitsuri5r2$eq[[ 1 ]] )
consump ~ price + income
attr(,"variables")
list(consump, price, income)
attr(,"factors")
        price income
consump     0      0
price       1      0
income      0      1
attr(,"term.labels")
[1] "price"  "income"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(consump, price, income)
attr(,"dataClasses")
  consump     price    income 
"numeric" "numeric" "numeric" 
> 
